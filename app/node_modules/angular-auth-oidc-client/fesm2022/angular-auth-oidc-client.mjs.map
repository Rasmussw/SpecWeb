{"version":3,"file":"angular-auth-oidc-client.mjs","sources":["../../../projects/angular-auth-oidc-client/src/lib/config/loader/config-loader.ts","../../../projects/angular-auth-oidc-client/src/lib/auth-config.ts","../../../projects/angular-auth-oidc-client/src/lib/logging/abstract-logger.service.ts","../../../projects/angular-auth-oidc-client/src/lib/logging/console-logger.service.ts","../../../projects/angular-auth-oidc-client/src/lib/storage/abstract-security-storage.ts","../../../projects/angular-auth-oidc-client/src/lib/storage/default-sessionstorage.service.ts","../../../projects/angular-auth-oidc-client/src/lib/provide-auth.ts","../../../projects/angular-auth-oidc-client/src/lib/auth.module.ts","../../../projects/angular-auth-oidc-client/src/lib/logging/log-level.ts","../../../projects/angular-auth-oidc-client/src/lib/logging/logger.service.ts","../../../projects/angular-auth-oidc-client/src/lib/storage/browser-storage.service.ts","../../../projects/angular-auth-oidc-client/src/lib/storage/storage-persistence.service.ts","../../../projects/angular-auth-oidc-client/src/lib/auto-login/auto-login.service.ts","../../../projects/angular-auth-oidc-client/src/lib/public-events/event-types.ts","../../../projects/angular-auth-oidc-client/src/lib/iframe/existing-iframe.service.ts","../../../projects/angular-auth-oidc-client/src/lib/public-events/public-events.service.ts","../../../projects/angular-auth-oidc-client/src/lib/iframe/check-session.service.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/url/current-url.service.ts","../../../projects/angular-auth-oidc-client/src/lib/validation/validation-result.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/url/uri-encoder.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/crypto/crypto.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/random/random.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/flows-data.service.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/flowHelper/flow-helper.service.ts","../../../projects/angular-auth-oidc-client/src/lib/validation/jwt-window-crypto.service.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/url/url.service.ts","../../../projects/angular-auth-oidc-client/src/lib/validation/token-validation.helper.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/tokenHelper/token-helper.service.ts","../../../projects/angular-auth-oidc-client/src/lib/extractors/jwk.extractor.ts","../../../projects/angular-auth-oidc-client/src/lib/validation/jwk-window-crypto.service.ts","../../../projects/angular-auth-oidc-client/src/lib/validation/token-validation.service.ts","../../../projects/angular-auth-oidc-client/src/lib/api/http-base.service.ts","../../../projects/angular-auth-oidc-client/src/lib/api/data.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/callback-handling/code-flow-callback-handler.service.ts","../../../projects/angular-auth-oidc-client/src/lib/auth-state/auth-state.service.ts","../../../projects/angular-auth-oidc-client/src/lib/user-data/user.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/reset-auth-data.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/callback-handling/implicit-flow-callback-handler.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/signin-key-data.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/callback-handling/history-jwt-keys-callback-handler.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/callback-handling/user-callback-handler.service.ts","../../../projects/angular-auth-oidc-client/src/lib/validation/state-validation-result.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/equality/equality.service.ts","../../../projects/angular-auth-oidc-client/src/lib/validation/state-validation.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/callback-handling/state-validation-callback-handler.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/callback-handling/refresh-session-callback-handler.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/callback-handling/refresh-token-callback-handler.service.ts","../../../projects/angular-auth-oidc-client/src/lib/flows/flows.service.ts","../../../projects/angular-auth-oidc-client/src/lib/callback/interval.service.ts","../../../projects/angular-auth-oidc-client/src/lib/callback/implicit-flow-callback.service.ts","../../../projects/angular-auth-oidc-client/src/lib/iframe/silent-renew.service.ts","../../../projects/angular-auth-oidc-client/src/lib/callback/code-flow-callback.service.ts","../../../projects/angular-auth-oidc-client/src/lib/callback/callback.service.ts","../../../projects/angular-auth-oidc-client/src/lib/config/auth-well-known/auth-well-known-data.service.ts","../../../projects/angular-auth-oidc-client/src/lib/config/auth-well-known/auth-well-known.service.ts","../../../projects/angular-auth-oidc-client/src/lib/iframe/refresh-session-iframe.service.ts","../../../projects/angular-auth-oidc-client/src/lib/callback/refresh-session-refresh-token.service.ts","../../../projects/angular-auth-oidc-client/src/lib/callback/refresh-session.service.ts","../../../projects/angular-auth-oidc-client/src/lib/config/default-config.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/rule.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/rules/ensure-authority.rule.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/rules/ensure-clientId.rule.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/rules/ensure-no-duplicated-configs.rule.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/rules/ensure-redirect-url.rule.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/rules/ensure-silentRenewUrl-with-no-refreshtokens.rule.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/rules/use-offline-scope-with-silent-renew.rule.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/rules/index.ts","../../../projects/angular-auth-oidc-client/src/lib/config/validation/config-validation.service.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/platform-provider/platform.provider.ts","../../../projects/angular-auth-oidc-client/src/lib/config/config.service.ts","../../../projects/angular-auth-oidc-client/src/lib/callback/periodically-token-check.service.ts","../../../projects/angular-auth-oidc-client/src/lib/login/popup/popup.service.ts","../../../projects/angular-auth-oidc-client/src/lib/auth-state/check-auth.service.ts","../../../projects/angular-auth-oidc-client/src/lib/login/response-type-validation/response-type-validation.service.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/redirect/redirect.service.ts","../../../projects/angular-auth-oidc-client/src/lib/login/par/par.service.ts","../../../projects/angular-auth-oidc-client/src/lib/login/par/par-login.service.ts","../../../projects/angular-auth-oidc-client/src/lib/login/popup/popup-login.service.ts","../../../projects/angular-auth-oidc-client/src/lib/login/standard/standard-login.service.ts","../../../projects/angular-auth-oidc-client/src/lib/login/login.service.ts","../../../projects/angular-auth-oidc-client/src/lib/auto-login/auto-login-all-routes.guard.ts","../../../projects/angular-auth-oidc-client/src/lib/auto-login/auto-login-partial-routes.guard.ts","../../../projects/angular-auth-oidc-client/src/lib/interceptor/closest-matching-route.service.ts","../../../projects/angular-auth-oidc-client/src/lib/interceptor/auth.interceptor.ts","../../../projects/angular-auth-oidc-client/src/lib/utils/object/object.helper.ts","../../../projects/angular-auth-oidc-client/src/lib/logoff-revoke/logoff-revocation.service.ts","../../../projects/angular-auth-oidc-client/src/lib/oidc.security.service.ts","../../../projects/angular-auth-oidc-client/src/lib/storage/default-localstorage.service.ts","../../../projects/angular-auth-oidc-client/src/lib/index.ts","../../../projects/angular-auth-oidc-client/src/public-api.ts","../../../projects/angular-auth-oidc-client/src/angular-auth-oidc-client.ts"],"sourcesContent":["import { Provider } from '@angular/core';\r\nimport { forkJoin, Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { OpenIdConfiguration } from '../openid-configuration';\r\n\r\nexport class OpenIdConfigLoader {\r\n  loader?: Provider;\r\n}\r\n\r\nexport abstract class StsConfigLoader {\r\n  abstract loadConfigs(): Observable<OpenIdConfiguration[]>;\r\n}\r\n\r\nexport class StsConfigStaticLoader implements StsConfigLoader {\r\n  constructor(\r\n    private readonly passedConfigs: OpenIdConfiguration | OpenIdConfiguration[]\r\n  ) {}\r\n\r\n  loadConfigs(): Observable<OpenIdConfiguration[]> {\r\n    if (Array.isArray(this.passedConfigs)) {\r\n      return of(this.passedConfigs);\r\n    }\r\n\r\n    return of([this.passedConfigs]);\r\n  }\r\n}\r\n\r\nexport class StsConfigHttpLoader implements StsConfigLoader {\r\n  constructor(\r\n    private readonly configs$:\r\n      | Observable<OpenIdConfiguration>\r\n      | Observable<OpenIdConfiguration>[]\r\n      | Observable<OpenIdConfiguration[]>\r\n  ) {}\r\n\r\n  loadConfigs(): Observable<OpenIdConfiguration[]> {\r\n    if (Array.isArray(this.configs$)) {\r\n      return forkJoin(this.configs$);\r\n    }\r\n\r\n    const singleConfigOrArray = this.configs$ as Observable<unknown>;\r\n\r\n    return singleConfigOrArray.pipe(\r\n      map((value: unknown) => {\r\n        if (Array.isArray(value)) {\r\n          return value as OpenIdConfiguration[];\r\n        }\r\n\r\n        return [value] as OpenIdConfiguration[];\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { InjectionToken, Provider } from '@angular/core';\r\nimport {\r\n  StsConfigLoader,\r\n  StsConfigStaticLoader,\r\n} from './config/loader/config-loader';\r\nimport { OpenIdConfiguration } from './config/openid-configuration';\r\n\r\nexport interface PassedInitialConfig {\r\n  config?: OpenIdConfiguration | OpenIdConfiguration[];\r\n  loader?: Provider;\r\n}\r\n\r\nexport function createStaticLoader(\r\n  passedConfig: PassedInitialConfig\r\n): StsConfigLoader {\r\n  return new StsConfigStaticLoader(passedConfig.config);\r\n}\r\n\r\nexport const PASSED_CONFIG = new InjectionToken<PassedInitialConfig>(\r\n  'PASSED_CONFIG'\r\n);\r\n","import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Implement this class-interface to create a custom logger service.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport abstract class AbstractLoggerService {\r\n  abstract logError(message: any, ...args: any[]): void;\r\n\r\n  abstract logWarning(message: any, ...args: any[]): void;\r\n\r\n  abstract logDebug(message: any, ...args: any[]): void;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AbstractLoggerService } from './abstract-logger.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ConsoleLoggerService implements AbstractLoggerService {\r\n  logError(message?: any, ...args: any[]): void {\r\n    console.error(message, ...args);\r\n  }\r\n\r\n  logWarning(message?: any, ...args: any[]): void {\r\n    console.warn(message, ...args);\r\n  }\r\n\r\n  logDebug(message?: any, ...args: any[]): void {\r\n    console.debug(message, ...args);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Implement this class-interface to create a custom storage.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport abstract class AbstractSecurityStorage {\r\n  /**\r\n   * This method must contain the logic to read the storage.\r\n   *\r\n   * @return The value of the given key\r\n   */\r\n  abstract read(key: string): any;\r\n\r\n  /**\r\n   * This method must contain the logic to write the storage.\r\n   *\r\n   * @param key The key to write a value for\r\n   * @param value The value for the given key\r\n   */\r\n  abstract write(key: string, value: any): void;\r\n\r\n  /**\r\n   * This method must contain the logic to remove an item from the storage.\r\n   *\r\n   * @param key The value for the key to be removed\r\n   */\r\n  abstract remove(key: string): void;\r\n\r\n  /**\r\n   * This method must contain the logic to remove all items from the storage.\r\n   */\r\n  abstract clear(): void;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AbstractSecurityStorage } from './abstract-security-storage';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DefaultSessionStorageService implements AbstractSecurityStorage {\r\n  public read(key: string): any {\r\n    return sessionStorage.getItem(key);\r\n  }\r\n\r\n  public write(key: string, value: any): void {\r\n    sessionStorage.setItem(key, value);\r\n  }\r\n\r\n  public remove(key: string): void {\r\n    sessionStorage.removeItem(key);\r\n  }\r\n\r\n  public clear(): void {\r\n    sessionStorage.clear();\r\n  }\r\n}\r\n","import {\r\n  EnvironmentProviders,\r\n  makeEnvironmentProviders,\r\n  Provider,\r\n} from '@angular/core';\r\nimport {\r\n  createStaticLoader,\r\n  PASSED_CONFIG,\r\n  PassedInitialConfig,\r\n} from './auth-config';\r\nimport { StsConfigLoader } from './config/loader/config-loader';\r\nimport { AbstractLoggerService } from './logging/abstract-logger.service';\r\nimport { ConsoleLoggerService } from './logging/console-logger.service';\r\nimport { AbstractSecurityStorage } from './storage/abstract-security-storage';\r\nimport { DefaultSessionStorageService } from './storage/default-sessionstorage.service';\r\n\r\nexport function provideAuth(\r\n  passedConfig: PassedInitialConfig\r\n): EnvironmentProviders {\r\n  return makeEnvironmentProviders([..._provideAuth(passedConfig)]);\r\n}\r\n\r\nexport function _provideAuth(passedConfig: PassedInitialConfig): Provider[] {\r\n  return [\r\n    // Make the PASSED_CONFIG available through injection\r\n    { provide: PASSED_CONFIG, useValue: passedConfig },\r\n\r\n    // Create the loader: Either the one getting passed or a static one\r\n    passedConfig?.loader || {\r\n      provide: StsConfigLoader,\r\n      useFactory: createStaticLoader,\r\n      deps: [PASSED_CONFIG],\r\n    },\r\n    {\r\n      provide: AbstractSecurityStorage,\r\n      useClass: DefaultSessionStorageService,\r\n    },\r\n    { provide: AbstractLoggerService, useClass: ConsoleLoggerService },\r\n  ];\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { PassedInitialConfig } from './auth-config';\r\nimport { _provideAuth } from './provide-auth';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, HttpClientModule],\r\n  declarations: [],\r\n  exports: [],\r\n})\r\nexport class AuthModule {\r\n  static forRoot(\r\n    passedConfig: PassedInitialConfig\r\n  ): ModuleWithProviders<AuthModule> {\r\n    return {\r\n      ngModule: AuthModule,\r\n      providers: [..._provideAuth(passedConfig)],\r\n    };\r\n  }\r\n}\r\n","export enum LogLevel {\n  None,\n  Debug,\n  Warn,\n  Error,\n}\n","import { Injectable } from '@angular/core';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { AbstractLoggerService } from './abstract-logger.service';\r\nimport { LogLevel } from './log-level';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class LoggerService {\r\n  constructor(private readonly abstractLoggerService: AbstractLoggerService) {}\r\n\r\n  logError(\r\n    configuration: OpenIdConfiguration,\r\n    message: any,\r\n    ...args: any[]\r\n  ): void {\r\n    if (this.loggingIsTurnedOff(configuration)) {\r\n      return;\r\n    }\r\n\r\n    const { configId } = configuration;\r\n    const messageToLog = this.isObject(message)\r\n      ? JSON.stringify(message)\r\n      : message;\r\n\r\n    if (!!args && !!args.length) {\r\n      this.abstractLoggerService.logError(\r\n        `[ERROR] ${configId} - ${messageToLog}`,\r\n        ...args\r\n      );\r\n    } else {\r\n      this.abstractLoggerService.logError(\r\n        `[ERROR] ${configId} - ${messageToLog}`\r\n      );\r\n    }\r\n  }\r\n\r\n  logWarning(\r\n    configuration: OpenIdConfiguration,\r\n    message: any,\r\n    ...args: any[]\r\n  ): void {\r\n    if (!this.logLevelIsSet(configuration)) {\r\n      return;\r\n    }\r\n\r\n    if (this.loggingIsTurnedOff(configuration)) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      !this.currentLogLevelIsEqualOrSmallerThan(configuration, LogLevel.Warn)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const { configId } = configuration;\r\n    const messageToLog = this.isObject(message)\r\n      ? JSON.stringify(message)\r\n      : message;\r\n\r\n    if (!!args && !!args.length) {\r\n      this.abstractLoggerService.logWarning(\r\n        `[WARN] ${configId} - ${messageToLog}`,\r\n        ...args\r\n      );\r\n    } else {\r\n      this.abstractLoggerService.logWarning(\r\n        `[WARN] ${configId} - ${messageToLog}`\r\n      );\r\n    }\r\n  }\r\n\r\n  logDebug(\r\n    configuration: OpenIdConfiguration,\r\n    message: any,\r\n    ...args: any[]\r\n  ): void {\r\n    if (!this.logLevelIsSet(configuration)) {\r\n      return;\r\n    }\r\n\r\n    if (this.loggingIsTurnedOff(configuration)) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      !this.currentLogLevelIsEqualOrSmallerThan(configuration, LogLevel.Debug)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const { configId } = configuration;\r\n    const messageToLog = this.isObject(message)\r\n      ? JSON.stringify(message)\r\n      : message;\r\n\r\n    if (!!args && !!args.length) {\r\n      this.abstractLoggerService.logDebug(\r\n        `[DEBUG] ${configId} - ${messageToLog}`,\r\n        ...args\r\n      );\r\n    } else {\r\n      this.abstractLoggerService.logDebug(\r\n        `[DEBUG] ${configId} - ${messageToLog}`\r\n      );\r\n    }\r\n  }\r\n\r\n  private currentLogLevelIsEqualOrSmallerThan(\r\n    configuration: OpenIdConfiguration,\r\n    logLevelToCompare: LogLevel\r\n  ): boolean {\r\n    const { logLevel } = configuration || {};\r\n\r\n    return logLevel <= logLevelToCompare;\r\n  }\r\n\r\n  private logLevelIsSet(configuration: OpenIdConfiguration): boolean {\r\n    const { logLevel } = configuration || {};\r\n\r\n    if (logLevel === null) {\r\n      return false;\r\n    }\r\n\r\n    return logLevel !== undefined;\r\n  }\r\n\r\n  private loggingIsTurnedOff(configuration: OpenIdConfiguration): boolean {\r\n    const { logLevel } = configuration || {};\r\n\r\n    return logLevel === LogLevel.None;\r\n  }\r\n\r\n  private isObject(possibleObject: any): boolean {\r\n    return Object.prototype.toString.call(possibleObject) === '[object Object]';\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { AbstractSecurityStorage } from './abstract-security-storage';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class BrowserStorageService {\r\n  constructor(\r\n    private readonly loggerService: LoggerService,\r\n    private readonly abstractSecurityStorage: AbstractSecurityStorage\r\n  ) {}\r\n\r\n  read(key: string, configuration: OpenIdConfiguration): any {\r\n    const { configId } = configuration;\r\n\r\n    if (!this.hasStorage()) {\r\n      this.loggerService.logDebug(\r\n        configuration,\r\n        `Wanted to read '${key}' but Storage was undefined`\r\n      );\r\n\r\n      return null;\r\n    }\r\n\r\n    const storedConfig = this.abstractSecurityStorage.read(configId);\r\n\r\n    if (!storedConfig) {\r\n      return null;\r\n    }\r\n\r\n    return JSON.parse(storedConfig);\r\n  }\r\n\r\n  write(value: any, configuration: OpenIdConfiguration): boolean {\r\n    const { configId } = configuration;\r\n\r\n    if (!this.hasStorage()) {\r\n      this.loggerService.logDebug(\r\n        configuration,\r\n        `Wanted to write '${value}' but Storage was falsy`\r\n      );\r\n\r\n      return false;\r\n    }\r\n\r\n    value = value || null;\r\n\r\n    this.abstractSecurityStorage.write(configId, JSON.stringify(value));\r\n\r\n    return true;\r\n  }\r\n\r\n  remove(key: string, configuration: OpenIdConfiguration): boolean {\r\n    if (!this.hasStorage()) {\r\n      this.loggerService.logDebug(\r\n        configuration,\r\n        `Wanted to remove '${key}' but Storage was falsy`\r\n      );\r\n\r\n      return false;\r\n    }\r\n\r\n    // const storage = this.getStorage(configuration);\r\n    // if (!storage) {\r\n    //   this.loggerService.logDebug(configuration, `Wanted to write '${key}' but Storage was falsy`);\r\n\r\n    //   return false;\r\n    // }\r\n\r\n    this.abstractSecurityStorage.remove(key);\r\n\r\n    return true;\r\n  }\r\n\r\n  // TODO THIS STORAGE WANTS AN ID BUT CLEARS EVERYTHING\r\n  clear(configuration: OpenIdConfiguration): boolean {\r\n    if (!this.hasStorage()) {\r\n      this.loggerService.logDebug(\r\n        configuration,\r\n        `Wanted to clear storage but Storage was falsy`\r\n      );\r\n\r\n      return false;\r\n    }\r\n\r\n    // const storage = this.getStorage(configuration);\r\n    // if (!storage) {\r\n    //   this.loggerService.logDebug(configuration, `Wanted to clear storage but Storage was falsy`);\r\n\r\n    //   return false;\r\n    // }\r\n\r\n    this.abstractSecurityStorage.clear();\r\n\r\n    return true;\r\n  }\r\n\r\n  private hasStorage(): boolean {\r\n    return typeof Storage !== 'undefined';\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { OpenIdConfiguration } from './../config/openid-configuration';\r\nimport { BrowserStorageService } from './browser-storage.service';\r\n\r\nexport type StorageKeys =\r\n  | 'authnResult'\r\n  | 'authzData'\r\n  | 'access_token_expires_at'\r\n  | 'authWellKnownEndPoints'\r\n  | 'userData'\r\n  | 'authNonce'\r\n  | 'codeVerifier'\r\n  | 'authStateControl'\r\n  | 'reusable_refresh_token'\r\n  | 'session_state'\r\n  | 'storageSilentRenewRunning'\r\n  | 'storageCodeFlowInProgress'\r\n  | 'storageCustomParamsAuthRequest'\r\n  | 'storageCustomParamsRefresh'\r\n  | 'storageCustomParamsEndSession'\r\n  | 'redirect'\r\n  | 'configIds'\r\n  | 'jwtKeys'\r\n  | 'popupauth';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class StoragePersistenceService {\r\n  constructor(private readonly browserStorageService: BrowserStorageService) {}\r\n\r\n  read(key: StorageKeys, config: OpenIdConfiguration): any {\r\n    const storedConfig = this.browserStorageService.read(key, config) || {};\r\n\r\n    return storedConfig[key];\r\n  }\r\n\r\n  write(key: StorageKeys, value: any, config: OpenIdConfiguration): boolean {\r\n    const storedConfig = this.browserStorageService.read(key, config) || {};\r\n\r\n    storedConfig[key] = value;\r\n\r\n    return this.browserStorageService.write(storedConfig, config);\r\n  }\r\n\r\n  remove(key: StorageKeys, config: OpenIdConfiguration): void {\r\n    const storedConfig = this.browserStorageService.read(key, config) || {};\r\n\r\n    delete storedConfig[key];\r\n\r\n    this.browserStorageService.write(storedConfig, config);\r\n  }\r\n\r\n  clear(config: OpenIdConfiguration): void {\r\n    this.browserStorageService.clear(config);\r\n  }\r\n\r\n  resetStorageFlowData(config: OpenIdConfiguration): void {\r\n    this.remove('session_state', config);\r\n    this.remove('storageSilentRenewRunning', config);\r\n    this.remove('storageCodeFlowInProgress', config);\r\n    this.remove('codeVerifier', config);\r\n    this.remove('userData', config);\r\n    this.remove('storageCustomParamsAuthRequest', config);\r\n    this.remove('access_token_expires_at', config);\r\n    this.remove('storageCustomParamsRefresh', config);\r\n    this.remove('storageCustomParamsEndSession', config);\r\n    this.remove('reusable_refresh_token', config);\r\n  }\r\n\r\n  resetAuthStateInStorage(config: OpenIdConfiguration): void {\r\n    this.remove('authzData', config);\r\n    this.remove('reusable_refresh_token', config);\r\n    this.remove('authnResult', config);\r\n  }\r\n\r\n  getAccessToken(config: OpenIdConfiguration): string {\r\n    return this.read('authzData', config);\r\n  }\r\n\r\n  getIdToken(config: OpenIdConfiguration): string {\r\n    return this.read('authnResult', config)?.id_token;\r\n  }\r\n\r\n  getRefreshToken(config: OpenIdConfiguration): string {\r\n    const refreshToken = this.read('authnResult', config)?.refresh_token;\r\n\r\n    if (!refreshToken && config.allowUnsafeReuseRefreshToken) {\r\n      return this.read('reusable_refresh_token', config);\r\n    }\r\n\r\n    return refreshToken;\r\n  }\r\n\r\n  getAuthenticationResult(config: OpenIdConfiguration): any {\r\n    return this.read('authnResult', config);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\r\n\r\nconst STORAGE_KEY = 'redirect';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AutoLoginService {\r\n  constructor(\r\n    private readonly storageService: StoragePersistenceService,\r\n    private readonly router: Router\r\n  ) {}\r\n\r\n  checkSavedRedirectRouteAndNavigate(config: OpenIdConfiguration): void {\r\n    const savedRouteForRedirect = this.getStoredRedirectRoute(config);\r\n\r\n    if (savedRouteForRedirect != null) {\r\n      this.deleteStoredRedirectRoute(config);\r\n      this.router.navigateByUrl(savedRouteForRedirect);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Saves the redirect URL to storage.\r\n   *\r\n   * @param config The OpenId configuration.\r\n   * @param url The redirect URL to save.\r\n   */\r\n  saveRedirectRoute(config: OpenIdConfiguration, url: string): void {\r\n    this.storageService.write(STORAGE_KEY, url, config);\r\n  }\r\n\r\n  /**\r\n   * Gets the stored redirect URL from storage.\r\n   */\r\n  private getStoredRedirectRoute(config: OpenIdConfiguration): string {\r\n    return this.storageService.read(STORAGE_KEY, config);\r\n  }\r\n\r\n  /**\r\n   * Removes the redirect URL from storage.\r\n   */\r\n  private deleteStoredRedirectRoute(config: OpenIdConfiguration): void {\r\n    this.storageService.remove(STORAGE_KEY, config);\r\n  }\r\n}\r\n","// eslint-disable-next-line no-shadow\r\nexport enum EventTypes {\r\n  /**\r\n   *  This only works in the AppModule Constructor\r\n   */\r\n  ConfigLoaded,\r\n  CheckingAuth,\r\n  CheckingAuthFinished,\r\n  CheckingAuthFinishedWithError,\r\n  ConfigLoadingFailed,\r\n  CheckSessionReceived,\r\n  UserDataChanged,\r\n  NewAuthenticationResult,\r\n  TokenExpired,\r\n  IdTokenExpired,\r\n  SilentRenewStarted,\r\n  SilentRenewFailed,\r\n}\r\n","import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { LoggerService } from '../logging/logger.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class IFrameService {\r\n  constructor(\r\n    @Inject(DOCUMENT) private readonly document: Document,\r\n    private readonly loggerService: LoggerService\r\n  ) {}\r\n\r\n  getExistingIFrame(identifier: string): HTMLIFrameElement | null {\r\n    const iFrameOnParent = this.getIFrameFromParentWindow(identifier);\r\n\r\n    if (this.isIFrameElement(iFrameOnParent)) {\r\n      return iFrameOnParent;\r\n    }\r\n\r\n    const iFrameOnSelf = this.getIFrameFromWindow(identifier);\r\n\r\n    if (this.isIFrameElement(iFrameOnSelf)) {\r\n      return iFrameOnSelf;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  addIFrameToWindowBody(\r\n    identifier: string,\r\n    config: OpenIdConfiguration\r\n  ): HTMLIFrameElement {\r\n    const sessionIframe = this.document.createElement('iframe');\r\n\r\n    sessionIframe.id = identifier;\r\n    sessionIframe.title = identifier;\r\n    this.loggerService.logDebug(config, sessionIframe);\r\n    sessionIframe.style.display = 'none';\r\n    this.document.body.appendChild(sessionIframe);\r\n\r\n    return sessionIframe;\r\n  }\r\n\r\n  private getIFrameFromParentWindow(\r\n    identifier: string\r\n  ): HTMLIFrameElement | null {\r\n    try {\r\n      const iFrameElement =\r\n        this.document.defaultView.parent.document.getElementById(identifier);\r\n\r\n      if (this.isIFrameElement(iFrameElement)) {\r\n        return iFrameElement;\r\n      }\r\n\r\n      return null;\r\n    } catch (e) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private getIFrameFromWindow(identifier: string): HTMLIFrameElement | null {\r\n    const iFrameElement = this.document.getElementById(identifier);\r\n\r\n    if (this.isIFrameElement(iFrameElement)) {\r\n      return iFrameElement;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private isIFrameElement(\r\n    element: HTMLElement | null\r\n  ): element is HTMLIFrameElement {\r\n    return !!element && element instanceof HTMLIFrameElement;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, ReplaySubject } from 'rxjs';\r\nimport { EventTypes } from './event-types';\r\nimport { OidcClientNotification } from './notification';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PublicEventsService {\r\n  private readonly notify = new ReplaySubject<OidcClientNotification<any>>(1);\r\n\r\n  /**\r\n   * Fires a new event.\r\n   *\r\n   * @param type The event type.\r\n   * @param value The event value.\r\n   */\r\n  fireEvent<T>(type: EventTypes, value?: T): void {\r\n    this.notify.next({ type, value });\r\n  }\r\n\r\n  /**\r\n   * Wires up the event notification observable.\r\n   */\r\n  registerForEvents(): Observable<OidcClientNotification<any>> {\r\n    return this.notify.asObservable();\r\n  }\r\n}\r\n","import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable, NgZone } from '@angular/core';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\nimport { take } from 'rxjs/operators';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { EventTypes } from '../public-events/event-types';\r\nimport { PublicEventsService } from '../public-events/public-events.service';\r\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { IFrameService } from './existing-iframe.service';\r\nimport { OnDestroy } from '@angular/core';\r\n\r\nconst IFRAME_FOR_CHECK_SESSION_IDENTIFIER = 'myiFrameForCheckSession';\r\n\r\n// http://openid.net/specs/openid-connect-session-1_0-ID4.html\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CheckSessionService implements OnDestroy {\r\n  private checkSessionReceived = false;\r\n\r\n  private scheduledHeartBeatRunning: any;\r\n\r\n  private lastIFrameRefresh = 0;\r\n\r\n  private outstandingMessages = 0;\r\n\r\n  private readonly heartBeatInterval = 3000;\r\n\r\n  private readonly iframeRefreshInterval = 60000;\r\n\r\n  private readonly checkSessionChangedInternal$ = new BehaviorSubject<boolean>(\r\n    false\r\n  );\r\n\r\n  private iframeMessageEventListener: any;\r\n\r\n  get checkSessionChanged$(): Observable<boolean> {\r\n    return this.checkSessionChangedInternal$.asObservable();\r\n  }\r\n\r\n  constructor(\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly iFrameService: IFrameService,\r\n    private readonly eventService: PublicEventsService,\r\n    private readonly zone: NgZone,\r\n    @Inject(DOCUMENT) private readonly document: Document\r\n  ) {}\r\n\r\n  ngOnDestroy(): void {\r\n    this.stop();\r\n    this.document.defaultView.removeEventListener(\r\n      'message',\r\n      this.iframeMessageEventListener,\r\n      false\r\n    );\r\n  }\r\n\r\n  isCheckSessionConfigured(configuration: OpenIdConfiguration): boolean {\r\n    const { startCheckSession } = configuration;\r\n\r\n    return startCheckSession;\r\n  }\r\n\r\n  start(configuration: OpenIdConfiguration): void {\r\n    if (!!this.scheduledHeartBeatRunning) {\r\n      return;\r\n    }\r\n\r\n    const { clientId } = configuration;\r\n\r\n    this.pollServerSession(clientId, configuration);\r\n  }\r\n\r\n  stop(): void {\r\n    if (!this.scheduledHeartBeatRunning) {\r\n      return;\r\n    }\r\n\r\n    this.clearScheduledHeartBeat();\r\n    this.checkSessionReceived = false;\r\n  }\r\n\r\n  serverStateChanged(configuration: OpenIdConfiguration): boolean {\r\n    const { startCheckSession } = configuration;\r\n\r\n    return startCheckSession && this.checkSessionReceived;\r\n  }\r\n\r\n  getExistingIframe(): HTMLIFrameElement {\r\n    return this.iFrameService.getExistingIFrame(\r\n      IFRAME_FOR_CHECK_SESSION_IDENTIFIER\r\n    );\r\n  }\r\n\r\n  private init(configuration: OpenIdConfiguration): Observable<any> {\r\n    if (this.lastIFrameRefresh + this.iframeRefreshInterval > Date.now()) {\r\n      return of(undefined);\r\n    }\r\n\r\n    const authWellKnownEndPoints = this.storagePersistenceService.read(\r\n      'authWellKnownEndPoints',\r\n      configuration\r\n    );\r\n\r\n    if (!authWellKnownEndPoints) {\r\n      this.loggerService.logWarning(\r\n        configuration,\r\n        'CheckSession - init check session: authWellKnownEndpoints is undefined. Returning.'\r\n      );\r\n\r\n      return of();\r\n    }\r\n\r\n    const existingIframe = this.getOrCreateIframe(configuration);\r\n\r\n    // https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget-addEventListener\r\n    // If multiple identical EventListeners are registered on the same EventTarget with the same parameters the duplicate instances are discarded. They do not cause the EventListener to be called twice and since they are discarded they do not need to be removed with the removeEventListener method.\r\n    // this is done even if iframe exists for HMR to work, since iframe exists on service init\r\n    this.bindMessageEventToIframe(configuration);\r\n    const checkSessionIframe = authWellKnownEndPoints.checkSessionIframe;\r\n\r\n    if (checkSessionIframe) {\r\n      existingIframe.contentWindow.location.replace(checkSessionIframe);\r\n    } else {\r\n      this.loggerService.logWarning(\r\n        configuration,\r\n        'CheckSession - init check session: checkSessionIframe is not configured to run'\r\n      );\r\n    }\r\n\r\n    return new Observable((observer) => {\r\n      existingIframe.onload = (): void => {\r\n        this.lastIFrameRefresh = Date.now();\r\n        observer.next();\r\n        observer.complete();\r\n      };\r\n    });\r\n  }\r\n\r\n  private pollServerSession(\r\n    clientId: string,\r\n    configuration: OpenIdConfiguration\r\n  ): void {\r\n    this.outstandingMessages = 0;\r\n\r\n    const pollServerSessionRecur = (): void => {\r\n      this.init(configuration)\r\n        .pipe(take(1))\r\n        .subscribe(() => {\r\n          const existingIframe = this.getExistingIframe();\r\n\r\n          if (existingIframe && clientId) {\r\n            this.loggerService.logDebug(\r\n              configuration,\r\n              `CheckSession - clientId : '${clientId}' - existingIframe: '${existingIframe}'`\r\n            );\r\n            const sessionState = this.storagePersistenceService.read(\r\n              'session_state',\r\n              configuration\r\n            );\r\n            const authWellKnownEndPoints = this.storagePersistenceService.read(\r\n              'authWellKnownEndPoints',\r\n              configuration\r\n            );\r\n\r\n            if (sessionState && authWellKnownEndPoints?.checkSessionIframe) {\r\n              const iframeOrigin = new URL(\r\n                authWellKnownEndPoints.checkSessionIframe\r\n              )?.origin;\r\n\r\n              this.outstandingMessages++;\r\n              existingIframe.contentWindow.postMessage(\r\n                clientId + ' ' + sessionState,\r\n                iframeOrigin\r\n              );\r\n            } else {\r\n              this.loggerService.logDebug(\r\n                configuration,\r\n                `CheckSession - session_state is '${sessionState}' - AuthWellKnownEndPoints is '${JSON.stringify(\r\n                  authWellKnownEndPoints,\r\n                  null,\r\n                  2\r\n                )}'`\r\n              );\r\n              this.checkSessionChangedInternal$.next(true);\r\n            }\r\n          } else {\r\n            this.loggerService.logWarning(\r\n              configuration,\r\n              `CheckSession - OidcSecurityCheckSession pollServerSession checkSession IFrame does not exist:\r\n               clientId : '${clientId}' - existingIframe: '${existingIframe}'`\r\n            );\r\n          }\r\n\r\n          // after sending three messages with no response, fail.\r\n          if (this.outstandingMessages > 3) {\r\n            this.loggerService.logError(\r\n              configuration,\r\n              `CheckSession - OidcSecurityCheckSession not receiving check session response messages.\r\n                            Outstanding messages: '${this.outstandingMessages}'. Server unreachable?`\r\n            );\r\n          }\r\n\r\n          this.zone.runOutsideAngular(() => {\r\n            this.scheduledHeartBeatRunning = setTimeout(\r\n              () => this.zone.run(pollServerSessionRecur),\r\n              this.heartBeatInterval\r\n            );\r\n          });\r\n        });\r\n    };\r\n\r\n    pollServerSessionRecur();\r\n  }\r\n\r\n  private clearScheduledHeartBeat(): void {\r\n    clearTimeout(this.scheduledHeartBeatRunning);\r\n    this.scheduledHeartBeatRunning = null;\r\n  }\r\n\r\n  private messageHandler(configuration: OpenIdConfiguration, e: any): void {\r\n    const existingIFrame = this.getExistingIframe();\r\n    const authWellKnownEndPoints = this.storagePersistenceService.read(\r\n      'authWellKnownEndPoints',\r\n      configuration\r\n    );\r\n    const startsWith = !!authWellKnownEndPoints?.checkSessionIframe?.startsWith(\r\n      e.origin\r\n    );\r\n\r\n    this.outstandingMessages = 0;\r\n\r\n    if (\r\n      existingIFrame &&\r\n      startsWith &&\r\n      e.source === existingIFrame.contentWindow\r\n    ) {\r\n      if (e.data === 'error') {\r\n        this.loggerService.logWarning(\r\n          configuration,\r\n          'CheckSession - error from check session messageHandler'\r\n        );\r\n      } else if (e.data === 'changed') {\r\n        this.loggerService.logDebug(\r\n          configuration,\r\n          `CheckSession - ${e} from check session messageHandler`\r\n        );\r\n        this.checkSessionReceived = true;\r\n        this.eventService.fireEvent(EventTypes.CheckSessionReceived, e.data);\r\n        this.checkSessionChangedInternal$.next(true);\r\n      } else {\r\n        this.eventService.fireEvent(EventTypes.CheckSessionReceived, e.data);\r\n        this.loggerService.logDebug(\r\n          configuration,\r\n          `CheckSession - ${e.data} from check session messageHandler`\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private bindMessageEventToIframe(configuration: OpenIdConfiguration): void {\r\n    this.iframeMessageEventListener = this.messageHandler.bind(\r\n      this,\r\n      configuration\r\n    );\r\n    this.document.defaultView.addEventListener(\r\n      'message',\r\n      this.iframeMessageEventListener,\r\n      false\r\n    );\r\n  }\r\n\r\n  private getOrCreateIframe(\r\n    configuration: OpenIdConfiguration\r\n  ): HTMLIFrameElement {\r\n    return (\r\n      this.getExistingIframe() ||\r\n      this.iFrameService.addIFrameToWindowBody(\r\n        IFRAME_FOR_CHECK_SESSION_IDENTIFIER,\r\n        configuration\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable } from '@angular/core';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CurrentUrlService {\r\n  constructor(@Inject(DOCUMENT) private readonly document: Document) {}\r\n\r\n  getStateParamFromCurrentUrl(url?: string): string {\r\n    const currentUrl = url || this.getCurrentUrl();\r\n    const parsedUrl = new URL(currentUrl);\r\n    const urlParams = new URLSearchParams(parsedUrl.search);\r\n\r\n    return urlParams.get('state');\r\n  }\r\n\r\n  getCurrentUrl(): string {\r\n    return this.document.defaultView.location.toString();\r\n  }\r\n}\r\n","export enum ValidationResult {\r\n  NotSet = 'NotSet',\r\n  StatesDoNotMatch = 'StatesDoNotMatch',\r\n  SignatureFailed = 'SignatureFailed',\r\n  IncorrectNonce = 'IncorrectNonce',\r\n  RequiredPropertyMissing = 'RequiredPropertyMissing',\r\n  MaxOffsetExpired = 'MaxOffsetExpired',\r\n  IssDoesNotMatchIssuer = 'IssDoesNotMatchIssuer',\r\n  NoAuthWellKnownEndPoints = 'NoAuthWellKnownEndPoints',\r\n  IncorrectAud = 'IncorrectAud',\r\n  IncorrectIdTokenClaimsAfterRefresh = 'IncorrectIdTokenClaimsAfterRefresh',\r\n  IncorrectAzp = 'IncorrectAzp',\r\n  TokenExpired = 'TokenExpired',\r\n  IncorrectAtHash = 'IncorrectAtHash',\r\n  Ok = 'Ok',\r\n  LoginRequired = 'LoginRequired',\r\n  SecureTokenServerError = 'SecureTokenServerError',\r\n}\r\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport class UriEncoder implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\n","import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable } from '@angular/core';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CryptoService {\r\n  constructor(@Inject(DOCUMENT) private readonly doc: Document) {}\r\n\r\n  getCrypto(): any {\r\n    // support for IE,  (window.crypto || window.msCrypto)\r\n    return (\r\n      this.doc.defaultView.crypto || (this.doc.defaultView as any).msCrypto\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { CryptoService } from '../../utils/crypto/crypto.service';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class RandomService {\r\n  constructor(\r\n    private readonly cryptoService: CryptoService,\r\n    private readonly loggerService: LoggerService\r\n  ) {}\r\n\r\n  createRandom(\r\n    requiredLength: number,\r\n    configuration: OpenIdConfiguration\r\n  ): string {\r\n    if (requiredLength <= 0) {\r\n      return '';\r\n    }\r\n\r\n    if (requiredLength > 0 && requiredLength < 7) {\r\n      this.loggerService.logWarning(\r\n        configuration,\r\n        `RandomService called with ${requiredLength} but 7 chars is the minimum, returning 10 chars`\r\n      );\r\n      requiredLength = 10;\r\n    }\r\n\r\n    const length = requiredLength - 6;\r\n    const arr = new Uint8Array(Math.floor(length / 2));\r\n    const crypto = this.cryptoService.getCrypto();\r\n\r\n    if (crypto) {\r\n      crypto.getRandomValues(arr);\r\n    }\r\n\r\n    return Array.from(arr, this.toHex).join('') + this.randomString(7);\r\n  }\r\n\r\n  private toHex(dec): string {\r\n    return ('0' + dec.toString(16)).substr(-2);\r\n  }\r\n\r\n  private randomString(length: number): string {\r\n    let result = '';\r\n    const characters =\r\n      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n    const values = new Uint32Array(length);\r\n    const crypto = this.cryptoService.getCrypto();\r\n\r\n    if (crypto) {\r\n      crypto.getRandomValues(values);\r\n      for (let i = 0; i < length; i++) {\r\n        result += characters[values[i] % characters.length];\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\r\nimport { SilentRenewRunning } from './flows.models';\r\nimport { RandomService } from './random/random.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FlowsDataService {\r\n  constructor(\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly randomService: RandomService,\r\n    private readonly loggerService: LoggerService\r\n  ) {}\r\n\r\n  createNonce(configuration: OpenIdConfiguration): string {\r\n    const nonce = this.randomService.createRandom(40, configuration);\r\n\r\n    this.loggerService.logDebug(configuration, 'Nonce created. nonce:' + nonce);\r\n    this.setNonce(nonce, configuration);\r\n\r\n    return nonce;\r\n  }\r\n\r\n  setNonce(nonce: string, configuration: OpenIdConfiguration): void {\r\n    this.storagePersistenceService.write('authNonce', nonce, configuration);\r\n  }\r\n\r\n  getAuthStateControl(configuration: OpenIdConfiguration): any {\r\n    return this.storagePersistenceService.read(\r\n      'authStateControl',\r\n      configuration\r\n    );\r\n  }\r\n\r\n  setAuthStateControl(\r\n    authStateControl: string,\r\n    configuration: OpenIdConfiguration\r\n  ): boolean {\r\n    return this.storagePersistenceService.write(\r\n      'authStateControl',\r\n      authStateControl,\r\n      configuration\r\n    );\r\n  }\r\n\r\n  getExistingOrCreateAuthStateControl(configuration: OpenIdConfiguration): any {\r\n    let state = this.storagePersistenceService.read(\r\n      'authStateControl',\r\n      configuration\r\n    );\r\n\r\n    if (!state) {\r\n      state = this.randomService.createRandom(40, configuration);\r\n      this.storagePersistenceService.write(\r\n        'authStateControl',\r\n        state,\r\n        configuration\r\n      );\r\n    }\r\n\r\n    return state;\r\n  }\r\n\r\n  setSessionState(sessionState: any, configuration: OpenIdConfiguration): void {\r\n    this.storagePersistenceService.write(\r\n      'session_state',\r\n      sessionState,\r\n      configuration\r\n    );\r\n  }\r\n\r\n  resetStorageFlowData(configuration: OpenIdConfiguration): void {\r\n    this.storagePersistenceService.resetStorageFlowData(configuration);\r\n  }\r\n\r\n  getCodeVerifier(configuration: OpenIdConfiguration): any {\r\n    return this.storagePersistenceService.read('codeVerifier', configuration);\r\n  }\r\n\r\n  createCodeVerifier(configuration: OpenIdConfiguration): string {\r\n    const codeVerifier = this.randomService.createRandom(67, configuration);\r\n\r\n    this.storagePersistenceService.write(\r\n      'codeVerifier',\r\n      codeVerifier,\r\n      configuration\r\n    );\r\n\r\n    return codeVerifier;\r\n  }\r\n\r\n  isCodeFlowInProgress(configuration: OpenIdConfiguration): boolean {\r\n    return !!this.storagePersistenceService.read(\r\n      'storageCodeFlowInProgress',\r\n      configuration\r\n    );\r\n  }\r\n\r\n  setCodeFlowInProgress(configuration: OpenIdConfiguration): void {\r\n    this.storagePersistenceService.write(\r\n      'storageCodeFlowInProgress',\r\n      true,\r\n      configuration\r\n    );\r\n  }\r\n\r\n  resetCodeFlowInProgress(configuration: OpenIdConfiguration): void {\r\n    this.storagePersistenceService.write(\r\n      'storageCodeFlowInProgress',\r\n      false,\r\n      configuration\r\n    );\r\n  }\r\n\r\n  isSilentRenewRunning(configuration: OpenIdConfiguration): boolean {\r\n    const { configId, silentRenewTimeoutInSeconds } = configuration;\r\n    const storageObject = this.getSilentRenewRunningStorageEntry(configuration);\r\n\r\n    if (!storageObject) {\r\n      return false;\r\n    }\r\n\r\n    const timeOutInMilliseconds = silentRenewTimeoutInSeconds * 1000;\r\n    const dateOfLaunchedProcessUtc = Date.parse(\r\n      storageObject.dateOfLaunchedProcessUtc\r\n    );\r\n    const currentDateUtc = Date.parse(new Date().toISOString());\r\n    const elapsedTimeInMilliseconds = Math.abs(\r\n      currentDateUtc - dateOfLaunchedProcessUtc\r\n    );\r\n    const isProbablyStuck = elapsedTimeInMilliseconds > timeOutInMilliseconds;\r\n\r\n    if (isProbablyStuck) {\r\n      this.loggerService.logDebug(\r\n        configuration,\r\n        'silent renew process is probably stuck, state will be reset.',\r\n        configId\r\n      );\r\n      this.resetSilentRenewRunning(configuration);\r\n\r\n      return false;\r\n    }\r\n\r\n    return storageObject.state === 'running';\r\n  }\r\n\r\n  setSilentRenewRunning(configuration: OpenIdConfiguration): void {\r\n    const storageObject: SilentRenewRunning = {\r\n      state: 'running',\r\n      dateOfLaunchedProcessUtc: new Date().toISOString(),\r\n    };\r\n\r\n    this.storagePersistenceService.write(\r\n      'storageSilentRenewRunning',\r\n      JSON.stringify(storageObject),\r\n      configuration\r\n    );\r\n  }\r\n\r\n  resetSilentRenewRunning(configuration: OpenIdConfiguration): void {\r\n    this.storagePersistenceService.write(\r\n      'storageSilentRenewRunning',\r\n      '',\r\n      configuration\r\n    );\r\n  }\r\n\r\n  private getSilentRenewRunningStorageEntry(\r\n    configuration: OpenIdConfiguration\r\n  ): SilentRenewRunning {\r\n    const storageEntry = this.storagePersistenceService.read(\r\n      'storageSilentRenewRunning',\r\n      configuration\r\n    );\r\n\r\n    if (!storageEntry) {\r\n      return null;\r\n    }\r\n\r\n    return JSON.parse(storageEntry);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FlowHelper {\r\n  isCurrentFlowCodeFlow(configuration: OpenIdConfiguration): boolean {\r\n    return this.currentFlowIs('code', configuration);\r\n  }\r\n\r\n  isCurrentFlowAnyImplicitFlow(configuration: OpenIdConfiguration): boolean {\r\n    return (\r\n      this.isCurrentFlowImplicitFlowWithAccessToken(configuration) ||\r\n      this.isCurrentFlowImplicitFlowWithoutAccessToken(configuration)\r\n    );\r\n  }\r\n\r\n  isCurrentFlowCodeFlowWithRefreshTokens(\r\n    configuration: OpenIdConfiguration\r\n  ): boolean {\r\n    const { useRefreshToken } = configuration;\r\n\r\n    return this.isCurrentFlowCodeFlow(configuration) && useRefreshToken;\r\n  }\r\n\r\n  isCurrentFlowImplicitFlowWithAccessToken(\r\n    configuration: OpenIdConfiguration\r\n  ): boolean {\r\n    return this.currentFlowIs('id_token token', configuration);\r\n  }\r\n\r\n  currentFlowIs(\r\n    flowTypes: string[] | string,\r\n    configuration: OpenIdConfiguration\r\n  ): boolean {\r\n    const { responseType } = configuration;\r\n\r\n    if (Array.isArray(flowTypes)) {\r\n      return flowTypes.some((x) => responseType === x);\r\n    }\r\n\r\n    return responseType === flowTypes;\r\n  }\r\n\r\n  private isCurrentFlowImplicitFlowWithoutAccessToken(\r\n    configuration: OpenIdConfiguration\r\n  ): boolean {\r\n    return this.currentFlowIs('id_token', configuration);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { from, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { CryptoService } from '../utils/crypto/crypto.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class JwtWindowCryptoService {\r\n  constructor(private readonly cryptoService: CryptoService) {}\r\n\r\n  generateCodeChallenge(codeVerifier: string): Observable<string> {\r\n    return this.calcHash(codeVerifier).pipe(\r\n      map((challengeRaw: string) => this.base64UrlEncode(challengeRaw))\r\n    );\r\n  }\r\n\r\n  generateAtHash(accessToken: string, algorithm: string): Observable<string> {\r\n    return this.calcHash(accessToken, algorithm).pipe(\r\n      map((tokenHash) => {\r\n        const substr: string = tokenHash.substr(0, tokenHash.length / 2);\r\n        const tokenHashBase64: string = btoa(substr);\r\n\r\n        return tokenHashBase64\r\n          .replace(/\\+/g, '-')\r\n          .replace(/\\//g, '_')\r\n          .replace(/=/g, '');\r\n      })\r\n    );\r\n  }\r\n\r\n  private calcHash(\r\n    valueToHash: string,\r\n    algorithm = 'SHA-256'\r\n  ): Observable<string> {\r\n    const msgBuffer: Uint8Array = new TextEncoder().encode(valueToHash);\r\n\r\n    return from(\r\n      this.cryptoService.getCrypto().subtle.digest(algorithm, msgBuffer)\r\n    ).pipe(\r\n      map((hashBuffer: ArrayBuffer) => {\r\n        const hashArray: number[] = Array.from(new Uint8Array(hashBuffer));\r\n\r\n        return this.toHashString(hashArray);\r\n      })\r\n    );\r\n  }\r\n\r\n  private toHashString(byteArray: number[]): string {\r\n    let result = '';\r\n\r\n    for (const e of byteArray) {\r\n      result += String.fromCharCode(e);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  private base64UrlEncode(str): string {\r\n    const base64: string = btoa(str);\r\n\r\n    return base64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\r\n  }\r\n}\r\n","import { HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { AuthOptions } from '../../auth-options';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { FlowsDataService } from '../../flows/flows-data.service';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { StoragePersistenceService } from '../../storage/storage-persistence.service';\r\nimport { JwtWindowCryptoService } from '../../validation/jwt-window-crypto.service';\r\nimport { FlowHelper } from '../flowHelper/flow-helper.service';\r\nimport { UriEncoder } from './uri-encoder';\r\n\r\nconst CALLBACK_PARAMS_TO_CHECK = ['code', 'state', 'token', 'id_token'];\r\nconst AUTH0_ENDPOINT = 'auth0.com';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UrlService {\r\n  constructor(\r\n    private readonly loggerService: LoggerService,\r\n    private readonly flowsDataService: FlowsDataService,\r\n    private readonly flowHelper: FlowHelper,\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly jwtWindowCryptoService: JwtWindowCryptoService\r\n  ) {}\r\n\r\n  getUrlParameter(urlToCheck: string, name: string): string {\r\n    if (!urlToCheck) {\r\n      return '';\r\n    }\r\n\r\n    if (!name) {\r\n      return '';\r\n    }\r\n\r\n    name = name.replace(/[[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\r\n    const regex = new RegExp('[\\\\?&#]' + name + '=([^&#]*)');\r\n    const results = regex.exec(urlToCheck);\r\n\r\n    return results === null ? '' : decodeURIComponent(results[1]);\r\n  }\r\n\r\n  isCallbackFromSts(currentUrl: string): boolean {\r\n    return CALLBACK_PARAMS_TO_CHECK.some(\r\n      (x) => !!this.getUrlParameter(currentUrl, x)\r\n    );\r\n  }\r\n\r\n  getRefreshSessionSilentRenewUrl(\r\n    config: OpenIdConfiguration,\r\n    customParams?: { [key: string]: string | number | boolean }\r\n  ): Observable<string> {\r\n    if (this.flowHelper.isCurrentFlowCodeFlow(config)) {\r\n      return this.createUrlCodeFlowWithSilentRenew(config, customParams);\r\n    }\r\n\r\n    return of(\r\n      this.createUrlImplicitFlowWithSilentRenew(config, customParams) || ''\r\n    );\r\n  }\r\n\r\n  getAuthorizeParUrl(\r\n    requestUri: string,\r\n    configuration: OpenIdConfiguration\r\n  ): string {\r\n    const authWellKnownEndPoints = this.storagePersistenceService.read(\r\n      'authWellKnownEndPoints',\r\n      configuration\r\n    );\r\n\r\n    if (!authWellKnownEndPoints) {\r\n      this.loggerService.logError(\r\n        configuration,\r\n        'authWellKnownEndpoints is undefined'\r\n      );\r\n\r\n      return null;\r\n    }\r\n\r\n    const authorizationEndpoint = authWellKnownEndPoints.authorizationEndpoint;\r\n\r\n    if (!authorizationEndpoint) {\r\n      this.loggerService.logError(\r\n        configuration,\r\n        `Can not create an authorize URL when authorizationEndpoint is '${authorizationEndpoint}'`\r\n      );\r\n\r\n      return null;\r\n    }\r\n\r\n    const { clientId } = configuration;\r\n\r\n    if (!clientId) {\r\n      this.loggerService.logError(\r\n        configuration,\r\n        `getAuthorizeParUrl could not add clientId because it was: `,\r\n        clientId\r\n      );\r\n\r\n      return null;\r\n    }\r\n\r\n    const urlParts = authorizationEndpoint.split('?');\r\n    const authorizationUrl = urlParts[0];\r\n    const existingParams = urlParts[1];\r\n    let params = this.createHttpParams(existingParams);\r\n\r\n    params = params.set('request_uri', requestUri);\r\n    params = params.append('client_id', clientId);\r\n\r\n    return `${authorizationUrl}?${params}`;\r\n  }\r\n\r\n  getAuthorizeUrl(\r\n    config: OpenIdConfiguration,\r\n    authOptions?: AuthOptions\r\n  ): Observable<string> {\r\n    if (this.flowHelper.isCurrentFlowCodeFlow(config)) {\r\n      return this.createUrlCodeFlowAuthorize(config, authOptions);\r\n    }\r\n\r\n    return of(this.createUrlImplicitFlowAuthorize(config, authOptions) || '');\r\n  }\r\n\r\n  getEndSessionEndpoint(configuration: OpenIdConfiguration): {\r\n    url: string;\r\n    existingParams: string;\r\n  } {\r\n    const authWellKnownEndPoints = this.storagePersistenceService.read(\r\n      'authWellKnownEndPoints',\r\n      configuration\r\n    );\r\n    const endSessionEndpoint = authWellKnownEndPoints?.endSessionEndpoint;\r\n\r\n    if (!endSessionEndpoint) {\r\n      return {\r\n        url: '',\r\n        existingParams: '',\r\n      };\r\n    }\r\n\r\n    const urlParts = endSessionEndpoint.split('?');\r\n    const url = urlParts[0];\r\n    const existingParams = urlParts[1] ?? '';\r\n\r\n    return {\r\n      url,\r\n      existingParams,\r\n    };\r\n  }\r\n\r\n  getEndSessionUrl(\r\n    configuration: OpenIdConfiguration,\r\n    customParams?: { [p: string]: string | number | boolean }\r\n  ): string | null {\r\n    const idToken = this.storagePersistenceService.getIdToken(configuration);\r\n    const { customParamsEndSessionRequest } = configuration;\r\n    const mergedParams = { ...customParamsEndSessionRequest, ...customParams };\r\n\r\n    return this.createEndSessionUrl(idToken, configuration, mergedParams);\r\n  }\r\n\r\n  createRevocationEndpointBodyAccessToken(\r\n    token: any,\r\n    configuration: OpenIdConfiguration\r\n  ): string {\r\n    const clientId = this.getClientId(configuration);\r\n\r\n    if (!clientId) {\r\n      return null;\r\n    }\r\n\r\n    let params = this.createHttpParams();\r\n\r\n    params = params.set('client_id', clientId);\r\n    params = params.set('token', token);\r\n    params = params.set('token_type_hint', 'access_token');\r\n\r\n    return params.toString();\r\n  }\r\n\r\n  createRevocationEndpointBodyRefreshToken(\r\n    token: any,\r\n    configuration: OpenIdConfiguration\r\n  ): string {\r\n    const clientId = this.getClientId(configuration);\r\n\r\n    if (!clientId) {\r\n      return null;\r\n    }\r\n\r\n    let params = this.createHttpParams();\r\n\r\n    params = params.set('client_id', clientId);\r\n    params = params.set('token', token);\r\n    params = params.set('token_type_hint', 'refresh_token');\r\n\r\n    return params.toString();\r\n  }\r\n\r\n  getRevocationEndpointUrl(configuration: OpenIdConfiguration): string {\r\n    const authWellKnownEndPoints = this.storagePersistenceService.read(\r\n      'authWellKnownEndPoints',\r\n      configuration\r\n    );\r\n    const revocationEndpoint = authWellKnownEndPoints?.revocationEndpoint;\r\n\r\n    if (!revocationEndpoint) {\r\n      return null;\r\n    }\r\n\r\n    const urlParts = revocationEndpoint.split('?');\r\n\r\n    return urlParts[0];\r\n  }\r\n\r\n  createBodyForCodeFlowCodeRequest(\r\n    code: string,\r\n    configuration: OpenIdConfiguration,\r\n    customTokenParams?: { [p: string]: string | number | boolean }\r\n  ): string {\r\n    const clientId = this.getClientId(configuration);\r\n\r\n    if (!clientId) {\r\n      return null;\r\n    }\r\n\r\n    let params = this.createHttpParams();\r\n\r\n    params = params.set('grant_type', 'authorization_code');\r\n    params = params.set('client_id', clientId);\r\n\r\n    if (!configuration.disablePkce) {\r\n      const codeVerifier = this.flowsDataService.getCodeVerifier(configuration);\r\n\r\n      if (!codeVerifier) {\r\n        this.loggerService.logError(\r\n          configuration,\r\n          `CodeVerifier is not set `,\r\n          codeVerifier\r\n        );\r\n\r\n        return null;\r\n      }\r\n\r\n      params = params.set('code_verifier', codeVerifier);\r\n    }\r\n\r\n    params = params.set('code', code);\r\n\r\n    if (customTokenParams) {\r\n      params = this.appendCustomParams({ ...customTokenParams }, params);\r\n    }\r\n\r\n    const silentRenewUrl = this.getSilentRenewUrl(configuration);\r\n\r\n    if (\r\n      this.flowsDataService.isSilentRenewRunning(configuration) &&\r\n      silentRenewUrl\r\n    ) {\r\n      params = params.set('redirect_uri', silentRenewUrl);\r\n\r\n      return params.toString();\r\n    }\r\n\r\n    const redirectUrl = this.getRedirectUrl(configuration);\r\n\r\n    if (!redirectUrl) {\r\n      return null;\r\n    }\r\n\r\n    params = params.set('redirect_uri', redirectUrl);\r\n\r\n    return params.toString();\r\n  }\r\n\r\n  createBodyForCodeFlowRefreshTokensRequest(\r\n    refreshToken: string,\r\n    configuration: OpenIdConfiguration,\r\n    customParamsRefresh?: { [key: string]: string | number | boolean }\r\n  ): string {\r\n    const clientId = this.getClientId(configuration);\r\n\r\n    if (!clientId) {\r\n      return null;\r\n    }\r\n\r\n    let params = this.createHttpParams();\r\n\r\n    params = params.set('grant_type', 'refresh_token');\r\n    params = params.set('client_id', clientId);\r\n    params = params.set('refresh_token', refreshToken);\r\n\r\n    if (customParamsRefresh) {\r\n      params = this.appendCustomParams({ ...customParamsRefresh }, params);\r\n    }\r\n\r\n    return params.toString();\r\n  }\r\n\r\n  createBodyForParCodeFlowRequest(\r\n    configuration: OpenIdConfiguration,\r\n    authOptions?: AuthOptions\r\n  ): Observable<string> {\r\n    const redirectUrl = this.getRedirectUrl(configuration, authOptions);\r\n\r\n    if (!redirectUrl) {\r\n      return of(null);\r\n    }\r\n\r\n    const state =\r\n      this.flowsDataService.getExistingOrCreateAuthStateControl(configuration);\r\n    const nonce = this.flowsDataService.createNonce(configuration);\r\n\r\n    this.loggerService.logDebug(\r\n      configuration,\r\n      'Authorize created. adding myautostate: ' + state\r\n    );\r\n\r\n    // code_challenge with \"S256\"\r\n    const codeVerifier =\r\n      this.flowsDataService.createCodeVerifier(configuration);\r\n\r\n    return this.jwtWindowCryptoService.generateCodeChallenge(codeVerifier).pipe(\r\n      map((codeChallenge: string) => {\r\n        const {\r\n          clientId,\r\n          responseType,\r\n          scope,\r\n          hdParam,\r\n          customParamsAuthRequest,\r\n        } = configuration;\r\n        let params = this.createHttpParams('');\r\n\r\n        params = params.set('client_id', clientId);\r\n        params = params.append('redirect_uri', redirectUrl);\r\n        params = params.append('response_type', responseType);\r\n        params = params.append('scope', scope);\r\n        params = params.append('nonce', nonce);\r\n        params = params.append('state', state);\r\n        params = params.append('code_challenge', codeChallenge);\r\n        params = params.append('code_challenge_method', 'S256');\r\n\r\n        if (hdParam) {\r\n          params = params.append('hd', hdParam);\r\n        }\r\n\r\n        if (customParamsAuthRequest) {\r\n          params = this.appendCustomParams(\r\n            { ...customParamsAuthRequest },\r\n            params\r\n          );\r\n        }\r\n\r\n        if (authOptions?.customParams) {\r\n          params = this.appendCustomParams(\r\n            { ...authOptions.customParams },\r\n            params\r\n          );\r\n        }\r\n\r\n        return params.toString();\r\n      })\r\n    );\r\n  }\r\n\r\n  getPostLogoutRedirectUrl(configuration: OpenIdConfiguration): string {\r\n    const { postLogoutRedirectUri } = configuration;\r\n\r\n    if (!postLogoutRedirectUri) {\r\n      this.loggerService.logError(\r\n        configuration,\r\n        `could not get postLogoutRedirectUri, was: `,\r\n        postLogoutRedirectUri\r\n      );\r\n\r\n      return null;\r\n    }\r\n\r\n    return postLogoutRedirectUri;\r\n  }\r\n\r\n  private createEndSessionUrl(\r\n    idTokenHint: string,\r\n    configuration: OpenIdConfiguration,\r\n    customParamsEndSession?: { [p: string]: string | number | boolean }\r\n  ): string | null {\r\n    // Auth0 needs a special logout url\r\n    // See https://auth0.com/docs/api/authentication#logout\r\n\r\n    if (this.isAuth0Endpoint(configuration)) {\r\n      return this.composeAuth0Endpoint(configuration);\r\n    }\r\n\r\n    const { url, existingParams } = this.getEndSessionEndpoint(configuration);\r\n\r\n    if (!url) {\r\n      return null;\r\n    }\r\n\r\n    let params = this.createHttpParams(existingParams);\r\n\r\n    if (!!idTokenHint) {\r\n      params = params.set('id_token_hint', idTokenHint);\r\n    }\r\n\r\n    const postLogoutRedirectUri = this.getPostLogoutRedirectUrl(configuration);\r\n\r\n    if (postLogoutRedirectUri) {\r\n      params = params.append('post_logout_redirect_uri', postLogoutRedirectUri);\r\n    }\r\n\r\n    if (customParamsEndSession) {\r\n      params = this.appendCustomParams({ ...customParamsEndSession }, params);\r\n    }\r\n\r\n    return `${url}?${params}`;\r\n  }\r\n\r\n  private createAuthorizeUrl(\r\n    codeChallenge: string,\r\n    redirectUrl: string,\r\n    nonce: string,\r\n    state: string,\r\n    configuration: OpenIdConfiguration,\r\n    prompt?: string,\r\n    customRequestParams?: { [key: string]: string | number | boolean }\r\n  ): string {\r\n    const authWellKnownEndPoints = this.storagePersistenceService.read(\r\n      'authWellKnownEndPoints',\r\n      configuration\r\n    );\r\n    const authorizationEndpoint = authWellKnownEndPoints?.authorizationEndpoint;\r\n\r\n    if (!authorizationEndpoint) {\r\n      this.loggerService.logError(\r\n        configuration,\r\n        `Can not create an authorize URL when authorizationEndpoint is '${authorizationEndpoint}'`\r\n      );\r\n\r\n      return null;\r\n    }\r\n\r\n    const { clientId, responseType, scope, hdParam, customParamsAuthRequest } =\r\n      configuration;\r\n\r\n    if (!clientId) {\r\n      this.loggerService.logError(\r\n        configuration,\r\n        `createAuthorizeUrl could not add clientId because it was: `,\r\n        clientId\r\n      );\r\n\r\n      return null;\r\n    }\r\n\r\n    if (!responseType) {\r\n      this.loggerService.logError(\r\n        configuration,\r\n        `createAuthorizeUrl could not add responseType because it was: `,\r\n        responseType\r\n      );\r\n\r\n      return null;\r\n    }\r\n\r\n    if (!scope) {\r\n      this.loggerService.logError(\r\n        configuration,\r\n        `createAuthorizeUrl could not add scope because it was: `,\r\n        scope\r\n      );\r\n\r\n      return null;\r\n    }\r\n\r\n    const urlParts = authorizationEndpoint.split('?');\r\n    const authorizationUrl = urlParts[0];\r\n    const existingParams = urlParts[1];\r\n    let params = this.createHttpParams(existingParams);\r\n\r\n    params = params.set('client_id', clientId);\r\n    params = params.append('redirect_uri', redirectUrl);\r\n    params = params.append('response_type', responseType);\r\n    params = params.append('scope', scope);\r\n    params = params.append('nonce', nonce);\r\n    params = params.append('state', state);\r\n\r\n    if (\r\n      this.flowHelper.isCurrentFlowCodeFlow(configuration) &&\r\n      codeChallenge !== null\r\n    ) {\r\n      params = params.append('code_challenge', codeChallenge);\r\n      params = params.append('code_challenge_method', 'S256');\r\n    }\r\n\r\n    const mergedParams = { ...customParamsAuthRequest, ...customRequestParams };\r\n\r\n    if (Object.keys(mergedParams).length > 0) {\r\n      params = this.appendCustomParams({ ...mergedParams }, params);\r\n    }\r\n\r\n    if (prompt) {\r\n      params = this.overWriteParam(params, 'prompt', prompt);\r\n    }\r\n\r\n    if (hdParam) {\r\n      params = params.append('hd', hdParam);\r\n    }\r\n\r\n    return `${authorizationUrl}?${params}`;\r\n  }\r\n\r\n  private createUrlImplicitFlowWithSilentRenew(\r\n    configuration: OpenIdConfiguration,\r\n    customParams?: { [key: string]: string | number | boolean }\r\n  ): string {\r\n    const state =\r\n      this.flowsDataService.getExistingOrCreateAuthStateControl(configuration);\r\n    const nonce = this.flowsDataService.createNonce(configuration);\r\n    const silentRenewUrl = this.getSilentRenewUrl(configuration);\r\n\r\n    if (!silentRenewUrl) {\r\n      return null;\r\n    }\r\n\r\n    this.loggerService.logDebug(\r\n      configuration,\r\n      'RefreshSession created. adding myautostate: ',\r\n      state\r\n    );\r\n\r\n    const authWellKnownEndPoints = this.storagePersistenceService.read(\r\n      'authWellKnownEndPoints',\r\n      configuration\r\n    );\r\n\r\n    if (authWellKnownEndPoints) {\r\n      return this.createAuthorizeUrl(\r\n        '',\r\n        silentRenewUrl,\r\n        nonce,\r\n        state,\r\n        configuration,\r\n        'none',\r\n        customParams\r\n      );\r\n    }\r\n\r\n    this.loggerService.logError(\r\n      configuration,\r\n      'authWellKnownEndpoints is undefined'\r\n    );\r\n\r\n    return null;\r\n  }\r\n\r\n  private createUrlCodeFlowWithSilentRenew(\r\n    configuration: OpenIdConfiguration,\r\n    customParams?: { [key: string]: string | number | boolean }\r\n  ): Observable<string> {\r\n    const state =\r\n      this.flowsDataService.getExistingOrCreateAuthStateControl(configuration);\r\n    const nonce = this.flowsDataService.createNonce(configuration);\r\n\r\n    this.loggerService.logDebug(\r\n      configuration,\r\n      'RefreshSession created. adding myautostate: ' + state\r\n    );\r\n\r\n    // code_challenge with \"S256\"\r\n    const codeVerifier =\r\n      this.flowsDataService.createCodeVerifier(configuration);\r\n\r\n    return this.jwtWindowCryptoService.generateCodeChallenge(codeVerifier).pipe(\r\n      map((codeChallenge: string) => {\r\n        const silentRenewUrl = this.getSilentRenewUrl(configuration);\r\n\r\n        if (!silentRenewUrl) {\r\n          return '';\r\n        }\r\n\r\n        const authWellKnownEndPoints = this.storagePersistenceService.read(\r\n          'authWellKnownEndPoints',\r\n          configuration\r\n        );\r\n\r\n        if (authWellKnownEndPoints) {\r\n          return this.createAuthorizeUrl(\r\n            codeChallenge,\r\n            silentRenewUrl,\r\n            nonce,\r\n            state,\r\n            configuration,\r\n            'none',\r\n            customParams\r\n          );\r\n        }\r\n\r\n        this.loggerService.logWarning(\r\n          configuration,\r\n          'authWellKnownEndpoints is undefined'\r\n        );\r\n\r\n        return null;\r\n      })\r\n    );\r\n  }\r\n\r\n  private createUrlImplicitFlowAuthorize(\r\n    configuration: OpenIdConfiguration,\r\n    authOptions?: AuthOptions\r\n  ): string {\r\n    const state =\r\n      this.flowsDataService.getExistingOrCreateAuthStateControl(configuration);\r\n    const nonce = this.flowsDataService.createNonce(configuration);\r\n\r\n    this.loggerService.logDebug(\r\n      configuration,\r\n      'Authorize created. adding myautostate: ' + state\r\n    );\r\n\r\n    const redirectUrl = this.getRedirectUrl(configuration, authOptions);\r\n\r\n    if (!redirectUrl) {\r\n      return null;\r\n    }\r\n\r\n    const authWellKnownEndPoints = this.storagePersistenceService.read(\r\n      'authWellKnownEndPoints',\r\n      configuration\r\n    );\r\n\r\n    if (authWellKnownEndPoints) {\r\n      const { customParams } = authOptions || {};\r\n\r\n      return this.createAuthorizeUrl(\r\n        '',\r\n        redirectUrl,\r\n        nonce,\r\n        state,\r\n        configuration,\r\n        null,\r\n        customParams\r\n      );\r\n    }\r\n\r\n    this.loggerService.logError(\r\n      configuration,\r\n      'authWellKnownEndpoints is undefined'\r\n    );\r\n\r\n    return null;\r\n  }\r\n\r\n  private createUrlCodeFlowAuthorize(\r\n    config: OpenIdConfiguration,\r\n    authOptions?: AuthOptions\r\n  ): Observable<string> {\r\n    const state =\r\n      this.flowsDataService.getExistingOrCreateAuthStateControl(config);\r\n    const nonce = this.flowsDataService.createNonce(config);\r\n\r\n    this.loggerService.logDebug(\r\n      config,\r\n      'Authorize created. adding myautostate: ' + state\r\n    );\r\n\r\n    const redirectUrl = this.getRedirectUrl(config, authOptions);\r\n\r\n    if (!redirectUrl) {\r\n      return of(null);\r\n    }\r\n\r\n    return this.getCodeChallenge(config).pipe(\r\n      map((codeChallenge: string) => {\r\n        const authWellKnownEndPoints = this.storagePersistenceService.read(\r\n          'authWellKnownEndPoints',\r\n          config\r\n        );\r\n\r\n        if (authWellKnownEndPoints) {\r\n          const { customParams } = authOptions || {};\r\n\r\n          return this.createAuthorizeUrl(\r\n            codeChallenge,\r\n            redirectUrl,\r\n            nonce,\r\n            state,\r\n            config,\r\n            null,\r\n            customParams\r\n          );\r\n        }\r\n\r\n        this.loggerService.logError(\r\n          config,\r\n          'authWellKnownEndpoints is undefined'\r\n        );\r\n\r\n        return '';\r\n      })\r\n    );\r\n  }\r\n\r\n  private getCodeChallenge(config: OpenIdConfiguration): Observable<string> {\r\n    if (config.disablePkce) {\r\n      return of(null);\r\n    }\r\n\r\n    // code_challenge with \"S256\"\r\n    const codeVerifier = this.flowsDataService.createCodeVerifier(config);\r\n\r\n    return this.jwtWindowCryptoService.generateCodeChallenge(codeVerifier);\r\n  }\r\n\r\n  private getRedirectUrl(\r\n    configuration: OpenIdConfiguration,\r\n    authOptions?: AuthOptions\r\n  ): string {\r\n    let { redirectUrl } = configuration;\r\n\r\n    if (authOptions?.redirectUrl) {\r\n      // override by redirectUrl from authOptions\r\n      redirectUrl = authOptions.redirectUrl;\r\n    }\r\n\r\n    if (!redirectUrl) {\r\n      this.loggerService.logError(\r\n        configuration,\r\n        `could not get redirectUrl, was: `,\r\n        redirectUrl\r\n      );\r\n\r\n      return null;\r\n    }\r\n\r\n    return redirectUrl;\r\n  }\r\n\r\n  private getSilentRenewUrl(configuration: OpenIdConfiguration): string {\r\n    const { silentRenewUrl } = configuration;\r\n\r\n    if (!silentRenewUrl) {\r\n      this.loggerService.logError(\r\n        configuration,\r\n        `could not get silentRenewUrl, was: `,\r\n        silentRenewUrl\r\n      );\r\n\r\n      return null;\r\n    }\r\n\r\n    return silentRenewUrl;\r\n  }\r\n\r\n  private getClientId(configuration: OpenIdConfiguration): string {\r\n    const { clientId } = configuration;\r\n\r\n    if (!clientId) {\r\n      this.loggerService.logError(\r\n        configuration,\r\n        `could not get clientId, was: `,\r\n        clientId\r\n      );\r\n\r\n      return null;\r\n    }\r\n\r\n    return clientId;\r\n  }\r\n\r\n  private appendCustomParams(\r\n    customParams: { [key: string]: string | number | boolean },\r\n    params: HttpParams\r\n  ): HttpParams {\r\n    for (const [key, value] of Object.entries({ ...customParams })) {\r\n      params = params.append(key, value.toString());\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  private overWriteParam(\r\n    params: HttpParams,\r\n    key: string,\r\n    value: string | number | boolean\r\n  ): HttpParams {\r\n    return params.set(key, value);\r\n  }\r\n\r\n  private createHttpParams(existingParams?: string): HttpParams {\r\n    existingParams = existingParams ?? '';\r\n\r\n    return new HttpParams({\r\n      fromString: existingParams,\r\n      encoder: new UriEncoder(),\r\n    });\r\n  }\r\n\r\n  private isAuth0Endpoint(configuration: OpenIdConfiguration): boolean {\r\n    const { authority, useCustomAuth0Domain } = configuration;\r\n\r\n    if (!authority) {\r\n      return false;\r\n    }\r\n\r\n    return authority.endsWith(AUTH0_ENDPOINT) || useCustomAuth0Domain;\r\n  }\r\n\r\n  private composeAuth0Endpoint(configuration: OpenIdConfiguration): string {\r\n    // format: https://YOUR_DOMAIN/v2/logout?client_id=YOUR_CLIENT_ID&returnTo=LOGOUT_URL\r\n    const { authority, clientId } = configuration;\r\n    const postLogoutRedirectUrl = this.getPostLogoutRedirectUrl(configuration);\r\n\r\n    return `${authority}/v2/logout?client_id=${clientId}&returnTo=${postLogoutRedirectUrl}`;\r\n  }\r\n}\r\n","export function getVerifyAlg(alg: string): RsaHashedImportParams | EcdsaParams {\r\n  switch (alg.charAt(0)) {\r\n    case 'R':\r\n      return {\r\n        name: 'RSASSA-PKCS1-v1_5',\r\n        hash: 'SHA-256',\r\n      };\r\n    case 'E':\r\n      if (alg.includes('256')) {\r\n        return {\r\n          name: 'ECDSA',\r\n          hash: 'SHA-256',\r\n        };\r\n      } else if (alg.includes('384')) {\r\n        return {\r\n          name: 'ECDSA',\r\n          hash: 'SHA-384',\r\n        };\r\n      } else {\r\n        return null;\r\n      }\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\nexport function alg2kty(alg: string): string {\r\n  switch (alg.charAt(0)) {\r\n    case 'R':\r\n      return 'RSA';\r\n\r\n    case 'E':\r\n      return 'EC';\r\n\r\n    default:\r\n      throw new Error('Cannot infer kty from alg: ' + alg);\r\n  }\r\n}\r\n\r\nexport function getImportAlg(\r\n  alg: string\r\n): RsaHashedImportParams | EcKeyImportParams {\r\n  switch (alg.charAt(0)) {\r\n    case 'R':\r\n      if (alg.includes('256')) {\r\n        return {\r\n          name: 'RSASSA-PKCS1-v1_5',\r\n          hash: 'SHA-256',\r\n        };\r\n      } else if (alg.includes('384')) {\r\n        return {\r\n          name: 'RSASSA-PKCS1-v1_5',\r\n          hash: 'SHA-384',\r\n        };\r\n      } else if (alg.includes('512')) {\r\n        return {\r\n          name: 'RSASSA-PKCS1-v1_5',\r\n          hash: 'SHA-512',\r\n        };\r\n      } else {\r\n        return null;\r\n      }\r\n    case 'E':\r\n      if (alg.includes('256')) {\r\n        return {\r\n          name: 'ECDSA',\r\n          namedCurve: 'P-256',\r\n        };\r\n      } else if (alg.includes('384')) {\r\n        return {\r\n          name: 'ECDSA',\r\n          namedCurve: 'P-384',\r\n        };\r\n      } else {\r\n        return null;\r\n      }\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n","import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { LoggerService } from '../../logging/logger.service';\r\n\r\nconst PARTS_OF_TOKEN = 3;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class TokenHelperService {\r\n  constructor(\r\n    private readonly loggerService: LoggerService,\r\n    @Inject(DOCUMENT) private readonly document: Document\r\n  ) {}\r\n\r\n  getTokenExpirationDate(dataIdToken: any): Date {\r\n    if (!Object.prototype.hasOwnProperty.call(dataIdToken, 'exp')) {\r\n      return new Date(new Date().toUTCString());\r\n    }\r\n\r\n    const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\r\n\r\n    date.setUTCSeconds(dataIdToken.exp);\r\n\r\n    return date;\r\n  }\r\n\r\n  getSigningInputFromToken(\r\n    token: any,\r\n    encoded: boolean,\r\n    configuration: OpenIdConfiguration\r\n  ): string {\r\n    if (!this.tokenIsValid(token, configuration)) {\r\n      return '';\r\n    }\r\n\r\n    const header: string = this.getHeaderFromToken(\r\n      token,\r\n      encoded,\r\n      configuration\r\n    );\r\n    const payload: string = this.getPayloadFromToken(\r\n      token,\r\n      encoded,\r\n      configuration\r\n    );\r\n\r\n    return [header, payload].join('.');\r\n  }\r\n\r\n  getHeaderFromToken(\r\n    token: any,\r\n    encoded: boolean,\r\n    configuration: OpenIdConfiguration\r\n  ): any {\r\n    if (!this.tokenIsValid(token, configuration)) {\r\n      return {};\r\n    }\r\n\r\n    return this.getPartOfToken(token, 0, encoded);\r\n  }\r\n\r\n  getPayloadFromToken(\r\n    token: any,\r\n    encoded: boolean,\r\n    configuration: OpenIdConfiguration\r\n  ): any {\r\n    if (!this.tokenIsValid(token, configuration)) {\r\n      return {};\r\n    }\r\n\r\n    return this.getPartOfToken(token, 1, encoded);\r\n  }\r\n\r\n  getSignatureFromToken(\r\n    token: any,\r\n    encoded: boolean,\r\n    configuration: OpenIdConfiguration\r\n  ): any {\r\n    if (!this.tokenIsValid(token, configuration)) {\r\n      return {};\r\n    }\r\n\r\n    return this.getPartOfToken(token, 2, encoded);\r\n  }\r\n\r\n  private getPartOfToken(token: string, index: number, encoded: boolean): any {\r\n    const partOfToken = this.extractPartOfToken(token, index);\r\n\r\n    if (encoded) {\r\n      return partOfToken;\r\n    }\r\n\r\n    const result = this.urlBase64Decode(partOfToken);\r\n\r\n    return JSON.parse(result);\r\n  }\r\n\r\n  private urlBase64Decode(str: string): string {\r\n    let output = str.replace(/-/g, '+').replace(/_/g, '/');\r\n\r\n    switch (output.length % 4) {\r\n      case 0:\r\n        break;\r\n      case 2:\r\n        output += '==';\r\n        break;\r\n      case 3:\r\n        output += '=';\r\n        break;\r\n      default:\r\n        throw Error('Illegal base64url string!');\r\n    }\r\n\r\n    const decoded =\r\n      typeof this.document.defaultView !== 'undefined'\r\n        ? this.document.defaultView.atob(output)\r\n        : Buffer.from(output, 'base64').toString('binary');\r\n\r\n    try {\r\n      // Going backwards: from byte stream, to percent-encoding, to original string.\r\n      return decodeURIComponent(\r\n        decoded\r\n          .split('')\r\n          .map(\r\n            (c: string) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)\r\n          )\r\n          .join('')\r\n      );\r\n    } catch (err) {\r\n      return decoded;\r\n    }\r\n  }\r\n\r\n  private tokenIsValid(\r\n    token: string,\r\n    configuration: OpenIdConfiguration\r\n  ): boolean {\r\n    if (!token) {\r\n      this.loggerService.logError(\r\n        configuration,\r\n        `token '${token}' is not valid --> token falsy`\r\n      );\r\n\r\n      return false;\r\n    }\r\n\r\n    if (!(token as string).includes('.')) {\r\n      this.loggerService.logError(\r\n        configuration,\r\n        `token '${token}' is not valid --> no dots included`\r\n      );\r\n\r\n      return false;\r\n    }\r\n\r\n    const parts = token.split('.');\r\n\r\n    if (parts.length !== PARTS_OF_TOKEN) {\r\n      this.loggerService.logError(\r\n        configuration,\r\n        `token '${token}' is not valid --> token has to have exactly ${\r\n          PARTS_OF_TOKEN - 1\r\n        } dots`\r\n      );\r\n\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private extractPartOfToken(token: string, index: number): string {\r\n    return token.split('.')[index];\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class JwkExtractor {\r\n  extractJwk(\r\n    keys: JsonWebKey[],\r\n    spec?: { kid?: string; use?: string; kty?: string },\r\n    throwOnEmpty = true\r\n  ): JsonWebKey[] {\r\n    if (0 === keys.length) {\r\n      throw JwkExtractorInvalidArgumentError;\r\n    }\r\n\r\n    const foundKeys = keys\r\n      .filter((k) => (spec?.kid ? k['kid'] === spec.kid : true))\r\n      .filter((k) => (spec?.use ? k['use'] === spec.use : true))\r\n      .filter((k) => (spec?.kty ? k['kty'] === spec.kty : true));\r\n\r\n    if (foundKeys.length === 0 && throwOnEmpty) {\r\n      throw JwkExtractorNoMatchingKeysError;\r\n    }\r\n\r\n    if (foundKeys.length > 1 && (null === spec || undefined === spec)) {\r\n      throw JwkExtractorSeveralMatchingKeysError;\r\n    }\r\n\r\n    return foundKeys;\r\n  }\r\n}\r\n\r\nfunction buildErrorName(name: string): string {\r\n  return JwkExtractor.name + ': ' + name;\r\n}\r\n\r\nexport const JwkExtractorInvalidArgumentError = {\r\n  name: buildErrorName('InvalidArgumentError'),\r\n  message: 'Array of keys was empty. Unable to extract',\r\n};\r\n\r\nexport const JwkExtractorNoMatchingKeysError = {\r\n  name: buildErrorName('NoMatchingKeysError'),\r\n  message: 'No key found matching the spec',\r\n};\r\n\r\nexport const JwkExtractorSeveralMatchingKeysError = {\r\n  name: buildErrorName('SeveralMatchingKeysError'),\r\n  message: 'More than one key found. Please use spec to filter',\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { CryptoService } from '../utils/crypto/crypto.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class JwkWindowCryptoService {\r\n  constructor(private readonly cryptoService: CryptoService) {}\r\n\r\n  importVerificationKey(\r\n    key: JsonWebKey,\r\n    algorithm:\r\n      | AlgorithmIdentifier\r\n      | RsaHashedImportParams\r\n      | EcKeyImportParams\r\n      | HmacImportParams\r\n      | AesKeyAlgorithm\r\n  ): Promise<CryptoKey> {\r\n    return this.cryptoService\r\n      .getCrypto()\r\n      .subtle.importKey('jwk', key, algorithm, false, ['verify']);\r\n  }\r\n\r\n  verifyKey(\r\n    verifyAlgorithm: AlgorithmIdentifier | RsaPssParams | EcdsaParams,\r\n    cryptoKey: CryptoKey,\r\n    signature: BufferSource,\r\n    signingInput: string\r\n  ): Promise<boolean> {\r\n    return this.cryptoService\r\n      .getCrypto()\r\n      .subtle.verify(\r\n        verifyAlgorithm,\r\n        cryptoKey,\r\n        signature,\r\n        new TextEncoder().encode(signingInput)\r\n      );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { base64url } from 'rfc4648';\r\nimport { from, Observable, of } from 'rxjs';\r\nimport { map, mergeMap, tap } from 'rxjs/operators';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { JwkExtractor } from '../extractors/jwk.extractor';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { TokenHelperService } from '../utils/tokenHelper/token-helper.service';\r\nimport { JwkWindowCryptoService } from './jwk-window-crypto.service';\r\nimport { JwtWindowCryptoService } from './jwt-window-crypto.service';\r\nimport { alg2kty, getImportAlg, getVerifyAlg } from './token-validation.helper';\r\n\r\n// http://openid.net/specs/openid-connect-implicit-1_0.html\r\n\r\n// id_token\r\n// id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\r\n// MUST exactly match the value of the iss (issuer) Claim.\r\n//\r\n// id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\r\n// by the iss (issuer) Claim as an audience.The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\r\n// or if it contains additional audiences not trusted by the Client.\r\n//\r\n// id_token C3: If the ID Token contains multiple audiences, the Client SHOULD verify that an azp Claim is present.\r\n//\r\n// id_token C4: If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\r\n//\r\n// id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the\r\n// alg Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\r\n//\r\n// id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the OpenID Connect\r\n// Core 1.0\r\n// [OpenID.Core] specification.\r\n//\r\n// id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account\r\n// for clock skew).\r\n//\r\n// id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n// limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\r\n//\r\n// id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one that was sent\r\n// in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.The precise method for detecting replay attacks\r\n// is Client specific.\r\n//\r\n// id_token C10: If the acr Claim was requested, the Client SHOULD check that the asserted Claim Value is appropriate.\r\n// The meaning and processing of acr Claim Values is out of scope for this document.\r\n//\r\n// id_token C11: When a max_age request is made, the Client SHOULD check the auth_time Claim value and request re- authentication\r\n// if it determines too much time has elapsed since the last End- User authentication.\r\n\r\n// Access Token Validation\r\n// access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\r\n// for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\r\n// access_token C2: Take the left- most half of the hash and base64url- encode it.\r\n// access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash is present\r\n// in the ID Token.\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class TokenValidationService {\r\n  static refreshTokenNoncePlaceholder = '--RefreshToken--';\r\n\r\n  keyAlgorithms: string[] = [\r\n    'HS256',\r\n    'HS384',\r\n    'HS512',\r\n    'RS256',\r\n    'RS384',\r\n    'RS512',\r\n    'ES256',\r\n    'ES384',\r\n    'PS256',\r\n    'PS384',\r\n    'PS512',\r\n  ];\r\n\r\n  constructor(\r\n    private readonly tokenHelperService: TokenHelperService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly jwkExtractor: JwkExtractor,\r\n    private readonly jwkWindowCryptoService: JwkWindowCryptoService,\r\n    private readonly jwtWindowCryptoService: JwtWindowCryptoService\r\n  ) {}\r\n\r\n  // id_token C7: The current time MUST be before the time represented by the exp Claim\r\n  // (possibly allowing for some small leeway to account for clock skew).\r\n  hasIdTokenExpired(\r\n    token: string,\r\n    configuration: OpenIdConfiguration,\r\n    offsetSeconds?: number\r\n  ): boolean {\r\n    const decoded = this.tokenHelperService.getPayloadFromToken(\r\n      token,\r\n      false,\r\n      configuration\r\n    );\r\n\r\n    return !this.validateIdTokenExpNotExpired(\r\n      decoded,\r\n      configuration,\r\n      offsetSeconds\r\n    );\r\n  }\r\n\r\n  // id_token C7: The current time MUST be before the time represented by the exp Claim\r\n  // (possibly allowing for some small leeway to account for clock skew).\r\n  validateIdTokenExpNotExpired(\r\n    decodedIdToken: string,\r\n    configuration: OpenIdConfiguration,\r\n    offsetSeconds?: number\r\n  ): boolean {\r\n    const tokenExpirationDate =\r\n      this.tokenHelperService.getTokenExpirationDate(decodedIdToken);\r\n\r\n    offsetSeconds = offsetSeconds || 0;\r\n\r\n    if (!tokenExpirationDate) {\r\n      return false;\r\n    }\r\n\r\n    const tokenExpirationValue = tokenExpirationDate.valueOf();\r\n    const nowWithOffset = this.calculateNowWithOffset(offsetSeconds);\r\n    const tokenNotExpired = tokenExpirationValue > nowWithOffset;\r\n\r\n    this.loggerService.logDebug(\r\n      configuration,\r\n      `Has idToken expired: ${!tokenNotExpired} --> expires in ${this.millisToMinutesAndSeconds(\r\n        tokenExpirationValue - nowWithOffset\r\n      )} , ${new Date(tokenExpirationValue).toLocaleTimeString()} > ${new Date(\r\n        nowWithOffset\r\n      ).toLocaleTimeString()}`\r\n    );\r\n\r\n    return tokenNotExpired;\r\n  }\r\n\r\n  validateAccessTokenNotExpired(\r\n    accessTokenExpiresAt: Date,\r\n    configuration: OpenIdConfiguration,\r\n    offsetSeconds?: number\r\n  ): boolean {\r\n    // value is optional, so if it does not exist, then it has not expired\r\n    if (!accessTokenExpiresAt) {\r\n      return true;\r\n    }\r\n\r\n    offsetSeconds = offsetSeconds || 0;\r\n    const accessTokenExpirationValue = accessTokenExpiresAt.valueOf();\r\n    const nowWithOffset = this.calculateNowWithOffset(offsetSeconds);\r\n    const tokenNotExpired = accessTokenExpirationValue > nowWithOffset;\r\n\r\n    this.loggerService.logDebug(\r\n      configuration,\r\n      `Has accessToken expired: ${!tokenNotExpired} --> expires in ${this.millisToMinutesAndSeconds(\r\n        accessTokenExpirationValue - nowWithOffset\r\n      )} , ${new Date(\r\n        accessTokenExpirationValue\r\n      ).toLocaleTimeString()} > ${new Date(nowWithOffset).toLocaleTimeString()}`\r\n    );\r\n\r\n    return tokenNotExpired;\r\n  }\r\n\r\n  // iss\r\n  // REQUIRED. Issuer Identifier for the Issuer of the response.The iss value is a case-sensitive URL using the\r\n  // https scheme that contains scheme, host,\r\n  // and optionally, port number and path components and no query or fragment components.\r\n  //\r\n  // sub\r\n  // REQUIRED. Subject Identifier.Locally unique and never reassigned identifier within the Issuer for the End- User,\r\n  // which is intended to be consumed by the Client, e.g., 24400320 or AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4.\r\n  // It MUST NOT exceed 255 ASCII characters in length.The sub value is a case-sensitive string.\r\n  //\r\n  // aud\r\n  // REQUIRED. Audience(s) that this ID Token is intended for. It MUST contain the OAuth 2.0 client_id of the Relying Party as an\r\n  // audience value.\r\n  // It MAY also contain identifiers for other audiences.In the general case, the aud value is an array of case-sensitive strings.\r\n  // In the common special case when there is one audience, the aud value MAY be a single case-sensitive string.\r\n  //\r\n  // exp\r\n  // REQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing.\r\n  // The processing of this parameter requires that the current date/ time MUST be before the expiration date/ time listed in the value.\r\n  // Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.\r\n  // Its value is a JSON [RFC7159] number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured in UTC until\r\n  // the date/ time.\r\n  // See RFC 3339 [RFC3339] for details regarding date/ times in general and UTC in particular.\r\n  //\r\n  // iat\r\n  // REQUIRED. Time at which the JWT was issued. Its value is a JSON number representing the number of seconds from\r\n  // 1970- 01 - 01T00: 00: 00Z as measured\r\n  // in UTC until the date/ time.\r\n  validateRequiredIdToken(\r\n    dataIdToken: any,\r\n    configuration: OpenIdConfiguration\r\n  ): boolean {\r\n    let validated = true;\r\n\r\n    if (!Object.prototype.hasOwnProperty.call(dataIdToken, 'iss')) {\r\n      validated = false;\r\n      this.loggerService.logWarning(\r\n        configuration,\r\n        'iss is missing, this is required in the id_token'\r\n      );\r\n    }\r\n\r\n    if (!Object.prototype.hasOwnProperty.call(dataIdToken, 'sub')) {\r\n      validated = false;\r\n      this.loggerService.logWarning(\r\n        configuration,\r\n        'sub is missing, this is required in the id_token'\r\n      );\r\n    }\r\n\r\n    if (!Object.prototype.hasOwnProperty.call(dataIdToken, 'aud')) {\r\n      validated = false;\r\n      this.loggerService.logWarning(\r\n        configuration,\r\n        'aud is missing, this is required in the id_token'\r\n      );\r\n    }\r\n\r\n    if (!Object.prototype.hasOwnProperty.call(dataIdToken, 'exp')) {\r\n      validated = false;\r\n      this.loggerService.logWarning(\r\n        configuration,\r\n        'exp is missing, this is required in the id_token'\r\n      );\r\n    }\r\n\r\n    if (!Object.prototype.hasOwnProperty.call(dataIdToken, 'iat')) {\r\n      validated = false;\r\n      this.loggerService.logWarning(\r\n        configuration,\r\n        'iat is missing, this is required in the id_token'\r\n      );\r\n    }\r\n\r\n    return validated;\r\n  }\r\n\r\n  // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n  // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\r\n  validateIdTokenIatMaxOffset(\r\n    dataIdToken: any,\r\n    maxOffsetAllowedInSeconds: number,\r\n    disableIatOffsetValidation: boolean,\r\n    configuration: OpenIdConfiguration\r\n  ): boolean {\r\n    if (disableIatOffsetValidation) {\r\n      return true;\r\n    }\r\n\r\n    if (!Object.prototype.hasOwnProperty.call(dataIdToken, 'iat')) {\r\n      return false;\r\n    }\r\n\r\n    const dateTimeIatIdToken = new Date(0); // The 0 here is the key, which sets the date to the epoch\r\n\r\n    dateTimeIatIdToken.setUTCSeconds(dataIdToken.iat);\r\n    maxOffsetAllowedInSeconds = maxOffsetAllowedInSeconds || 0;\r\n\r\n    const nowInUtc = new Date(new Date().toUTCString());\r\n    const diff = nowInUtc.valueOf() - dateTimeIatIdToken.valueOf();\r\n    const maxOffsetAllowedInMilliseconds = maxOffsetAllowedInSeconds * 1000;\r\n\r\n    this.loggerService.logDebug(\r\n      configuration,\r\n      `validate id token iat max offset ${diff} < ${maxOffsetAllowedInMilliseconds}`\r\n    );\r\n\r\n    if (diff > 0) {\r\n      return diff < maxOffsetAllowedInMilliseconds;\r\n    }\r\n\r\n    return -diff < maxOffsetAllowedInMilliseconds;\r\n  }\r\n\r\n  // id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one\r\n  // that was sent in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.\r\n  // The precise method for detecting replay attacks is Client specific.\r\n\r\n  // However the nonce claim SHOULD not be present for the refresh_token grant type\r\n  // https://bitbucket.org/openid/connect/issues/1025/ambiguity-with-how-nonce-is-handled-on\r\n  // The current spec is ambiguous and KeyCloak does send it.\r\n  validateIdTokenNonce(\r\n    dataIdToken: any,\r\n    localNonce: any,\r\n    ignoreNonceAfterRefresh: boolean,\r\n    configuration: OpenIdConfiguration\r\n  ): boolean {\r\n    const isFromRefreshToken =\r\n      (dataIdToken.nonce === undefined || ignoreNonceAfterRefresh) &&\r\n      localNonce === TokenValidationService.refreshTokenNoncePlaceholder;\r\n\r\n    if (!isFromRefreshToken && dataIdToken.nonce !== localNonce) {\r\n      this.loggerService.logDebug(\r\n        configuration,\r\n        'Validate_id_token_nonce failed, dataIdToken.nonce: ' +\r\n          dataIdToken.nonce +\r\n          ' local_nonce:' +\r\n          localNonce\r\n      );\r\n\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\r\n  // MUST exactly match the value of the iss (issuer) Claim.\r\n  validateIdTokenIss(\r\n    dataIdToken: any,\r\n    authWellKnownEndpointsIssuer: any,\r\n    configuration: OpenIdConfiguration\r\n  ): boolean {\r\n    if (\r\n      (dataIdToken.iss as string) !== (authWellKnownEndpointsIssuer as string)\r\n    ) {\r\n      this.loggerService.logDebug(\r\n        configuration,\r\n        'Validate_id_token_iss failed, dataIdToken.iss: ' +\r\n          dataIdToken.iss +\r\n          ' authWellKnownEndpoints issuer:' +\r\n          authWellKnownEndpointsIssuer\r\n      );\r\n\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\r\n  // by the iss (issuer) Claim as an audience.\r\n  // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences\r\n  // not trusted by the Client.\r\n  validateIdTokenAud(\r\n    dataIdToken: any,\r\n    aud: any,\r\n    configuration: OpenIdConfiguration\r\n  ): boolean {\r\n    if (Array.isArray(dataIdToken.aud)) {\r\n      const result = dataIdToken.aud.includes(aud);\r\n\r\n      if (!result) {\r\n        this.loggerService.logDebug(\r\n          configuration,\r\n          'Validate_id_token_aud array failed, dataIdToken.aud: ' +\r\n            dataIdToken.aud +\r\n            ' client_id:' +\r\n            aud\r\n        );\r\n\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    } else if (dataIdToken.aud !== aud) {\r\n      this.loggerService.logDebug(\r\n        configuration,\r\n        'Validate_id_token_aud failed, dataIdToken.aud: ' +\r\n          dataIdToken.aud +\r\n          ' client_id:' +\r\n          aud\r\n      );\r\n\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  validateIdTokenAzpExistsIfMoreThanOneAud(dataIdToken: any): boolean {\r\n    if (!dataIdToken) {\r\n      return false;\r\n    }\r\n\r\n    return !(\r\n      Array.isArray(dataIdToken.aud) &&\r\n      dataIdToken.aud.length > 1 &&\r\n      !dataIdToken.azp\r\n    );\r\n  }\r\n\r\n  // If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\r\n  validateIdTokenAzpValid(dataIdToken: any, clientId: string): boolean {\r\n    if (!dataIdToken?.azp) {\r\n      return true;\r\n    }\r\n\r\n    return dataIdToken.azp === clientId;\r\n  }\r\n\r\n  validateStateFromHashCallback(\r\n    state: any,\r\n    localState: any,\r\n    configuration: OpenIdConfiguration\r\n  ): boolean {\r\n    if ((state as string) !== (localState as string)) {\r\n      this.loggerService.logDebug(\r\n        configuration,\r\n        'ValidateStateFromHashCallback failed, state: ' +\r\n          state +\r\n          ' local_state:' +\r\n          localState\r\n      );\r\n\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the alg\r\n  // Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\r\n  // id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the\r\n  // OpenID Connect Core 1.0 [OpenID.Core] specification.\r\n  validateSignatureIdToken(\r\n    idToken: string,\r\n    jwtkeys: any,\r\n    configuration: OpenIdConfiguration\r\n  ): Observable<boolean> {\r\n    if (!idToken) {\r\n      return of(true);\r\n    }\r\n\r\n    if (!jwtkeys || !jwtkeys.keys) {\r\n      return of(false);\r\n    }\r\n\r\n    const headerData = this.tokenHelperService.getHeaderFromToken(\r\n      idToken,\r\n      false,\r\n      configuration\r\n    );\r\n\r\n    if (\r\n      Object.keys(headerData).length === 0 &&\r\n      headerData.constructor === Object\r\n    ) {\r\n      this.loggerService.logWarning(\r\n        configuration,\r\n        'id token has no header data'\r\n      );\r\n\r\n      return of(false);\r\n    }\r\n\r\n    const kid: string = headerData.kid;\r\n    const alg: string = headerData.alg;\r\n\r\n    const keys: JsonWebKey[] = jwtkeys.keys;\r\n    let foundKeys: JsonWebKey[];\r\n    let key: JsonWebKey;\r\n\r\n    if (!this.keyAlgorithms.includes(alg)) {\r\n      this.loggerService.logWarning(configuration, 'alg not supported', alg);\r\n\r\n      return of(false);\r\n    }\r\n\r\n    const kty = alg2kty(alg);\r\n    const use = 'sig';\r\n\r\n    try {\r\n      foundKeys = kid\r\n        ? this.jwkExtractor.extractJwk(keys, { kid, kty, use }, false)\r\n        : this.jwkExtractor.extractJwk(keys, { kty, use }, false);\r\n\r\n      if (foundKeys.length === 0) {\r\n        foundKeys = kid\r\n          ? this.jwkExtractor.extractJwk(keys, { kid, kty })\r\n          : this.jwkExtractor.extractJwk(keys, { kty });\r\n      }\r\n\r\n      key = foundKeys[0];\r\n    } catch (e: any) {\r\n      this.loggerService.logError(configuration, e);\r\n\r\n      return of(false);\r\n    }\r\n\r\n    const algorithm: RsaHashedImportParams | EcKeyImportParams =\r\n      getImportAlg(alg);\r\n\r\n    const signingInput = this.tokenHelperService.getSigningInputFromToken(\r\n      idToken,\r\n      true,\r\n      configuration\r\n    );\r\n    const rawSignature = this.tokenHelperService.getSignatureFromToken(\r\n      idToken,\r\n      true,\r\n      configuration\r\n    );\r\n\r\n    return from(\r\n      this.jwkWindowCryptoService.importVerificationKey(key, algorithm)\r\n    ).pipe(\r\n      mergeMap((cryptoKey: CryptoKey) => {\r\n        const signature: Uint8Array = base64url.parse(rawSignature, {\r\n          loose: true,\r\n        });\r\n\r\n        const verifyAlgorithm: RsaHashedImportParams | EcdsaParams =\r\n          getVerifyAlg(alg);\r\n\r\n        return from(\r\n          this.jwkWindowCryptoService.verifyKey(\r\n            verifyAlgorithm,\r\n            cryptoKey,\r\n            signature,\r\n            signingInput\r\n          )\r\n        );\r\n      }),\r\n      tap((isValid: boolean) => {\r\n        if (!isValid) {\r\n          this.loggerService.logWarning(\r\n            configuration,\r\n            'incorrect Signature, validation failed for id_token'\r\n          );\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  // Accepts ID Token without 'kid' claim in JOSE header if only one JWK supplied in 'jwks_url'\r\n  //// private validate_no_kid_in_header_only_one_allowed_in_jwtkeys(header_data: any, jwtkeys: any): boolean {\r\n  ////    this.oidcSecurityCommon.logDebug('amount of jwtkeys.keys: ' + jwtkeys.keys.length);\r\n  ////    if (!header_data.hasOwnProperty('kid')) {\r\n  ////        // no kid defined in Jose header\r\n  ////        if (jwtkeys.keys.length != 1) {\r\n  ////            this.oidcSecurityCommon.logDebug('jwtkeys.keys.length != 1 and no kid in header');\r\n  ////            return false;\r\n  ////        }\r\n  ////    }\r\n\r\n  ////    return true;\r\n  //// }\r\n\r\n  // Access Token Validation\r\n  // access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\r\n  // for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\r\n  // access_token C2: Take the left- most half of the hash and base64url- encode it.\r\n  // access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash\r\n  // is present in the ID Token.\r\n  validateIdTokenAtHash(\r\n    accessToken: string,\r\n    atHash: string,\r\n    idTokenAlg: string,\r\n    configuration: OpenIdConfiguration\r\n  ): Observable<boolean> {\r\n    this.loggerService.logDebug(\r\n      configuration,\r\n      'at_hash from the server:' + atHash\r\n    );\r\n\r\n    // 'sha256' 'sha384' 'sha512'\r\n    let sha = 'SHA-256';\r\n\r\n    if (idTokenAlg.includes('384')) {\r\n      sha = 'SHA-384';\r\n    } else if (idTokenAlg.includes('512')) {\r\n      sha = 'SHA-512';\r\n    }\r\n\r\n    return this.jwtWindowCryptoService\r\n      .generateAtHash('' + accessToken, sha)\r\n      .pipe(\r\n        mergeMap((hash: string) => {\r\n          this.loggerService.logDebug(\r\n            configuration,\r\n            'at_hash client validation not decoded:' + hash\r\n          );\r\n          if (hash === atHash) {\r\n            return of(true); // isValid;\r\n          } else {\r\n            return this.jwtWindowCryptoService\r\n              .generateAtHash('' + decodeURIComponent(accessToken), sha)\r\n              .pipe(\r\n                map((newHash: string) => {\r\n                  this.loggerService.logDebug(\r\n                    configuration,\r\n                    '-gen access--' + hash\r\n                  );\r\n\r\n                  return newHash === atHash;\r\n                })\r\n              );\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  private millisToMinutesAndSeconds(millis: number): string {\r\n    const minutes = Math.floor(millis / 60000);\r\n    const seconds = ((millis % 60000) / 1000).toFixed(0);\r\n\r\n    return minutes + ':' + (+seconds < 10 ? '0' : '') + seconds;\r\n  }\r\n\r\n  private calculateNowWithOffset(offsetSeconds: number): number {\r\n    return new Date(new Date().toUTCString()).valueOf() + offsetSeconds * 1000;\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class HttpBaseService {\r\n  constructor(private readonly http: HttpClient) {}\r\n\r\n  get<T>(url: string, params?: { [key: string]: any }): Observable<T> {\r\n    return this.http.get<T>(url, params);\r\n  }\r\n\r\n  post<T>(\r\n    url: string,\r\n    body: any,\r\n    params?: { [key: string]: any }\r\n  ): Observable<T> {\r\n    return this.http.post<T>(url, body, params);\r\n  }\r\n}\r\n","import { HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { HttpBaseService } from './http-base.service';\r\n\r\nconst NGSW_CUSTOM_PARAM = 'ngsw-bypass';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DataService {\r\n  constructor(private readonly httpClient: HttpBaseService) {}\r\n\r\n  get<T>(\r\n    url: string,\r\n    config: OpenIdConfiguration,\r\n    token?: string\r\n  ): Observable<T> {\r\n    const headers = this.prepareHeaders(token);\r\n    const params = this.prepareParams(config);\r\n\r\n    return this.httpClient.get<T>(url, {\r\n      headers,\r\n      params,\r\n    });\r\n  }\r\n\r\n  post<T>(\r\n    url: string,\r\n    body: any,\r\n    config: OpenIdConfiguration,\r\n    headersParams?: HttpHeaders\r\n  ): Observable<T> {\r\n    const headers = headersParams || this.prepareHeaders();\r\n    const params = this.prepareParams(config);\r\n\r\n    return this.httpClient.post<T>(url, body, { headers, params });\r\n  }\r\n\r\n  private prepareHeaders(token?: string): HttpHeaders {\r\n    let headers = new HttpHeaders();\r\n\r\n    headers = headers.set('Accept', 'application/json');\r\n\r\n    if (!!token) {\r\n      headers = headers.set(\r\n        'Authorization',\r\n        'Bearer ' + decodeURIComponent(token)\r\n      );\r\n    }\r\n\r\n    return headers;\r\n  }\r\n\r\n  private prepareParams(config: OpenIdConfiguration): HttpParams {\r\n    let params = new HttpParams();\r\n\r\n    const { ngswBypass } = config;\r\n\r\n    if (ngswBypass) {\r\n      params = params.set(NGSW_CUSTOM_PARAM, '');\r\n    }\r\n\r\n    return params;\r\n  }\r\n}\r\n","import { HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, throwError, timer } from 'rxjs';\r\nimport { catchError, mergeMap, retryWhen, switchMap } from 'rxjs/operators';\r\nimport { DataService } from '../../api/data.service';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { StoragePersistenceService } from '../../storage/storage-persistence.service';\r\nimport { UrlService } from '../../utils/url/url.service';\r\nimport { TokenValidationService } from '../../validation/token-validation.service';\r\nimport { AuthResult, CallbackContext } from '../callback-context';\r\nimport { FlowsDataService } from '../flows-data.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CodeFlowCallbackHandlerService {\r\n  constructor(\r\n    private readonly urlService: UrlService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly tokenValidationService: TokenValidationService,\r\n    private readonly flowsDataService: FlowsDataService,\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly dataService: DataService\r\n  ) {}\r\n\r\n  // STEP 1 Code Flow\r\n  codeFlowCallback(\r\n    urlToCheck: string,\r\n    config: OpenIdConfiguration\r\n  ): Observable<CallbackContext> {\r\n    const code = this.urlService.getUrlParameter(urlToCheck, 'code');\r\n    const state = this.urlService.getUrlParameter(urlToCheck, 'state');\r\n    const sessionState = this.urlService.getUrlParameter(\r\n      urlToCheck,\r\n      'session_state'\r\n    );\r\n\r\n    if (!state) {\r\n      this.loggerService.logDebug(config, 'no state in url');\r\n\r\n      return throwError(() => new Error('no state in url'));\r\n    }\r\n\r\n    if (!code) {\r\n      this.loggerService.logDebug(config, 'no code in url');\r\n\r\n      return throwError(() => new Error('no code in url'));\r\n    }\r\n\r\n    this.loggerService.logDebug(\r\n      config,\r\n      'running validation for callback',\r\n      urlToCheck\r\n    );\r\n\r\n    const initialCallbackContext = {\r\n      code,\r\n      refreshToken: null,\r\n      state,\r\n      sessionState,\r\n      authResult: null,\r\n      isRenewProcess: false,\r\n      jwtKeys: null,\r\n      validationResult: null,\r\n      existingIdToken: null,\r\n    };\r\n\r\n    return of(initialCallbackContext);\r\n  }\r\n\r\n  // STEP 2 Code Flow //  Code Flow Silent Renew starts here\r\n  codeFlowCodeRequest(\r\n    callbackContext: CallbackContext,\r\n    config: OpenIdConfiguration\r\n  ): Observable<CallbackContext> {\r\n    const authStateControl = this.flowsDataService.getAuthStateControl(config);\r\n    const isStateCorrect =\r\n      this.tokenValidationService.validateStateFromHashCallback(\r\n        callbackContext.state,\r\n        authStateControl,\r\n        config\r\n      );\r\n\r\n    if (!isStateCorrect) {\r\n      return throwError(() => new Error('codeFlowCodeRequest incorrect state'));\r\n    }\r\n\r\n    const authWellknownEndpoints = this.storagePersistenceService.read(\r\n      'authWellKnownEndPoints',\r\n      config\r\n    );\r\n    const tokenEndpoint = authWellknownEndpoints?.tokenEndpoint;\r\n\r\n    if (!tokenEndpoint) {\r\n      return throwError(() => new Error('Token Endpoint not defined'));\r\n    }\r\n\r\n    let headers: HttpHeaders = new HttpHeaders();\r\n\r\n    headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n    const bodyForCodeFlow = this.urlService.createBodyForCodeFlowCodeRequest(\r\n      callbackContext.code,\r\n      config,\r\n      config?.customParamsCodeRequest\r\n    );\r\n\r\n    return this.dataService\r\n      .post(tokenEndpoint, bodyForCodeFlow, config, headers)\r\n      .pipe(\r\n        switchMap((response: AuthResult) => {\r\n          callbackContext.authResult = {\r\n            ...response,\r\n            state: callbackContext.state,\r\n            session_state: callbackContext.sessionState,\r\n          };\r\n\r\n          return of(callbackContext);\r\n        }),\r\n        retryWhen((error) => this.handleRefreshRetry(error, config)),\r\n        catchError((error) => {\r\n          const { authority } = config;\r\n          const errorMessage = `OidcService code request ${authority}`;\r\n\r\n          this.loggerService.logError(config, errorMessage, error);\r\n\r\n          return throwError(() => new Error(errorMessage));\r\n        })\r\n      );\r\n  }\r\n\r\n  private handleRefreshRetry(\r\n    errors: Observable<any>,\r\n    config: OpenIdConfiguration\r\n  ): Observable<any> {\r\n    return errors.pipe(\r\n      mergeMap((error) => {\r\n        // retry token refresh if there is no internet connection\r\n        if (\r\n          error &&\r\n          error instanceof HttpErrorResponse &&\r\n          error.error instanceof ProgressEvent &&\r\n          error.error.type === 'error'\r\n        ) {\r\n          const { authority, refreshTokenRetryInSeconds } = config;\r\n          const errorMessage = `OidcService code request ${authority} - no internet connection`;\r\n\r\n          this.loggerService.logWarning(config, errorMessage, error);\r\n\r\n          return timer(refreshTokenRetryInSeconds * 1000);\r\n        }\r\n\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { AuthResult } from '../flows/callback-context';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { EventTypes } from '../public-events/event-types';\r\nimport { PublicEventsService } from '../public-events/public-events.service';\r\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\r\nimport { TokenValidationService } from '../validation/token-validation.service';\r\nimport { AuthenticatedResult } from './auth-result';\r\nimport { AuthStateResult } from './auth-state';\r\n\r\nconst DEFAULT_AUTHRESULT = {\r\n  isAuthenticated: false,\r\n  allConfigsAuthenticated: [],\r\n};\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthStateService {\r\n  private readonly authenticatedInternal$ =\r\n    new BehaviorSubject<AuthenticatedResult>(DEFAULT_AUTHRESULT);\r\n\r\n  get authenticated$(): Observable<AuthenticatedResult> {\r\n    return this.authenticatedInternal$\r\n      .asObservable()\r\n      .pipe(distinctUntilChanged());\r\n  }\r\n\r\n  constructor(\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly publicEventsService: PublicEventsService,\r\n    private readonly tokenValidationService: TokenValidationService\r\n  ) {}\r\n\r\n  setAuthenticatedAndFireEvent(allConfigs: OpenIdConfiguration[]): void {\r\n    const result = this.composeAuthenticatedResult(allConfigs);\r\n\r\n    this.authenticatedInternal$.next(result);\r\n  }\r\n\r\n  setUnauthenticatedAndFireEvent(\r\n    currentConfig: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): void {\r\n    this.storagePersistenceService.resetAuthStateInStorage(currentConfig);\r\n\r\n    const result = this.composeUnAuthenticatedResult(allConfigs);\r\n\r\n    this.authenticatedInternal$.next(result);\r\n  }\r\n\r\n  updateAndPublishAuthState(authenticationResult: AuthStateResult): void {\r\n    this.publicEventsService.fireEvent<AuthStateResult>(\r\n      EventTypes.NewAuthenticationResult,\r\n      authenticationResult\r\n    );\r\n  }\r\n\r\n  setAuthorizationData(\r\n    accessToken: string,\r\n    authResult: AuthResult,\r\n    currentConfig: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): void {\r\n    this.loggerService.logDebug(\r\n      currentConfig,\r\n      `storing the accessToken '${accessToken}'`\r\n    );\r\n\r\n    this.storagePersistenceService.write(\r\n      'authzData',\r\n      accessToken,\r\n      currentConfig\r\n    );\r\n    this.persistAccessTokenExpirationTime(authResult, currentConfig);\r\n    this.setAuthenticatedAndFireEvent(allConfigs);\r\n  }\r\n\r\n  getAccessToken(configuration: OpenIdConfiguration): string {\r\n    if (!this.isAuthenticated(configuration)) {\r\n      return null;\r\n    }\r\n\r\n    const token = this.storagePersistenceService.getAccessToken(configuration);\r\n\r\n    return this.decodeURIComponentSafely(token);\r\n  }\r\n\r\n  getIdToken(configuration: OpenIdConfiguration): string {\r\n    if (!this.isAuthenticated(configuration)) {\r\n      return null;\r\n    }\r\n\r\n    const token = this.storagePersistenceService.getIdToken(configuration);\r\n\r\n    return this.decodeURIComponentSafely(token);\r\n  }\r\n\r\n  getRefreshToken(configuration: OpenIdConfiguration): string {\r\n    if (!this.isAuthenticated(configuration)) {\r\n      return null;\r\n    }\r\n\r\n    const token = this.storagePersistenceService.getRefreshToken(configuration);\r\n\r\n    return this.decodeURIComponentSafely(token);\r\n  }\r\n\r\n  getAuthenticationResult(configuration: OpenIdConfiguration): any {\r\n    if (!this.isAuthenticated(configuration)) {\r\n      return null;\r\n    }\r\n\r\n    return this.storagePersistenceService.getAuthenticationResult(\r\n      configuration\r\n    );\r\n  }\r\n\r\n  areAuthStorageTokensValid(configuration: OpenIdConfiguration): boolean {\r\n    if (!this.isAuthenticated(configuration)) {\r\n      return false;\r\n    }\r\n\r\n    if (this.hasIdTokenExpiredAndRenewCheckIsEnabled(configuration)) {\r\n      this.loggerService.logDebug(\r\n        configuration,\r\n        'persisted idToken is expired'\r\n      );\r\n\r\n      return false;\r\n    }\r\n\r\n    if (this.hasAccessTokenExpiredIfExpiryExists(configuration)) {\r\n      this.loggerService.logDebug(\r\n        configuration,\r\n        'persisted accessToken is expired'\r\n      );\r\n\r\n      return false;\r\n    }\r\n\r\n    this.loggerService.logDebug(\r\n      configuration,\r\n      'persisted idToken and accessToken are valid'\r\n    );\r\n\r\n    return true;\r\n  }\r\n\r\n  hasIdTokenExpiredAndRenewCheckIsEnabled(\r\n    configuration: OpenIdConfiguration\r\n  ): boolean {\r\n    const {\r\n      renewTimeBeforeTokenExpiresInSeconds,\r\n      triggerRefreshWhenIdTokenExpired,\r\n      disableIdTokenValidation,\r\n    } = configuration;\r\n\r\n    if (!triggerRefreshWhenIdTokenExpired || disableIdTokenValidation) {\r\n      return false;\r\n    }\r\n    const tokenToCheck =\r\n      this.storagePersistenceService.getIdToken(configuration);\r\n\r\n    const idTokenExpired = this.tokenValidationService.hasIdTokenExpired(\r\n      tokenToCheck,\r\n      configuration,\r\n      renewTimeBeforeTokenExpiresInSeconds\r\n    );\r\n\r\n    if (idTokenExpired) {\r\n      this.publicEventsService.fireEvent<boolean>(\r\n        EventTypes.IdTokenExpired,\r\n        idTokenExpired\r\n      );\r\n    }\r\n\r\n    return idTokenExpired;\r\n  }\r\n\r\n  hasAccessTokenExpiredIfExpiryExists(\r\n    configuration: OpenIdConfiguration\r\n  ): boolean {\r\n    const { renewTimeBeforeTokenExpiresInSeconds } = configuration;\r\n    const accessTokenExpiresIn = this.storagePersistenceService.read(\r\n      'access_token_expires_at',\r\n      configuration\r\n    );\r\n    const accessTokenHasNotExpired =\r\n      this.tokenValidationService.validateAccessTokenNotExpired(\r\n        accessTokenExpiresIn,\r\n        configuration,\r\n        renewTimeBeforeTokenExpiresInSeconds\r\n      );\r\n\r\n    const hasExpired = !accessTokenHasNotExpired;\r\n\r\n    if (hasExpired) {\r\n      this.publicEventsService.fireEvent<boolean>(\r\n        EventTypes.TokenExpired,\r\n        hasExpired\r\n      );\r\n    }\r\n\r\n    return hasExpired;\r\n  }\r\n\r\n  isAuthenticated(configuration: OpenIdConfiguration): boolean {\r\n    const hasAccessToken =\r\n      !!this.storagePersistenceService.getAccessToken(configuration);\r\n    const hasIdToken =\r\n      !!this.storagePersistenceService.getIdToken(configuration);\r\n\r\n    return hasAccessToken && hasIdToken;\r\n  }\r\n\r\n  private decodeURIComponentSafely(token: string): string {\r\n    if (token) {\r\n      return decodeURIComponent(token);\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  private persistAccessTokenExpirationTime(\r\n    authResult: any,\r\n    configuration: OpenIdConfiguration\r\n  ): void {\r\n    if (authResult?.expires_in) {\r\n      const accessTokenExpiryTime =\r\n        new Date(new Date().toUTCString()).valueOf() +\r\n        authResult.expires_in * 1000;\r\n\r\n      this.storagePersistenceService.write(\r\n        'access_token_expires_at',\r\n        accessTokenExpiryTime,\r\n        configuration\r\n      );\r\n    }\r\n  }\r\n\r\n  private composeAuthenticatedResult(\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): AuthenticatedResult {\r\n    if (allConfigs.length === 1) {\r\n      const { configId } = allConfigs[0];\r\n\r\n      return {\r\n        isAuthenticated: true,\r\n        allConfigsAuthenticated: [{ configId, isAuthenticated: true }],\r\n      };\r\n    }\r\n\r\n    return this.checkAllConfigsIfTheyAreAuthenticated(allConfigs);\r\n  }\r\n\r\n  private composeUnAuthenticatedResult(\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): AuthenticatedResult {\r\n    if (allConfigs.length === 1) {\r\n      const { configId } = allConfigs[0];\r\n\r\n      return {\r\n        isAuthenticated: false,\r\n        allConfigsAuthenticated: [{ configId, isAuthenticated: false }],\r\n      };\r\n    }\r\n\r\n    return this.checkAllConfigsIfTheyAreAuthenticated(allConfigs);\r\n  }\r\n\r\n  private checkAllConfigsIfTheyAreAuthenticated(\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): AuthenticatedResult {\r\n    const allConfigsAuthenticated = allConfigs.map((config) => ({\r\n      configId: config.configId,\r\n      isAuthenticated: this.isAuthenticated(config),\r\n    }));\r\n\r\n    const isAuthenticated = allConfigsAuthenticated.every(\r\n      (x) => !!x.isAuthenticated\r\n    );\r\n\r\n    return { allConfigsAuthenticated, isAuthenticated };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, of, throwError } from 'rxjs';\r\nimport { map, retry, switchMap } from 'rxjs/operators';\r\nimport { DataService } from '../api/data.service';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { EventTypes } from '../public-events/event-types';\r\nimport { PublicEventsService } from '../public-events/public-events.service';\r\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\r\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\r\nimport { TokenHelperService } from '../utils/tokenHelper/token-helper.service';\r\nimport { ConfigUserDataResult, UserDataResult } from './userdata-result';\r\n\r\nconst DEFAULT_USERRESULT = { userData: null, allUserData: [] };\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserService {\r\n  private readonly userDataInternal$ = new BehaviorSubject<UserDataResult>(\r\n    DEFAULT_USERRESULT\r\n  );\r\n\r\n  get userData$(): Observable<UserDataResult> {\r\n    return this.userDataInternal$.asObservable();\r\n  }\r\n\r\n  constructor(\r\n    private readonly oidcDataService: DataService,\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly eventService: PublicEventsService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly tokenHelperService: TokenHelperService,\r\n    private readonly flowHelper: FlowHelper\r\n  ) {}\r\n\r\n  getAndPersistUserDataInStore(\r\n    currentConfiguration: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    isRenewProcess = false,\r\n    idToken?: any,\r\n    decodedIdToken?: any\r\n  ): Observable<any> {\r\n    idToken =\r\n      idToken ||\r\n      this.storagePersistenceService.getIdToken(currentConfiguration);\r\n    decodedIdToken =\r\n      decodedIdToken ||\r\n      this.tokenHelperService.getPayloadFromToken(\r\n        idToken,\r\n        false,\r\n        currentConfiguration\r\n      );\r\n\r\n    const existingUserDataFromStorage =\r\n      this.getUserDataFromStore(currentConfiguration);\r\n    const haveUserData = !!existingUserDataFromStorage;\r\n    const isCurrentFlowImplicitFlowWithAccessToken =\r\n      this.flowHelper.isCurrentFlowImplicitFlowWithAccessToken(\r\n        currentConfiguration\r\n      );\r\n    const isCurrentFlowCodeFlow =\r\n      this.flowHelper.isCurrentFlowCodeFlow(currentConfiguration);\r\n\r\n    const accessToken =\r\n      this.storagePersistenceService.getAccessToken(currentConfiguration);\r\n\r\n    if (!(isCurrentFlowImplicitFlowWithAccessToken || isCurrentFlowCodeFlow)) {\r\n      this.loggerService.logDebug(\r\n        currentConfiguration,\r\n        `authCallback idToken flow with accessToken ${accessToken}`\r\n      );\r\n\r\n      this.setUserDataToStore(decodedIdToken, currentConfiguration, allConfigs);\r\n\r\n      return of(decodedIdToken);\r\n    }\r\n\r\n    const { renewUserInfoAfterTokenRenew } = currentConfiguration;\r\n\r\n    if (!isRenewProcess || renewUserInfoAfterTokenRenew || !haveUserData) {\r\n      return this.getUserDataOidcFlowAndSave(\r\n        decodedIdToken.sub,\r\n        currentConfiguration,\r\n        allConfigs\r\n      ).pipe(\r\n        switchMap((userData) => {\r\n          this.loggerService.logDebug(\r\n            currentConfiguration,\r\n            'Received user data: ',\r\n            userData\r\n          );\r\n          if (!!userData) {\r\n            this.loggerService.logDebug(\r\n              currentConfiguration,\r\n              'accessToken: ',\r\n              accessToken\r\n            );\r\n\r\n            return of(userData);\r\n          } else {\r\n            return throwError(\r\n              () => new Error('Received no user data, request failed')\r\n            );\r\n          }\r\n        })\r\n      );\r\n    }\r\n\r\n    return of(existingUserDataFromStorage);\r\n  }\r\n\r\n  getUserDataFromStore(currentConfiguration: OpenIdConfiguration): any {\r\n    return (\r\n      this.storagePersistenceService.read('userData', currentConfiguration) ||\r\n      null\r\n    );\r\n  }\r\n\r\n  publishUserDataIfExists(\r\n    currentConfiguration: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): void {\r\n    const userData = this.getUserDataFromStore(currentConfiguration);\r\n\r\n    if (userData) {\r\n      this.fireUserDataEvent(currentConfiguration, allConfigs, userData);\r\n    }\r\n  }\r\n\r\n  setUserDataToStore(\r\n    userData: any,\r\n    currentConfiguration: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): void {\r\n    this.storagePersistenceService.write(\r\n      'userData',\r\n      userData,\r\n      currentConfiguration\r\n    );\r\n    this.fireUserDataEvent(currentConfiguration, allConfigs, userData);\r\n  }\r\n\r\n  resetUserDataInStore(\r\n    currentConfiguration: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): void {\r\n    this.storagePersistenceService.remove('userData', currentConfiguration);\r\n    this.fireUserDataEvent(currentConfiguration, allConfigs, null);\r\n  }\r\n\r\n  private getUserDataOidcFlowAndSave(\r\n    idTokenSub: any,\r\n    currentConfiguration: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): Observable<any> {\r\n    return this.getIdentityUserData(currentConfiguration).pipe(\r\n      map((data: any) => {\r\n        if (\r\n          this.validateUserDataSubIdToken(\r\n            currentConfiguration,\r\n            idTokenSub,\r\n            data?.sub\r\n          )\r\n        ) {\r\n          this.setUserDataToStore(data, currentConfiguration, allConfigs);\r\n\r\n          return data;\r\n        } else {\r\n          // something went wrong, user data sub does not match that from id_token\r\n          this.loggerService.logWarning(\r\n            currentConfiguration,\r\n            `User data sub does not match sub in id_token, resetting`\r\n          );\r\n          this.resetUserDataInStore(currentConfiguration, allConfigs);\r\n\r\n          return null;\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private getIdentityUserData(\r\n    currentConfiguration: OpenIdConfiguration\r\n  ): Observable<any> {\r\n    const token =\r\n      this.storagePersistenceService.getAccessToken(currentConfiguration);\r\n\r\n    const authWellKnownEndPoints = this.storagePersistenceService.read(\r\n      'authWellKnownEndPoints',\r\n      currentConfiguration\r\n    );\r\n\r\n    if (!authWellKnownEndPoints) {\r\n      this.loggerService.logWarning(\r\n        currentConfiguration,\r\n        'init check session: authWellKnownEndpoints is undefined'\r\n      );\r\n\r\n      return throwError(() => new Error('authWellKnownEndpoints is undefined'));\r\n    }\r\n\r\n    const userInfoEndpoint = authWellKnownEndPoints.userInfoEndpoint;\r\n\r\n    if (!userInfoEndpoint) {\r\n      this.loggerService.logError(\r\n        currentConfiguration,\r\n        'init check session: authWellKnownEndpoints.userinfo_endpoint is undefined; set auto_userinfo = false in config'\r\n      );\r\n\r\n      return throwError(\r\n        () => new Error('authWellKnownEndpoints.userinfo_endpoint is undefined')\r\n      );\r\n    }\r\n\r\n    return this.oidcDataService\r\n      .get(userInfoEndpoint, currentConfiguration, token)\r\n      .pipe(retry(2));\r\n  }\r\n\r\n  private validateUserDataSubIdToken(\r\n    currentConfiguration: OpenIdConfiguration,\r\n    idTokenSub: any,\r\n    userDataSub: any\r\n  ): boolean {\r\n    if (!idTokenSub) {\r\n      return false;\r\n    }\r\n\r\n    if (!userDataSub) {\r\n      return false;\r\n    }\r\n\r\n    if (idTokenSub.toString() !== userDataSub.toString()) {\r\n      this.loggerService.logDebug(\r\n        currentConfiguration,\r\n        'validateUserDataSubIdToken failed',\r\n        idTokenSub,\r\n        userDataSub\r\n      );\r\n\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private fireUserDataEvent(\r\n    currentConfiguration: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    passedUserData: any\r\n  ): void {\r\n    const userData = this.composeSingleOrMultipleUserDataObject(\r\n      currentConfiguration,\r\n      allConfigs,\r\n      passedUserData\r\n    );\r\n\r\n    this.userDataInternal$.next(userData);\r\n\r\n    const { configId } = currentConfiguration;\r\n\r\n    this.eventService.fireEvent(EventTypes.UserDataChanged, {\r\n      configId,\r\n      userData: passedUserData,\r\n    });\r\n  }\r\n\r\n  private composeSingleOrMultipleUserDataObject(\r\n    currentConfiguration: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    passedUserData: any\r\n  ): UserDataResult {\r\n    const hasManyConfigs = allConfigs.length > 1;\r\n\r\n    if (!hasManyConfigs) {\r\n      const { configId } = currentConfiguration;\r\n\r\n      return this.composeSingleUserDataResult(configId, passedUserData);\r\n    }\r\n\r\n    const allUserData: ConfigUserDataResult[] = allConfigs.map((config) => {\r\n      const { configId } = currentConfiguration;\r\n\r\n      if (this.currentConfigIsToUpdate(configId, config)) {\r\n        return { configId: config.configId, userData: passedUserData };\r\n      }\r\n\r\n      const alreadySavedUserData =\r\n        this.storagePersistenceService.read('userData', config) || null;\r\n\r\n      return { configId: config.configId, userData: alreadySavedUserData };\r\n    });\r\n\r\n    return {\r\n      userData: null,\r\n      allUserData,\r\n    };\r\n  }\r\n\r\n  private composeSingleUserDataResult(\r\n    configId: string,\r\n    userData: any\r\n  ): UserDataResult {\r\n    return {\r\n      userData,\r\n      allUserData: [{ configId, userData }],\r\n    };\r\n  }\r\n\r\n  private currentConfigIsToUpdate(\r\n    configId: string,\r\n    config: OpenIdConfiguration\r\n  ): boolean {\r\n    return config.configId === configId;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthStateService } from '../auth-state/auth-state.service';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { UserService } from '../user-data/user.service';\r\nimport { FlowsDataService } from './flows-data.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ResetAuthDataService {\r\n  constructor(\r\n    private readonly authStateService: AuthStateService,\r\n    private readonly flowsDataService: FlowsDataService,\r\n    private readonly userService: UserService,\r\n    private readonly loggerService: LoggerService\r\n  ) {}\r\n\r\n  resetAuthorizationData(\r\n    currentConfiguration: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): void {\r\n    this.userService.resetUserDataInStore(currentConfiguration, allConfigs);\r\n    this.flowsDataService.resetStorageFlowData(currentConfiguration);\r\n    this.authStateService.setUnauthenticatedAndFireEvent(\r\n      currentConfiguration,\r\n      allConfigs\r\n    );\r\n\r\n    this.loggerService.logDebug(\r\n      currentConfiguration,\r\n      'Local Login information cleaned up and event fired'\r\n    );\r\n  }\r\n}\r\n","import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { CallbackContext } from '../callback-context';\r\nimport { FlowsDataService } from '../flows-data.service';\r\nimport { ResetAuthDataService } from '../reset-auth-data.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ImplicitFlowCallbackHandlerService {\r\n  constructor(\r\n    private readonly resetAuthDataService: ResetAuthDataService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly flowsDataService: FlowsDataService,\r\n    @Inject(DOCUMENT) private readonly document: Document\r\n  ) {}\r\n\r\n  // STEP 1 Code Flow\r\n  // STEP 1 Implicit Flow\r\n  implicitFlowCallback(\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    hash?: string\r\n  ): Observable<CallbackContext> {\r\n    const isRenewProcessData =\r\n      this.flowsDataService.isSilentRenewRunning(config);\r\n\r\n    this.loggerService.logDebug(config, 'BEGIN callback, no auth data');\r\n    if (!isRenewProcessData) {\r\n      this.resetAuthDataService.resetAuthorizationData(config, allConfigs);\r\n    }\r\n\r\n    hash = hash || this.document.location.hash.substring(1);\r\n\r\n    const authResult: any = hash\r\n      .split('&')\r\n      .reduce((resultData: any, item: string) => {\r\n        const parts = item.split('=');\r\n\r\n        resultData[parts.shift() as string] = parts.join('=');\r\n\r\n        return resultData;\r\n      }, {});\r\n\r\n    const callbackContext = {\r\n      code: null,\r\n      refreshToken: null,\r\n      state: null,\r\n      sessionState: null,\r\n      authResult,\r\n      isRenewProcess: isRenewProcessData,\r\n      jwtKeys: null,\r\n      validationResult: null,\r\n      existingIdToken: null,\r\n    };\r\n\r\n    return of(callbackContext);\r\n  }\r\n}\r\n","import { HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, retry } from 'rxjs/operators';\r\nimport { DataService } from '../api/data.service';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\r\nimport { JwtKeys } from '../validation/jwtkeys';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SigninKeyDataService {\r\n  constructor(\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly dataService: DataService\r\n  ) {}\r\n\r\n  getSigningKeys(\r\n    currentConfiguration: OpenIdConfiguration\r\n  ): Observable<JwtKeys> {\r\n    const authWellKnownEndPoints = this.storagePersistenceService.read(\r\n      'authWellKnownEndPoints',\r\n      currentConfiguration\r\n    );\r\n    const jwksUri = authWellKnownEndPoints?.jwksUri;\r\n\r\n    if (!jwksUri) {\r\n      const error = `getSigningKeys: authWellKnownEndpoints.jwksUri is: '${jwksUri}'`;\r\n\r\n      this.loggerService.logWarning(currentConfiguration, error);\r\n\r\n      return throwError(() => new Error(error));\r\n    }\r\n\r\n    this.loggerService.logDebug(\r\n      currentConfiguration,\r\n      'Getting signinkeys from ',\r\n      jwksUri\r\n    );\r\n\r\n    return this.dataService.get<JwtKeys>(jwksUri, currentConfiguration).pipe(\r\n      retry(2),\r\n      catchError((e) => this.handleErrorGetSigningKeys(e, currentConfiguration))\r\n    );\r\n  }\r\n\r\n  private handleErrorGetSigningKeys(\r\n    errorResponse: HttpResponse<any> | any,\r\n    currentConfiguration: OpenIdConfiguration\r\n  ): Observable<never> {\r\n    let errMsg = '';\r\n\r\n    if (errorResponse instanceof HttpResponse) {\r\n      const body = errorResponse.body || {};\r\n      const err = JSON.stringify(body);\r\n      const { status, statusText } = errorResponse;\r\n\r\n      errMsg = `${status || ''} - ${statusText || ''} ${err || ''}`;\r\n    } else {\r\n      const { message } = errorResponse;\r\n\r\n      errMsg = !!message ? message : `${errorResponse}`;\r\n    }\r\n    this.loggerService.logError(currentConfiguration, errMsg);\r\n\r\n    return throwError(() => new Error(errMsg));\r\n  }\r\n}\r\n","import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { catchError, switchMap, tap } from 'rxjs/operators';\r\nimport { AuthStateService } from '../../auth-state/auth-state.service';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { StoragePersistenceService } from '../../storage/storage-persistence.service';\r\nimport { JwtKeys } from '../../validation/jwtkeys';\r\nimport { ValidationResult } from '../../validation/validation-result';\r\nimport { CallbackContext } from '../callback-context';\r\nimport { FlowsDataService } from '../flows-data.service';\r\nimport { ResetAuthDataService } from '../reset-auth-data.service';\r\nimport { SigninKeyDataService } from '../signin-key-data.service';\r\n\r\nconst JWT_KEYS = 'jwtKeys';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class HistoryJwtKeysCallbackHandlerService {\r\n  constructor(\r\n    private readonly loggerService: LoggerService,\r\n    private readonly authStateService: AuthStateService,\r\n    private readonly flowsDataService: FlowsDataService,\r\n    private readonly signInKeyDataService: SigninKeyDataService,\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly resetAuthDataService: ResetAuthDataService,\r\n    @Inject(DOCUMENT) private readonly document: Document\r\n  ) {}\r\n\r\n  // STEP 3 Code Flow, STEP 2 Implicit Flow, STEP 3 Refresh Token\r\n  callbackHistoryAndResetJwtKeys(\r\n    callbackContext: CallbackContext,\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): Observable<CallbackContext> {\r\n    if (!this.responseHasIdToken(callbackContext)) {\r\n      const existingIdToken = this.storagePersistenceService.getIdToken(config);\r\n\r\n      callbackContext.authResult = {\r\n        ...callbackContext.authResult,\r\n        id_token: existingIdToken,\r\n      };\r\n    }\r\n\r\n    this.storagePersistenceService.write(\r\n      'authnResult',\r\n      callbackContext.authResult,\r\n      config\r\n    );\r\n\r\n    if (\r\n      config.allowUnsafeReuseRefreshToken &&\r\n      callbackContext.authResult.refresh_token\r\n    ) {\r\n      this.storagePersistenceService.write(\r\n        'reusable_refresh_token',\r\n        callbackContext.authResult.refresh_token,\r\n        config\r\n      );\r\n    }\r\n\r\n    if (\r\n      this.historyCleanUpTurnedOn(config) &&\r\n      !callbackContext.isRenewProcess\r\n    ) {\r\n      this.resetBrowserHistory();\r\n    } else {\r\n      this.loggerService.logDebug(config, 'history clean up inactive');\r\n    }\r\n\r\n    if (callbackContext.authResult.error) {\r\n      const errorMessage = `AuthCallback AuthResult came with error: ${callbackContext.authResult.error}`;\r\n\r\n      this.loggerService.logDebug(config, errorMessage);\r\n      this.resetAuthDataService.resetAuthorizationData(config, allConfigs);\r\n      this.flowsDataService.setNonce('', config);\r\n      this.handleResultErrorFromCallback(\r\n        callbackContext.authResult,\r\n        callbackContext.isRenewProcess\r\n      );\r\n\r\n      return throwError(() => new Error(errorMessage));\r\n    }\r\n\r\n    this.loggerService.logDebug(\r\n      config,\r\n      `AuthResult '${JSON.stringify(callbackContext.authResult, null, 2)}'.\r\n      AuthCallback created, begin token validation`\r\n    );\r\n\r\n    return this.signInKeyDataService.getSigningKeys(config).pipe(\r\n      tap((jwtKeys: JwtKeys) => this.storeSigningKeys(jwtKeys, config)),\r\n      catchError((err) => {\r\n        // fallback: try to load jwtKeys from storage\r\n        const storedJwtKeys = this.readSigningKeys(config);\r\n\r\n        if (!!storedJwtKeys) {\r\n          this.loggerService.logWarning(\r\n            config,\r\n            `Failed to retrieve signing keys, fallback to stored keys`\r\n          );\r\n\r\n          return of(storedJwtKeys);\r\n        }\r\n\r\n        return throwError(() => new Error(err));\r\n      }),\r\n      switchMap((jwtKeys) => {\r\n        if (jwtKeys) {\r\n          callbackContext.jwtKeys = jwtKeys;\r\n\r\n          return of(callbackContext);\r\n        }\r\n\r\n        const errorMessage = `Failed to retrieve signing key`;\r\n\r\n        this.loggerService.logWarning(config, errorMessage);\r\n\r\n        return throwError(() => new Error(errorMessage));\r\n      }),\r\n      catchError((err) => {\r\n        const errorMessage = `Failed to retrieve signing key with error: ${err}`;\r\n\r\n        this.loggerService.logWarning(config, errorMessage);\r\n\r\n        return throwError(() => new Error(errorMessage));\r\n      })\r\n    );\r\n  }\r\n\r\n  private responseHasIdToken(callbackContext: CallbackContext): boolean {\r\n    return !!callbackContext?.authResult?.id_token;\r\n  }\r\n\r\n  private handleResultErrorFromCallback(\r\n    result: any,\r\n    isRenewProcess: boolean\r\n  ): void {\r\n    let validationResult = ValidationResult.SecureTokenServerError;\r\n\r\n    if ((result.error as string) === 'login_required') {\r\n      validationResult = ValidationResult.LoginRequired;\r\n    }\r\n\r\n    this.authStateService.updateAndPublishAuthState({\r\n      isAuthenticated: false,\r\n      validationResult,\r\n      isRenewProcess,\r\n    });\r\n  }\r\n\r\n  private historyCleanUpTurnedOn(config: OpenIdConfiguration): boolean {\r\n    const { historyCleanupOff } = config;\r\n\r\n    return !historyCleanupOff;\r\n  }\r\n\r\n  private resetBrowserHistory(): void {\r\n    this.document.defaultView.history.replaceState(\r\n      {},\r\n      this.document.title,\r\n      this.document.defaultView.location.origin +\r\n        this.document.defaultView.location.pathname\r\n    );\r\n  }\r\n\r\n  private storeSigningKeys(\r\n    jwtKeys: JwtKeys,\r\n    config: OpenIdConfiguration\r\n  ): void {\r\n    this.storagePersistenceService.write(JWT_KEYS, jwtKeys, config);\r\n  }\r\n\r\n  private readSigningKeys(config: OpenIdConfiguration): any {\r\n    return this.storagePersistenceService.read(JWT_KEYS, config);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { catchError, switchMap } from 'rxjs/operators';\r\nimport { AuthStateService } from '../../auth-state/auth-state.service';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { UserService } from '../../user-data/user.service';\r\nimport { StateValidationResult } from '../../validation/state-validation-result';\r\nimport { CallbackContext } from '../callback-context';\r\nimport { FlowsDataService } from '../flows-data.service';\r\nimport { ResetAuthDataService } from '../reset-auth-data.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserCallbackHandlerService {\r\n  constructor(\r\n    private readonly loggerService: LoggerService,\r\n    private readonly authStateService: AuthStateService,\r\n    private readonly flowsDataService: FlowsDataService,\r\n    private readonly userService: UserService,\r\n    private readonly resetAuthDataService: ResetAuthDataService\r\n  ) {}\r\n\r\n  // STEP 5 userData\r\n  callbackUser(\r\n    callbackContext: CallbackContext,\r\n    configuration: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): Observable<CallbackContext> {\r\n    const { isRenewProcess, validationResult, authResult, refreshToken } =\r\n      callbackContext;\r\n    const { autoUserInfo, renewUserInfoAfterTokenRenew } = configuration;\r\n\r\n    if (!autoUserInfo) {\r\n      if (!isRenewProcess || renewUserInfoAfterTokenRenew) {\r\n        // userData is set to the id_token decoded, auto get user data set to false\r\n        if (validationResult.decodedIdToken) {\r\n          this.userService.setUserDataToStore(\r\n            validationResult.decodedIdToken,\r\n            configuration,\r\n            allConfigs\r\n          );\r\n        }\r\n      }\r\n\r\n      if (!isRenewProcess && !refreshToken) {\r\n        this.flowsDataService.setSessionState(\r\n          authResult.session_state,\r\n          configuration\r\n        );\r\n      }\r\n\r\n      this.publishAuthState(validationResult, isRenewProcess);\r\n\r\n      return of(callbackContext);\r\n    }\r\n\r\n    return this.userService\r\n      .getAndPersistUserDataInStore(\r\n        configuration,\r\n        allConfigs,\r\n        isRenewProcess,\r\n        validationResult.idToken,\r\n        validationResult.decodedIdToken\r\n      )\r\n      .pipe(\r\n        switchMap((userData) => {\r\n          if (!!userData) {\r\n            if (!refreshToken) {\r\n              this.flowsDataService.setSessionState(\r\n                authResult.session_state,\r\n                configuration\r\n              );\r\n            }\r\n\r\n            this.publishAuthState(validationResult, isRenewProcess);\r\n\r\n            return of(callbackContext);\r\n          } else {\r\n            this.resetAuthDataService.resetAuthorizationData(\r\n              configuration,\r\n              allConfigs\r\n            );\r\n            this.publishUnauthenticatedState(validationResult, isRenewProcess);\r\n            const errorMessage = `Called for userData but they were ${userData}`;\r\n\r\n            this.loggerService.logWarning(configuration, errorMessage);\r\n\r\n            return throwError(() => new Error(errorMessage));\r\n          }\r\n        }),\r\n        catchError((err) => {\r\n          const errorMessage = `Failed to retrieve user info with error:  ${err}`;\r\n\r\n          this.loggerService.logWarning(configuration, errorMessage);\r\n\r\n          return throwError(() => new Error(errorMessage));\r\n        })\r\n      );\r\n  }\r\n\r\n  private publishAuthState(\r\n    stateValidationResult: StateValidationResult,\r\n    isRenewProcess: boolean\r\n  ): void {\r\n    this.authStateService.updateAndPublishAuthState({\r\n      isAuthenticated: true,\r\n      validationResult: stateValidationResult.state,\r\n      isRenewProcess,\r\n    });\r\n  }\r\n\r\n  private publishUnauthenticatedState(\r\n    stateValidationResult: StateValidationResult,\r\n    isRenewProcess: boolean\r\n  ): void {\r\n    this.authStateService.updateAndPublishAuthState({\r\n      isAuthenticated: false,\r\n      validationResult: stateValidationResult.state,\r\n      isRenewProcess,\r\n    });\r\n  }\r\n}\r\n","import { ValidationResult } from './validation-result';\n\nexport class StateValidationResult {\n  constructor(\n    public accessToken = '',\n    public idToken = '',\n    public authResponseIsValid = false,\n    public decodedIdToken: any = {\n      at_hash: '',\n    },\n    public state: ValidationResult = ValidationResult.NotSet\n  ) {}\n}\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class EqualityService {\r\n  isStringEqualOrNonOrderedArrayEqual(\r\n    value1: string | any[],\r\n    value2: string | any[]\r\n  ): boolean {\r\n    if (this.isNullOrUndefined(value1)) {\r\n      return false;\r\n    }\r\n\r\n    if (this.isNullOrUndefined(value2)) {\r\n      return false;\r\n    }\r\n\r\n    if (this.oneValueIsStringAndTheOtherIsArray(value1, value2)) {\r\n      return false;\r\n    }\r\n\r\n    if (this.bothValuesAreStrings(value1, value2)) {\r\n      return value1 === value2;\r\n    }\r\n\r\n    return this.arraysHaveEqualContent(value1 as any[], value2 as any[]);\r\n  }\r\n\r\n  areEqual(\r\n    value1: string | any[] | any | null | undefined,\r\n    value2: string | any[] | any | null | undefined\r\n  ): boolean {\r\n    if (!value1 || !value2) {\r\n      return false;\r\n    }\r\n\r\n    if (this.bothValuesAreArrays(value1, value2)) {\r\n      return this.arraysStrictEqual(value1 as any[], value2 as any[]);\r\n    }\r\n\r\n    if (this.bothValuesAreStrings(value1, value2)) {\r\n      return value1 === value2;\r\n    }\r\n\r\n    if (this.bothValuesAreObjects(value1, value2)) {\r\n      return (\r\n        JSON.stringify(value1).toLowerCase() ===\r\n        JSON.stringify(value2).toLowerCase()\r\n      );\r\n    }\r\n\r\n    if (this.oneValueIsStringAndTheOtherIsArray(value1, value2)) {\r\n      if (Array.isArray(value1) && this.valueIsString(value2)) {\r\n        return value1[0] === value2;\r\n      }\r\n      if (Array.isArray(value2) && this.valueIsString(value1)) {\r\n        return value2[0] === value1;\r\n      }\r\n    }\r\n\r\n    return value1 === value2;\r\n  }\r\n\r\n  private oneValueIsStringAndTheOtherIsArray(\r\n    value1: string | any | any[],\r\n    value2: string | any | any[]\r\n  ): boolean {\r\n    return (\r\n      (Array.isArray(value1) && this.valueIsString(value2)) ||\r\n      (Array.isArray(value2) && this.valueIsString(value1))\r\n    );\r\n  }\r\n\r\n  private bothValuesAreObjects(\r\n    value1: string | any | any[],\r\n    value2: string | any | any[]\r\n  ): boolean {\r\n    return this.valueIsObject(value1) && this.valueIsObject(value2);\r\n  }\r\n\r\n  private bothValuesAreStrings(\r\n    value1: string | any | any[],\r\n    value2: string | any | any[]\r\n  ): boolean {\r\n    return this.valueIsString(value1) && this.valueIsString(value2);\r\n  }\r\n\r\n  private bothValuesAreArrays(\r\n    value1: string | any | any[],\r\n    value2: string | any | any[]\r\n  ): boolean {\r\n    return Array.isArray(value1) && Array.isArray(value2);\r\n  }\r\n\r\n  private valueIsString(value: any): boolean {\r\n    return typeof value === 'string' || value instanceof String;\r\n  }\r\n\r\n  private valueIsObject(value: any): boolean {\r\n    return typeof value === 'object';\r\n  }\r\n\r\n  private arraysStrictEqual(arr1: Array<string>, arr2: Array<string>): boolean {\r\n    if (arr1.length !== arr2.length) {\r\n      return false;\r\n    }\r\n\r\n    for (let i = arr1.length; i--; ) {\r\n      if (arr1[i] !== arr2[i]) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private arraysHaveEqualContent(\r\n    arr1: Array<string>,\r\n    arr2: Array<string>\r\n  ): boolean {\r\n    if (arr1.length !== arr2.length) {\r\n      return false;\r\n    }\r\n\r\n    return arr1.some((v) => arr2.includes(v));\r\n  }\r\n\r\n  private isNullOrUndefined(val: any): boolean {\r\n    return val === null || val === undefined;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { CallbackContext } from '../flows/callback-context';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\r\nimport { EqualityService } from '../utils/equality/equality.service';\r\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\r\nimport { TokenHelperService } from '../utils/tokenHelper/token-helper.service';\r\nimport { StateValidationResult } from './state-validation-result';\r\nimport { TokenValidationService } from './token-validation.service';\r\nimport { ValidationResult } from './validation-result';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class StateValidationService {\r\n  constructor(\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly tokenValidationService: TokenValidationService,\r\n    private readonly tokenHelperService: TokenHelperService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly equalityService: EqualityService,\r\n    private readonly flowHelper: FlowHelper\r\n  ) {}\r\n\r\n  getValidatedStateResult(\r\n    callbackContext: CallbackContext,\r\n    configuration: OpenIdConfiguration\r\n  ): Observable<StateValidationResult> {\r\n    if (!callbackContext || callbackContext.authResult.error) {\r\n      return of(new StateValidationResult('', '', false, {}));\r\n    }\r\n\r\n    return this.validateState(callbackContext, configuration);\r\n  }\r\n\r\n  private validateState(\r\n    callbackContext: CallbackContext,\r\n    configuration: OpenIdConfiguration\r\n  ): Observable<StateValidationResult> {\r\n    const toReturn = new StateValidationResult();\r\n    const authStateControl = this.storagePersistenceService.read(\r\n      'authStateControl',\r\n      configuration\r\n    );\r\n\r\n    if (\r\n      !this.tokenValidationService.validateStateFromHashCallback(\r\n        callbackContext.authResult.state,\r\n        authStateControl,\r\n        configuration\r\n      )\r\n    ) {\r\n      this.loggerService.logWarning(\r\n        configuration,\r\n        'authCallback incorrect state'\r\n      );\r\n      toReturn.state = ValidationResult.StatesDoNotMatch;\r\n      this.handleUnsuccessfulValidation(configuration);\r\n\r\n      return of(toReturn);\r\n    }\r\n\r\n    const isCurrentFlowImplicitFlowWithAccessToken =\r\n      this.flowHelper.isCurrentFlowImplicitFlowWithAccessToken(configuration);\r\n    const isCurrentFlowCodeFlow =\r\n      this.flowHelper.isCurrentFlowCodeFlow(configuration);\r\n\r\n    if (isCurrentFlowImplicitFlowWithAccessToken || isCurrentFlowCodeFlow) {\r\n      toReturn.accessToken = callbackContext.authResult.access_token;\r\n    }\r\n\r\n    const disableIdTokenValidation = configuration.disableIdTokenValidation;\r\n\r\n    if (disableIdTokenValidation) {\r\n      toReturn.state = ValidationResult.Ok;\r\n      // TODO TESTING\r\n      toReturn.authResponseIsValid = true;\r\n\r\n      return of(toReturn);\r\n    }\r\n\r\n    const isInRefreshTokenFlow =\r\n      callbackContext.isRenewProcess && !!callbackContext.refreshToken;\r\n    const hasIdToken = !!callbackContext.authResult.id_token;\r\n\r\n    if (isInRefreshTokenFlow && !hasIdToken) {\r\n      toReturn.state = ValidationResult.Ok;\r\n      // TODO TESTING\r\n      toReturn.authResponseIsValid = true;\r\n\r\n      return of(toReturn);\r\n    }\r\n\r\n    if (callbackContext.authResult.id_token) {\r\n      const {\r\n        clientId,\r\n        issValidationOff,\r\n        maxIdTokenIatOffsetAllowedInSeconds,\r\n        disableIatOffsetValidation,\r\n        ignoreNonceAfterRefresh,\r\n        renewTimeBeforeTokenExpiresInSeconds,\r\n      } = configuration;\r\n\r\n      toReturn.idToken = callbackContext.authResult.id_token;\r\n      toReturn.decodedIdToken = this.tokenHelperService.getPayloadFromToken(\r\n        toReturn.idToken,\r\n        false,\r\n        configuration\r\n      );\r\n\r\n      return this.tokenValidationService\r\n        .validateSignatureIdToken(\r\n          toReturn.idToken,\r\n          callbackContext.jwtKeys,\r\n          configuration\r\n        )\r\n        .pipe(\r\n          mergeMap((isSignatureIdTokenValid: boolean) => {\r\n            if (!isSignatureIdTokenValid) {\r\n              this.loggerService.logDebug(\r\n                configuration,\r\n                'authCallback Signature validation failed id_token'\r\n              );\r\n              toReturn.state = ValidationResult.SignatureFailed;\r\n              this.handleUnsuccessfulValidation(configuration);\r\n\r\n              return of(toReturn);\r\n            }\r\n\r\n            const authNonce = this.storagePersistenceService.read(\r\n              'authNonce',\r\n              configuration\r\n            );\r\n\r\n            if (\r\n              !this.tokenValidationService.validateIdTokenNonce(\r\n                toReturn.decodedIdToken,\r\n                authNonce,\r\n                ignoreNonceAfterRefresh,\r\n                configuration\r\n              )\r\n            ) {\r\n              this.loggerService.logWarning(\r\n                configuration,\r\n                'authCallback incorrect nonce, did you call the checkAuth() method multiple times?'\r\n              );\r\n              toReturn.state = ValidationResult.IncorrectNonce;\r\n              this.handleUnsuccessfulValidation(configuration);\r\n\r\n              return of(toReturn);\r\n            }\r\n\r\n            if (\r\n              !this.tokenValidationService.validateRequiredIdToken(\r\n                toReturn.decodedIdToken,\r\n                configuration\r\n              )\r\n            ) {\r\n              this.loggerService.logDebug(\r\n                configuration,\r\n                'authCallback Validation, one of the REQUIRED properties missing from id_token'\r\n              );\r\n              toReturn.state = ValidationResult.RequiredPropertyMissing;\r\n              this.handleUnsuccessfulValidation(configuration);\r\n\r\n              return of(toReturn);\r\n            }\r\n\r\n            if (\r\n              !isInRefreshTokenFlow &&\r\n              !this.tokenValidationService.validateIdTokenIatMaxOffset(\r\n                toReturn.decodedIdToken,\r\n                maxIdTokenIatOffsetAllowedInSeconds,\r\n                disableIatOffsetValidation,\r\n                configuration\r\n              )\r\n            ) {\r\n              this.loggerService.logWarning(\r\n                configuration,\r\n                'authCallback Validation, iat rejected id_token was issued too far away from the current time'\r\n              );\r\n              toReturn.state = ValidationResult.MaxOffsetExpired;\r\n              this.handleUnsuccessfulValidation(configuration);\r\n\r\n              return of(toReturn);\r\n            }\r\n\r\n            const authWellKnownEndPoints = this.storagePersistenceService.read(\r\n              'authWellKnownEndPoints',\r\n              configuration\r\n            );\r\n\r\n            if (authWellKnownEndPoints) {\r\n              if (issValidationOff) {\r\n                this.loggerService.logDebug(\r\n                  configuration,\r\n                  'iss validation is turned off, this is not recommended!'\r\n                );\r\n              } else if (\r\n                !issValidationOff &&\r\n                !this.tokenValidationService.validateIdTokenIss(\r\n                  toReturn.decodedIdToken,\r\n                  authWellKnownEndPoints.issuer,\r\n                  configuration\r\n                )\r\n              ) {\r\n                this.loggerService.logWarning(\r\n                  configuration,\r\n                  'authCallback incorrect iss does not match authWellKnownEndpoints issuer'\r\n                );\r\n                toReturn.state = ValidationResult.IssDoesNotMatchIssuer;\r\n                this.handleUnsuccessfulValidation(configuration);\r\n\r\n                return of(toReturn);\r\n              }\r\n            } else {\r\n              this.loggerService.logWarning(\r\n                configuration,\r\n                'authWellKnownEndpoints is undefined'\r\n              );\r\n              toReturn.state = ValidationResult.NoAuthWellKnownEndPoints;\r\n              this.handleUnsuccessfulValidation(configuration);\r\n\r\n              return of(toReturn);\r\n            }\r\n\r\n            if (\r\n              !this.tokenValidationService.validateIdTokenAud(\r\n                toReturn.decodedIdToken,\r\n                clientId,\r\n                configuration\r\n              )\r\n            ) {\r\n              this.loggerService.logWarning(\r\n                configuration,\r\n                'authCallback incorrect aud'\r\n              );\r\n              toReturn.state = ValidationResult.IncorrectAud;\r\n              this.handleUnsuccessfulValidation(configuration);\r\n\r\n              return of(toReturn);\r\n            }\r\n\r\n            if (\r\n              !this.tokenValidationService.validateIdTokenAzpExistsIfMoreThanOneAud(\r\n                toReturn.decodedIdToken\r\n              )\r\n            ) {\r\n              this.loggerService.logWarning(\r\n                configuration,\r\n                'authCallback missing azp'\r\n              );\r\n              toReturn.state = ValidationResult.IncorrectAzp;\r\n              this.handleUnsuccessfulValidation(configuration);\r\n\r\n              return of(toReturn);\r\n            }\r\n\r\n            if (\r\n              !this.tokenValidationService.validateIdTokenAzpValid(\r\n                toReturn.decodedIdToken,\r\n                clientId\r\n              )\r\n            ) {\r\n              this.loggerService.logWarning(\r\n                configuration,\r\n                'authCallback incorrect azp'\r\n              );\r\n              toReturn.state = ValidationResult.IncorrectAzp;\r\n              this.handleUnsuccessfulValidation(configuration);\r\n\r\n              return of(toReturn);\r\n            }\r\n\r\n            if (\r\n              !this.isIdTokenAfterRefreshTokenRequestValid(\r\n                callbackContext,\r\n                toReturn.decodedIdToken,\r\n                configuration\r\n              )\r\n            ) {\r\n              this.loggerService.logWarning(\r\n                configuration,\r\n                'authCallback pre, post id_token claims do not match in refresh'\r\n              );\r\n              toReturn.state =\r\n                ValidationResult.IncorrectIdTokenClaimsAfterRefresh;\r\n              this.handleUnsuccessfulValidation(configuration);\r\n\r\n              return of(toReturn);\r\n            }\r\n\r\n            if (\r\n              !isInRefreshTokenFlow &&\r\n              !this.tokenValidationService.validateIdTokenExpNotExpired(\r\n                toReturn.decodedIdToken,\r\n                configuration,\r\n                renewTimeBeforeTokenExpiresInSeconds\r\n              )\r\n            ) {\r\n              this.loggerService.logWarning(\r\n                configuration,\r\n                'authCallback id token expired'\r\n              );\r\n              toReturn.state = ValidationResult.TokenExpired;\r\n              this.handleUnsuccessfulValidation(configuration);\r\n\r\n              return of(toReturn);\r\n            }\r\n\r\n            return this.validateDefault(\r\n              isCurrentFlowImplicitFlowWithAccessToken,\r\n              isCurrentFlowCodeFlow,\r\n              toReturn,\r\n              configuration,\r\n              callbackContext\r\n            );\r\n          })\r\n        );\r\n    } else {\r\n      this.loggerService.logDebug(\r\n        configuration,\r\n        'No id_token found, skipping id_token validation'\r\n      );\r\n    }\r\n\r\n    return this.validateDefault(\r\n      isCurrentFlowImplicitFlowWithAccessToken,\r\n      isCurrentFlowCodeFlow,\r\n      toReturn,\r\n      configuration,\r\n      callbackContext\r\n    );\r\n  }\r\n\r\n  private validateDefault(\r\n    isCurrentFlowImplicitFlowWithAccessToken: boolean,\r\n    isCurrentFlowCodeFlow: boolean,\r\n    toReturn: StateValidationResult,\r\n    configuration: OpenIdConfiguration,\r\n    callbackContext: CallbackContext\r\n  ): Observable<StateValidationResult> {\r\n    // flow id_token\r\n    if (!isCurrentFlowImplicitFlowWithAccessToken && !isCurrentFlowCodeFlow) {\r\n      toReturn.authResponseIsValid = true;\r\n      toReturn.state = ValidationResult.Ok;\r\n      this.handleSuccessfulValidation(configuration);\r\n      this.handleUnsuccessfulValidation(configuration);\r\n\r\n      return of(toReturn);\r\n    }\r\n\r\n    // only do check if id_token returned, no always the case when using refresh tokens\r\n    if (callbackContext.authResult.id_token) {\r\n      const idTokenHeader = this.tokenHelperService.getHeaderFromToken(\r\n        toReturn.idToken,\r\n        false,\r\n        configuration\r\n      );\r\n\r\n      if (\r\n        isCurrentFlowCodeFlow &&\r\n        !(toReturn.decodedIdToken.at_hash as string)\r\n      ) {\r\n        this.loggerService.logDebug(\r\n          configuration,\r\n          'Code Flow active, and no at_hash in the id_token, skipping check!'\r\n        );\r\n      } else {\r\n        return this.tokenValidationService\r\n          .validateIdTokenAtHash(\r\n            toReturn.accessToken,\r\n            toReturn.decodedIdToken.at_hash,\r\n            idTokenHeader.alg, // 'RS256'\r\n            configuration\r\n          )\r\n          .pipe(\r\n            map((valid: boolean) => {\r\n              if (!valid || !toReturn.accessToken) {\r\n                this.loggerService.logWarning(\r\n                  configuration,\r\n                  'authCallback incorrect at_hash'\r\n                );\r\n                toReturn.state = ValidationResult.IncorrectAtHash;\r\n                this.handleUnsuccessfulValidation(configuration);\r\n\r\n                return toReturn;\r\n              } else {\r\n                toReturn.authResponseIsValid = true;\r\n                toReturn.state = ValidationResult.Ok;\r\n                this.handleSuccessfulValidation(configuration);\r\n\r\n                return toReturn;\r\n              }\r\n            })\r\n          );\r\n      }\r\n    }\r\n\r\n    toReturn.authResponseIsValid = true;\r\n    toReturn.state = ValidationResult.Ok;\r\n    this.handleSuccessfulValidation(configuration);\r\n\r\n    return of(toReturn);\r\n  }\r\n\r\n  private isIdTokenAfterRefreshTokenRequestValid(\r\n    callbackContext: CallbackContext,\r\n    newIdToken: any,\r\n    configuration: OpenIdConfiguration\r\n  ): boolean {\r\n    const { useRefreshToken, disableRefreshIdTokenAuthTimeValidation } =\r\n      configuration;\r\n\r\n    if (!useRefreshToken) {\r\n      return true;\r\n    }\r\n\r\n    if (!callbackContext.existingIdToken) {\r\n      return true;\r\n    }\r\n\r\n    const decodedIdToken = this.tokenHelperService.getPayloadFromToken(\r\n      callbackContext.existingIdToken,\r\n      false,\r\n      configuration\r\n    );\r\n\r\n    // Upon successful validation of the Refresh Token, the response body is the Token Response of Section 3.1.3.3\r\n    // except that it might not contain an id_token.\r\n\r\n    // If an ID Token is returned as a result of a token refresh request, the following requirements apply:\r\n\r\n    // its iss Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\r\n    if (decodedIdToken.iss !== newIdToken.iss) {\r\n      this.loggerService.logDebug(\r\n        configuration,\r\n        `iss do not match: ${decodedIdToken.iss} ${newIdToken.iss}`\r\n      );\r\n\r\n      return false;\r\n    }\r\n    // its azp Claim Value MUST be the same as in the ID Token issued when the original authentication occurred;\r\n    //   if no azp Claim was present in the original ID Token, one MUST NOT be present in the new ID Token, and\r\n    // otherwise, the same rules apply as apply when issuing an ID Token at the time of the original authentication.\r\n    if (decodedIdToken.azp !== newIdToken.azp) {\r\n      this.loggerService.logDebug(\r\n        configuration,\r\n        `azp do not match: ${decodedIdToken.azp} ${newIdToken.azp}`\r\n      );\r\n\r\n      return false;\r\n    }\r\n    // its sub Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\r\n    if (decodedIdToken.sub !== newIdToken.sub) {\r\n      this.loggerService.logDebug(\r\n        configuration,\r\n        `sub do not match: ${decodedIdToken.sub} ${newIdToken.sub}`\r\n      );\r\n\r\n      return false;\r\n    }\r\n\r\n    // its aud Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\r\n    if (\r\n      !this.equalityService.isStringEqualOrNonOrderedArrayEqual(\r\n        decodedIdToken?.aud,\r\n        newIdToken?.aud\r\n      )\r\n    ) {\r\n      this.loggerService.logDebug(\r\n        configuration,\r\n        `aud in new id_token is not valid: '${decodedIdToken?.aud}' '${newIdToken.aud}'`\r\n      );\r\n\r\n      return false;\r\n    }\r\n\r\n    if (disableRefreshIdTokenAuthTimeValidation) {\r\n      return true;\r\n    }\r\n\r\n    // its iat Claim MUST represent the time that the new ID Token is issued,\r\n    // if the ID Token contains an auth_time Claim, its value MUST represent the time of the original authentication\r\n    // - not the time that the new ID token is issued,\r\n    if (decodedIdToken.auth_time !== newIdToken.auth_time) {\r\n      this.loggerService.logDebug(\r\n        configuration,\r\n        `auth_time do not match: ${decodedIdToken.auth_time} ${newIdToken.auth_time}`\r\n      );\r\n\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private handleSuccessfulValidation(configuration: OpenIdConfiguration): void {\r\n    const { autoCleanStateAfterAuthentication } = configuration;\r\n\r\n    this.storagePersistenceService.write('authNonce', null, configuration);\r\n\r\n    if (autoCleanStateAfterAuthentication) {\r\n      this.storagePersistenceService.write(\r\n        'authStateControl',\r\n        '',\r\n        configuration\r\n      );\r\n    }\r\n    this.loggerService.logDebug(\r\n      configuration,\r\n      'authCallback token(s) validated, continue'\r\n    );\r\n  }\r\n\r\n  private handleUnsuccessfulValidation(\r\n    configuration: OpenIdConfiguration\r\n  ): void {\r\n    const { autoCleanStateAfterAuthentication } = configuration;\r\n\r\n    this.storagePersistenceService.write('authNonce', null, configuration);\r\n\r\n    if (autoCleanStateAfterAuthentication) {\r\n      this.storagePersistenceService.write(\r\n        'authStateControl',\r\n        '',\r\n        configuration\r\n      );\r\n    }\r\n    this.loggerService.logDebug(configuration, 'authCallback token(s) invalid');\r\n  }\r\n}\r\n","import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { AuthStateService } from '../../auth-state/auth-state.service';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { StateValidationResult } from '../../validation/state-validation-result';\r\nimport { StateValidationService } from '../../validation/state-validation.service';\r\nimport { CallbackContext } from '../callback-context';\r\nimport { ResetAuthDataService } from '../reset-auth-data.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class StateValidationCallbackHandlerService {\r\n  constructor(\r\n    private readonly loggerService: LoggerService,\r\n    private readonly stateValidationService: StateValidationService,\r\n    private readonly authStateService: AuthStateService,\r\n    private readonly resetAuthDataService: ResetAuthDataService,\r\n    @Inject(DOCUMENT) private readonly document: Document\r\n  ) {}\r\n\r\n  // STEP 4 All flows\r\n  callbackStateValidation(\r\n    callbackContext: CallbackContext,\r\n    configuration: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): Observable<CallbackContext> {\r\n    return this.stateValidationService\r\n      .getValidatedStateResult(callbackContext, configuration)\r\n      .pipe(\r\n        map((validationResult: StateValidationResult) => {\r\n          callbackContext.validationResult = validationResult;\r\n\r\n          if (validationResult.authResponseIsValid) {\r\n            this.authStateService.setAuthorizationData(\r\n              validationResult.accessToken,\r\n              callbackContext.authResult,\r\n              configuration,\r\n              allConfigs\r\n            );\r\n\r\n            return callbackContext;\r\n          } else {\r\n            const errorMessage = `authorizedCallback, token(s) validation failed, resetting. Hash: ${this.document.location.hash}`;\r\n\r\n            this.loggerService.logWarning(configuration, errorMessage);\r\n            this.resetAuthDataService.resetAuthorizationData(\r\n              configuration,\r\n              allConfigs\r\n            );\r\n            this.publishUnauthorizedState(\r\n              callbackContext.validationResult,\r\n              callbackContext.isRenewProcess\r\n            );\r\n\r\n            throw new Error(errorMessage);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  private publishUnauthorizedState(\r\n    stateValidationResult: StateValidationResult,\r\n    isRenewProcess: boolean\r\n  ): void {\r\n    this.authStateService.updateAndPublishAuthState({\r\n      isAuthenticated: false,\r\n      validationResult: stateValidationResult.state,\r\n      isRenewProcess,\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { AuthStateService } from '../../auth-state/auth-state.service';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { TokenValidationService } from '../../validation/token-validation.service';\r\nimport { CallbackContext } from '../callback-context';\r\nimport { FlowsDataService } from '../flows-data.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class RefreshSessionCallbackHandlerService {\r\n  constructor(\r\n    private readonly loggerService: LoggerService,\r\n    private readonly authStateService: AuthStateService,\r\n    private readonly flowsDataService: FlowsDataService\r\n  ) {}\r\n\r\n  // STEP 1 Refresh session\r\n  refreshSessionWithRefreshTokens(\r\n    config: OpenIdConfiguration\r\n  ): Observable<CallbackContext> {\r\n    const stateData =\r\n      this.flowsDataService.getExistingOrCreateAuthStateControl(config);\r\n\r\n    this.loggerService.logDebug(\r\n      config,\r\n      'RefreshSession created. Adding myautostate: ' + stateData\r\n    );\r\n    const refreshToken = this.authStateService.getRefreshToken(config);\r\n    const idToken = this.authStateService.getIdToken(config);\r\n\r\n    if (refreshToken) {\r\n      const callbackContext = {\r\n        code: null,\r\n        refreshToken,\r\n        state: stateData,\r\n        sessionState: null,\r\n        authResult: null,\r\n        isRenewProcess: true,\r\n        jwtKeys: null,\r\n        validationResult: null,\r\n        existingIdToken: idToken,\r\n      };\r\n\r\n      this.loggerService.logDebug(\r\n        config,\r\n        'found refresh code, obtaining new credentials with refresh code'\r\n      );\r\n      // Nonce is not used with refresh tokens; but Key cloak may send it anyway\r\n      this.flowsDataService.setNonce(\r\n        TokenValidationService.refreshTokenNoncePlaceholder,\r\n        config\r\n      );\r\n\r\n      return of(callbackContext);\r\n    } else {\r\n      const errorMessage = 'no refresh token found, please login';\r\n\r\n      this.loggerService.logError(config, errorMessage);\r\n\r\n      return throwError(() => new Error(errorMessage));\r\n    }\r\n  }\r\n}\r\n","import { HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, throwError, timer } from 'rxjs';\r\nimport { catchError, mergeMap, retryWhen, switchMap } from 'rxjs/operators';\r\nimport { DataService } from '../../api/data.service';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { StoragePersistenceService } from '../../storage/storage-persistence.service';\r\nimport { UrlService } from '../../utils/url/url.service';\r\nimport { AuthResult, CallbackContext } from '../callback-context';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class RefreshTokenCallbackHandlerService {\r\n  constructor(\r\n    private readonly urlService: UrlService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly dataService: DataService,\r\n    private readonly storagePersistenceService: StoragePersistenceService\r\n  ) {}\r\n\r\n  // STEP 2 Refresh Token\r\n  refreshTokensRequestTokens(\r\n    callbackContext: CallbackContext,\r\n    config: OpenIdConfiguration,\r\n    customParamsRefresh?: { [key: string]: string | number | boolean }\r\n  ): Observable<CallbackContext> {\r\n    let headers: HttpHeaders = new HttpHeaders();\r\n\r\n    headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n    const authWellknownEndpoints = this.storagePersistenceService.read(\r\n      'authWellKnownEndPoints',\r\n      config\r\n    );\r\n    const tokenEndpoint = authWellknownEndpoints?.tokenEndpoint;\r\n\r\n    if (!tokenEndpoint) {\r\n      return throwError(() => new Error('Token Endpoint not defined'));\r\n    }\r\n\r\n    const data = this.urlService.createBodyForCodeFlowRefreshTokensRequest(\r\n      callbackContext.refreshToken,\r\n      config,\r\n      customParamsRefresh\r\n    );\r\n\r\n    return this.dataService.post(tokenEndpoint, data, config, headers).pipe(\r\n      switchMap((response: AuthResult) => {\r\n        this.loggerService.logDebug(\r\n          config,\r\n          'token refresh response: ',\r\n          response\r\n        );\r\n\r\n        response.state = callbackContext.state;\r\n\r\n        callbackContext.authResult = response;\r\n\r\n        return of(callbackContext);\r\n      }),\r\n      retryWhen((error) => this.handleRefreshRetry(error, config)),\r\n      catchError((error) => {\r\n        const { authority } = config;\r\n        const errorMessage = `OidcService code request ${authority}`;\r\n\r\n        this.loggerService.logError(config, errorMessage, error);\r\n\r\n        return throwError(() => new Error(errorMessage));\r\n      })\r\n    );\r\n  }\r\n\r\n  private handleRefreshRetry(\r\n    errors: Observable<any>,\r\n    config: OpenIdConfiguration\r\n  ): Observable<any> {\r\n    return errors.pipe(\r\n      mergeMap((error) => {\r\n        // retry token refresh if there is no internet connection\r\n        if (\r\n          error &&\r\n          error instanceof HttpErrorResponse &&\r\n          error.error instanceof ProgressEvent &&\r\n          error.error.type === 'error'\r\n        ) {\r\n          const { authority, refreshTokenRetryInSeconds } = config;\r\n          const errorMessage = `OidcService code request ${authority} - no internet connection`;\r\n\r\n          this.loggerService.logWarning(config, errorMessage, error);\r\n\r\n          return timer(refreshTokenRetryInSeconds * 1000);\r\n        }\r\n\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { concatMap } from 'rxjs/operators';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { CallbackContext } from './callback-context';\r\nimport { CodeFlowCallbackHandlerService } from './callback-handling/code-flow-callback-handler.service';\r\nimport { HistoryJwtKeysCallbackHandlerService } from './callback-handling/history-jwt-keys-callback-handler.service';\r\nimport { ImplicitFlowCallbackHandlerService } from './callback-handling/implicit-flow-callback-handler.service';\r\nimport { RefreshSessionCallbackHandlerService } from './callback-handling/refresh-session-callback-handler.service';\r\nimport { RefreshTokenCallbackHandlerService } from './callback-handling/refresh-token-callback-handler.service';\r\nimport { StateValidationCallbackHandlerService } from './callback-handling/state-validation-callback-handler.service';\r\nimport { UserCallbackHandlerService } from './callback-handling/user-callback-handler.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FlowsService {\r\n  constructor(\r\n    private readonly codeFlowCallbackHandlerService: CodeFlowCallbackHandlerService,\r\n    private readonly implicitFlowCallbackHandlerService: ImplicitFlowCallbackHandlerService,\r\n    private readonly historyJwtKeysCallbackHandlerService: HistoryJwtKeysCallbackHandlerService,\r\n    private readonly userHandlerService: UserCallbackHandlerService,\r\n    private readonly stateValidationCallbackHandlerService: StateValidationCallbackHandlerService,\r\n    private readonly refreshSessionCallbackHandlerService: RefreshSessionCallbackHandlerService,\r\n    private readonly refreshTokenCallbackHandlerService: RefreshTokenCallbackHandlerService\r\n  ) {}\r\n\r\n  processCodeFlowCallback(\r\n    urlToCheck: string,\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): Observable<CallbackContext> {\r\n    return this.codeFlowCallbackHandlerService\r\n      .codeFlowCallback(urlToCheck, config)\r\n      .pipe(\r\n        concatMap((callbackContext) =>\r\n          this.codeFlowCallbackHandlerService.codeFlowCodeRequest(\r\n            callbackContext,\r\n            config\r\n          )\r\n        ),\r\n        concatMap((callbackContext) =>\r\n          this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(\r\n            callbackContext,\r\n            config,\r\n            allConfigs\r\n          )\r\n        ),\r\n        concatMap((callbackContext) =>\r\n          this.stateValidationCallbackHandlerService.callbackStateValidation(\r\n            callbackContext,\r\n            config,\r\n            allConfigs\r\n          )\r\n        ),\r\n        concatMap((callbackContext) =>\r\n          this.userHandlerService.callbackUser(\r\n            callbackContext,\r\n            config,\r\n            allConfigs\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  processSilentRenewCodeFlowCallback(\r\n    firstContext: CallbackContext,\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): Observable<CallbackContext> {\r\n    return this.codeFlowCallbackHandlerService\r\n      .codeFlowCodeRequest(firstContext, config)\r\n      .pipe(\r\n        concatMap((callbackContext) =>\r\n          this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(\r\n            callbackContext,\r\n            config,\r\n            allConfigs\r\n          )\r\n        ),\r\n        concatMap((callbackContext) =>\r\n          this.stateValidationCallbackHandlerService.callbackStateValidation(\r\n            callbackContext,\r\n            config,\r\n            allConfigs\r\n          )\r\n        ),\r\n        concatMap((callbackContext) =>\r\n          this.userHandlerService.callbackUser(\r\n            callbackContext,\r\n            config,\r\n            allConfigs\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  processImplicitFlowCallback(\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    hash?: string\r\n  ): Observable<CallbackContext> {\r\n    return this.implicitFlowCallbackHandlerService\r\n      .implicitFlowCallback(config, allConfigs, hash)\r\n      .pipe(\r\n        concatMap((callbackContext) =>\r\n          this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(\r\n            callbackContext,\r\n            config,\r\n            allConfigs\r\n          )\r\n        ),\r\n        concatMap((callbackContext) =>\r\n          this.stateValidationCallbackHandlerService.callbackStateValidation(\r\n            callbackContext,\r\n            config,\r\n            allConfigs\r\n          )\r\n        ),\r\n        concatMap((callbackContext) =>\r\n          this.userHandlerService.callbackUser(\r\n            callbackContext,\r\n            config,\r\n            allConfigs\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  processRefreshToken(\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    customParamsRefresh?: { [key: string]: string | number | boolean }\r\n  ): Observable<CallbackContext> {\r\n    return this.refreshSessionCallbackHandlerService\r\n      .refreshSessionWithRefreshTokens(config)\r\n      .pipe(\r\n        concatMap((callbackContext) =>\r\n          this.refreshTokenCallbackHandlerService.refreshTokensRequestTokens(\r\n            callbackContext,\r\n            config,\r\n            customParamsRefresh\r\n          )\r\n        ),\r\n        concatMap((callbackContext) =>\r\n          this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(\r\n            callbackContext,\r\n            config,\r\n            allConfigs\r\n          )\r\n        ),\r\n        concatMap((callbackContext) =>\r\n          this.stateValidationCallbackHandlerService.callbackStateValidation(\r\n            callbackContext,\r\n            config,\r\n            allConfigs\r\n          )\r\n        ),\r\n        concatMap((callbackContext) =>\r\n          this.userHandlerService.callbackUser(\r\n            callbackContext,\r\n            config,\r\n            allConfigs\r\n          )\r\n        )\r\n      );\r\n  }\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class IntervalService {\r\n  runTokenValidationRunning = null;\r\n\r\n  constructor(private readonly zone: NgZone) {}\r\n\r\n  isTokenValidationRunning(): boolean {\r\n    return !!this.runTokenValidationRunning;\r\n  }\r\n\r\n  stopPeriodicTokenCheck(): void {\r\n    if (this.runTokenValidationRunning) {\r\n      this.runTokenValidationRunning.unsubscribe();\r\n      this.runTokenValidationRunning = null;\r\n    }\r\n  }\r\n\r\n  startPeriodicTokenCheck(repeatAfterSeconds: number): Observable<unknown> {\r\n    const millisecondsDelayBetweenTokenCheck = repeatAfterSeconds * 1000;\r\n\r\n    return new Observable((subscriber) => {\r\n      let intervalId;\r\n\r\n      this.zone.runOutsideAngular(() => {\r\n        intervalId = setInterval(\r\n          () => this.zone.run(() => subscriber.next()),\r\n          millisecondsDelayBetweenTokenCheck\r\n        );\r\n      });\r\n\r\n      return (): void => {\r\n        clearInterval(intervalId);\r\n      };\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { CallbackContext } from '../flows/callback-context';\r\nimport { FlowsDataService } from '../flows/flows-data.service';\r\nimport { FlowsService } from '../flows/flows.service';\r\nimport { IntervalService } from './interval.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ImplicitFlowCallbackService {\r\n  constructor(\r\n    private readonly flowsService: FlowsService,\r\n    private readonly router: Router,\r\n    private readonly flowsDataService: FlowsDataService,\r\n    private readonly intervalService: IntervalService\r\n  ) {}\r\n\r\n  authenticatedImplicitFlowCallback(\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    hash?: string\r\n  ): Observable<CallbackContext> {\r\n    const isRenewProcess = this.flowsDataService.isSilentRenewRunning(config);\r\n    const {\r\n      triggerAuthorizationResultEvent,\r\n      postLoginRoute,\r\n      unauthorizedRoute,\r\n    } = config;\r\n\r\n    return this.flowsService\r\n      .processImplicitFlowCallback(config, allConfigs, hash)\r\n      .pipe(\r\n        tap((callbackContext) => {\r\n          if (\r\n            !triggerAuthorizationResultEvent &&\r\n            !callbackContext.isRenewProcess\r\n          ) {\r\n            this.router.navigateByUrl(postLoginRoute);\r\n          }\r\n        }),\r\n        catchError((error) => {\r\n          this.flowsDataService.resetSilentRenewRunning(config);\r\n          this.intervalService.stopPeriodicTokenCheck();\r\n          if (!triggerAuthorizationResultEvent && !isRenewProcess) {\r\n            this.router.navigateByUrl(unauthorizedRoute);\r\n          }\r\n\r\n          return throwError(() => new Error(error));\r\n        })\r\n      );\r\n  }\r\n}\r\n","import { HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, Subject, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { AuthStateService } from '../auth-state/auth-state.service';\r\nimport { ImplicitFlowCallbackService } from '../callback/implicit-flow-callback.service';\r\nimport { IntervalService } from '../callback/interval.service';\r\nimport { CallbackContext } from '../flows/callback-context';\r\nimport { FlowsDataService } from '../flows/flows-data.service';\r\nimport { FlowsService } from '../flows/flows.service';\r\nimport { ResetAuthDataService } from '../flows/reset-auth-data.service';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\r\nimport { ValidationResult } from '../validation/validation-result';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { IFrameService } from './existing-iframe.service';\r\n\r\nconst IFRAME_FOR_SILENT_RENEW_IDENTIFIER = 'myiFrameForSilentRenew';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SilentRenewService {\r\n  private readonly refreshSessionWithIFrameCompletedInternal$ =\r\n    new Subject<CallbackContext>();\r\n\r\n  get refreshSessionWithIFrameCompleted$(): Observable<CallbackContext> {\r\n    return this.refreshSessionWithIFrameCompletedInternal$.asObservable();\r\n  }\r\n\r\n  constructor(\r\n    private readonly iFrameService: IFrameService,\r\n    private readonly flowsService: FlowsService,\r\n    private readonly resetAuthDataService: ResetAuthDataService,\r\n    private readonly flowsDataService: FlowsDataService,\r\n    private readonly authStateService: AuthStateService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly flowHelper: FlowHelper,\r\n    private readonly implicitFlowCallbackService: ImplicitFlowCallbackService,\r\n    private readonly intervalService: IntervalService\r\n  ) {}\r\n\r\n  getOrCreateIframe(config: OpenIdConfiguration): HTMLIFrameElement {\r\n    const existingIframe = this.getExistingIframe();\r\n\r\n    if (!existingIframe) {\r\n      return this.iFrameService.addIFrameToWindowBody(\r\n        IFRAME_FOR_SILENT_RENEW_IDENTIFIER,\r\n        config\r\n      );\r\n    }\r\n\r\n    return existingIframe;\r\n  }\r\n\r\n  isSilentRenewConfigured(configuration: OpenIdConfiguration): boolean {\r\n    const { useRefreshToken, silentRenew } = configuration;\r\n\r\n    return !useRefreshToken && silentRenew;\r\n  }\r\n\r\n  codeFlowCallbackSilentRenewIframe(\r\n    urlParts: string[],\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): Observable<CallbackContext> {\r\n    const params = new HttpParams({\r\n      fromString: urlParts[1],\r\n    });\r\n\r\n    const error = params.get('error');\r\n\r\n    if (error) {\r\n      this.authStateService.updateAndPublishAuthState({\r\n        isAuthenticated: false,\r\n        validationResult: ValidationResult.LoginRequired,\r\n        isRenewProcess: true,\r\n      });\r\n      this.resetAuthDataService.resetAuthorizationData(config, allConfigs);\r\n      this.flowsDataService.setNonce('', config);\r\n      this.intervalService.stopPeriodicTokenCheck();\r\n\r\n      return throwError(() => new Error(error));\r\n    }\r\n\r\n    const code = params.get('code');\r\n    const state = params.get('state');\r\n    const sessionState = params.get('session_state');\r\n\r\n    const callbackContext = {\r\n      code,\r\n      refreshToken: null,\r\n      state,\r\n      sessionState,\r\n      authResult: null,\r\n      isRenewProcess: true,\r\n      jwtKeys: null,\r\n      validationResult: null,\r\n      existingIdToken: null,\r\n    };\r\n\r\n    return this.flowsService\r\n      .processSilentRenewCodeFlowCallback(callbackContext, config, allConfigs)\r\n      .pipe(\r\n        catchError(() => {\r\n          this.intervalService.stopPeriodicTokenCheck();\r\n          this.resetAuthDataService.resetAuthorizationData(config, allConfigs);\r\n\r\n          return throwError(() => new Error(error));\r\n        })\r\n      );\r\n  }\r\n\r\n  silentRenewEventHandler(\r\n    e: CustomEvent,\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): void {\r\n    this.loggerService.logDebug(config, 'silentRenewEventHandler');\r\n    if (!e.detail) {\r\n      return;\r\n    }\r\n\r\n    let callback$: Observable<CallbackContext>;\r\n    const isCodeFlow = this.flowHelper.isCurrentFlowCodeFlow(config);\r\n\r\n    if (isCodeFlow) {\r\n      const urlParts = e.detail.toString().split('?');\r\n\r\n      callback$ = this.codeFlowCallbackSilentRenewIframe(\r\n        urlParts,\r\n        config,\r\n        allConfigs\r\n      );\r\n    } else {\r\n      callback$ =\r\n        this.implicitFlowCallbackService.authenticatedImplicitFlowCallback(\r\n          config,\r\n          allConfigs,\r\n          e.detail\r\n        );\r\n    }\r\n\r\n    callback$.subscribe({\r\n      next: (callbackContext) => {\r\n        this.refreshSessionWithIFrameCompletedInternal$.next(callbackContext);\r\n        this.flowsDataService.resetSilentRenewRunning(config);\r\n      },\r\n      error: (err: any) => {\r\n        this.loggerService.logError(config, 'Error: ' + err);\r\n        this.refreshSessionWithIFrameCompletedInternal$.next(null);\r\n        this.flowsDataService.resetSilentRenewRunning(config);\r\n      },\r\n    });\r\n  }\r\n\r\n  private getExistingIframe(): HTMLIFrameElement {\r\n    return this.iFrameService.getExistingIFrame(\r\n      IFRAME_FOR_SILENT_RENEW_IDENTIFIER\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { CallbackContext } from '../flows/callback-context';\r\nimport { FlowsDataService } from '../flows/flows-data.service';\r\nimport { FlowsService } from '../flows/flows.service';\r\nimport { IntervalService } from './interval.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CodeFlowCallbackService {\r\n  constructor(\r\n    private readonly flowsService: FlowsService,\r\n    private readonly flowsDataService: FlowsDataService,\r\n    private readonly intervalService: IntervalService,\r\n    private readonly router: Router\r\n  ) {}\r\n\r\n  authenticatedCallbackWithCode(\r\n    urlToCheck: string,\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): Observable<CallbackContext> {\r\n    const isRenewProcess = this.flowsDataService.isSilentRenewRunning(config);\r\n    const {\r\n      triggerAuthorizationResultEvent,\r\n      postLoginRoute,\r\n      unauthorizedRoute,\r\n    } = config;\r\n\r\n    return this.flowsService\r\n      .processCodeFlowCallback(urlToCheck, config, allConfigs)\r\n      .pipe(\r\n        tap((callbackContext) => {\r\n          this.flowsDataService.resetCodeFlowInProgress(config);\r\n          if (\r\n            !triggerAuthorizationResultEvent &&\r\n            !callbackContext.isRenewProcess\r\n          ) {\r\n            this.router.navigateByUrl(postLoginRoute);\r\n          }\r\n        }),\r\n        catchError((error) => {\r\n          this.flowsDataService.resetSilentRenewRunning(config);\r\n          this.flowsDataService.resetCodeFlowInProgress(config);\r\n          this.intervalService.stopPeriodicTokenCheck();\r\n          if (!triggerAuthorizationResultEvent && !isRenewProcess) {\r\n            this.router.navigateByUrl(unauthorizedRoute);\r\n          }\r\n\r\n          return throwError(() => new Error(error));\r\n        })\r\n      );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { CallbackContext } from '../flows/callback-context';\r\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\r\nimport { UrlService } from '../utils/url/url.service';\r\nimport { CodeFlowCallbackService } from './code-flow-callback.service';\r\nimport { ImplicitFlowCallbackService } from './implicit-flow-callback.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CallbackService {\r\n  private readonly stsCallbackInternal$ = new Subject<void>();\r\n\r\n  get stsCallback$(): Observable<unknown> {\r\n    return this.stsCallbackInternal$.asObservable();\r\n  }\r\n\r\n  constructor(\r\n    private readonly urlService: UrlService,\r\n    private readonly flowHelper: FlowHelper,\r\n    private readonly implicitFlowCallbackService: ImplicitFlowCallbackService,\r\n    private readonly codeFlowCallbackService: CodeFlowCallbackService\r\n  ) {}\r\n\r\n  isCallback(currentUrl: string): boolean {\r\n    return this.urlService.isCallbackFromSts(currentUrl);\r\n  }\r\n\r\n  handleCallbackAndFireEvents(\r\n    currentCallbackUrl: string,\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): Observable<CallbackContext> {\r\n    let callback$: Observable<any>;\r\n\r\n    if (this.flowHelper.isCurrentFlowCodeFlow(config)) {\r\n      callback$ = this.codeFlowCallbackService.authenticatedCallbackWithCode(\r\n        currentCallbackUrl,\r\n        config,\r\n        allConfigs\r\n      );\r\n    } else if (this.flowHelper.isCurrentFlowAnyImplicitFlow(config)) {\r\n      if (currentCallbackUrl?.includes('#')) {\r\n        const hash = currentCallbackUrl.substring(\r\n          currentCallbackUrl.indexOf('#') + 1\r\n        );\r\n\r\n        callback$ =\r\n          this.implicitFlowCallbackService.authenticatedImplicitFlowCallback(\r\n            config,\r\n            allConfigs,\r\n            hash\r\n          );\r\n      } else {\r\n        callback$ =\r\n          this.implicitFlowCallbackService.authenticatedImplicitFlowCallback(\r\n            config,\r\n            allConfigs\r\n          );\r\n      }\r\n    }\r\n\r\n    return callback$.pipe(tap(() => this.stsCallbackInternal$.next()));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { map, retry } from 'rxjs/operators';\r\nimport { DataService } from '../../api/data.service';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { OpenIdConfiguration } from '../openid-configuration';\r\nimport { AuthWellKnownEndpoints } from './auth-well-known-endpoints';\r\n\r\nconst WELL_KNOWN_SUFFIX = `/.well-known/openid-configuration`;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthWellKnownDataService {\r\n  constructor(\r\n    private readonly http: DataService,\r\n    private readonly loggerService: LoggerService\r\n  ) {}\r\n\r\n  getWellKnownEndPointsForConfig(\r\n    config: OpenIdConfiguration\r\n  ): Observable<AuthWellKnownEndpoints> {\r\n    const { authWellknownEndpointUrl } = config;\r\n\r\n    if (!authWellknownEndpointUrl) {\r\n      const errorMessage = 'no authWellknownEndpoint given!';\r\n\r\n      this.loggerService.logError(config, errorMessage);\r\n\r\n      return throwError(() => new Error(errorMessage));\r\n    }\r\n\r\n    return this.getWellKnownDocument(authWellknownEndpointUrl, config).pipe(\r\n      map(\r\n        (wellKnownEndpoints) =>\r\n          ({\r\n            issuer: wellKnownEndpoints.issuer,\r\n            jwksUri: wellKnownEndpoints.jwks_uri,\r\n            authorizationEndpoint: wellKnownEndpoints.authorization_endpoint,\r\n            tokenEndpoint: wellKnownEndpoints.token_endpoint,\r\n            userInfoEndpoint: wellKnownEndpoints.userinfo_endpoint,\r\n            endSessionEndpoint: wellKnownEndpoints.end_session_endpoint,\r\n            checkSessionIframe: wellKnownEndpoints.check_session_iframe,\r\n            revocationEndpoint: wellKnownEndpoints.revocation_endpoint,\r\n            introspectionEndpoint: wellKnownEndpoints.introspection_endpoint,\r\n            parEndpoint:\r\n              wellKnownEndpoints.pushed_authorization_request_endpoint,\r\n          } as AuthWellKnownEndpoints)\r\n      )\r\n    );\r\n  }\r\n\r\n  private getWellKnownDocument(\r\n    wellKnownEndpoint: string,\r\n    config: OpenIdConfiguration\r\n  ): Observable<any> {\r\n    let url = wellKnownEndpoint;\r\n\r\n    if (!wellKnownEndpoint.includes(WELL_KNOWN_SUFFIX)) {\r\n      url = `${wellKnownEndpoint}${WELL_KNOWN_SUFFIX}`;\r\n    }\r\n\r\n    return this.http.get<any>(url, config).pipe(retry(2));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\nimport { EventTypes } from '../../public-events/event-types';\r\nimport { PublicEventsService } from '../../public-events/public-events.service';\r\nimport { StoragePersistenceService } from '../../storage/storage-persistence.service';\r\nimport { OpenIdConfiguration } from '../openid-configuration';\r\nimport { AuthWellKnownDataService } from './auth-well-known-data.service';\r\nimport { AuthWellKnownEndpoints } from './auth-well-known-endpoints';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthWellKnownService {\r\n  constructor(\r\n    private readonly dataService: AuthWellKnownDataService,\r\n    private readonly publicEventsService: PublicEventsService,\r\n    private readonly storagePersistenceService: StoragePersistenceService\r\n  ) {}\r\n\r\n  storeWellKnownEndpoints(\r\n    config: OpenIdConfiguration,\r\n    mappedWellKnownEndpoints: AuthWellKnownEndpoints\r\n  ): void {\r\n    this.storagePersistenceService.write(\r\n      'authWellKnownEndPoints',\r\n      mappedWellKnownEndpoints,\r\n      config\r\n    );\r\n  }\r\n\r\n  queryAndStoreAuthWellKnownEndPoints(\r\n    config: OpenIdConfiguration\r\n  ): Observable<AuthWellKnownEndpoints> {\r\n    const alreadySavedWellKnownEndpoints = this.storagePersistenceService.read(\r\n      'authWellKnownEndPoints',\r\n      config\r\n    );\r\n\r\n    if (!!alreadySavedWellKnownEndpoints) {\r\n      return of(alreadySavedWellKnownEndpoints);\r\n    }\r\n\r\n    return this.dataService.getWellKnownEndPointsForConfig(config).pipe(\r\n      tap((mappedWellKnownEndpoints) =>\r\n        this.storeWellKnownEndpoints(config, mappedWellKnownEndpoints)\r\n      ),\r\n      catchError((error) => {\r\n        this.publicEventsService.fireEvent(\r\n          EventTypes.ConfigLoadingFailed,\r\n          null\r\n        );\r\n\r\n        return throwError(() => new Error(error));\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable, Renderer2, RendererFactory2 } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { UrlService } from '../utils/url/url.service';\r\nimport { SilentRenewService } from './silent-renew.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class RefreshSessionIframeService {\r\n  private readonly renderer: Renderer2;\r\n\r\n  constructor(\r\n    @Inject(DOCUMENT) private readonly document: Document,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly urlService: UrlService,\r\n    private readonly silentRenewService: SilentRenewService,\r\n    rendererFactory: RendererFactory2\r\n  ) {\r\n    this.renderer = rendererFactory.createRenderer(null, null);\r\n  }\r\n\r\n  refreshSessionWithIframe(\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    customParams?: { [key: string]: string | number | boolean }\r\n  ): Observable<boolean> {\r\n    this.loggerService.logDebug(\r\n      config,\r\n      'BEGIN refresh session Authorize Iframe renew'\r\n    );\r\n\r\n    return this.urlService\r\n      .getRefreshSessionSilentRenewUrl(config, customParams)\r\n      .pipe(\r\n        switchMap((url) => {\r\n          return this.sendAuthorizeRequestUsingSilentRenew(\r\n            url,\r\n            config,\r\n            allConfigs\r\n          );\r\n        })\r\n      );\r\n  }\r\n\r\n  private sendAuthorizeRequestUsingSilentRenew(\r\n    url: string,\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): Observable<boolean> {\r\n    const sessionIframe = this.silentRenewService.getOrCreateIframe(config);\r\n\r\n    this.initSilentRenewRequest(config, allConfigs);\r\n    this.loggerService.logDebug(\r\n      config,\r\n      'sendAuthorizeRequestUsingSilentRenew for URL:' + url\r\n    );\r\n\r\n    return new Observable((observer) => {\r\n      const onLoadHandler = (): void => {\r\n        sessionIframe.removeEventListener('load', onLoadHandler);\r\n        this.loggerService.logDebug(\r\n          config,\r\n          'removed event listener from IFrame'\r\n        );\r\n        observer.next(true);\r\n        observer.complete();\r\n      };\r\n\r\n      sessionIframe.addEventListener('load', onLoadHandler);\r\n      sessionIframe.contentWindow.location.replace(url);\r\n    });\r\n  }\r\n\r\n  private initSilentRenewRequest(\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): void {\r\n    const instanceId = Math.random();\r\n\r\n    const initDestroyHandler = this.renderer.listen(\r\n      'window',\r\n      'oidc-silent-renew-init',\r\n      (e: CustomEvent) => {\r\n        if (e.detail !== instanceId) {\r\n          initDestroyHandler();\r\n          renewDestroyHandler();\r\n        }\r\n      }\r\n    );\r\n    const renewDestroyHandler = this.renderer.listen(\r\n      'window',\r\n      'oidc-silent-renew-message',\r\n      (e) =>\r\n        this.silentRenewService.silentRenewEventHandler(e, config, allConfigs)\r\n    );\r\n\r\n    this.document.defaultView.dispatchEvent(\r\n      new CustomEvent('oidc-silent-renew-init', {\r\n        detail: instanceId,\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, finalize } from 'rxjs/operators';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { CallbackContext } from '../flows/callback-context';\r\nimport { FlowsService } from '../flows/flows.service';\r\nimport { ResetAuthDataService } from '../flows/reset-auth-data.service';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { IntervalService } from './interval.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class RefreshSessionRefreshTokenService {\r\n  constructor(\r\n    private readonly loggerService: LoggerService,\r\n    private readonly resetAuthDataService: ResetAuthDataService,\r\n    private readonly flowsService: FlowsService,\r\n    private readonly intervalService: IntervalService\r\n  ) {}\r\n\r\n  refreshSessionWithRefreshTokens(\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    customParamsRefresh?: { [key: string]: string | number | boolean }\r\n  ): Observable<CallbackContext> {\r\n    this.loggerService.logDebug(config, 'BEGIN refresh session Authorize');\r\n    let refreshTokenFailed = false;\r\n\r\n    return this.flowsService\r\n      .processRefreshToken(config, allConfigs, customParamsRefresh)\r\n      .pipe(\r\n        catchError((error) => {\r\n          this.resetAuthDataService.resetAuthorizationData(config, allConfigs);\r\n          refreshTokenFailed = true;\r\n\r\n          return throwError(() => new Error(error));\r\n        }),\r\n        finalize(\r\n          () =>\r\n            refreshTokenFailed && this.intervalService.stopPeriodicTokenCheck()\r\n        )\r\n      );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  forkJoin,\r\n  Observable,\r\n  of,\r\n  throwError,\r\n  TimeoutError,\r\n  timer,\r\n} from 'rxjs';\r\nimport {\r\n  map,\r\n  mergeMap,\r\n  retryWhen,\r\n  switchMap,\r\n  take,\r\n  timeout,\r\n} from 'rxjs/operators';\r\nimport { AuthStateService } from '../auth-state/auth-state.service';\r\nimport { AuthWellKnownService } from '../config/auth-well-known/auth-well-known.service';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { CallbackContext } from '../flows/callback-context';\r\nimport { FlowsDataService } from '../flows/flows-data.service';\r\nimport { RefreshSessionIframeService } from '../iframe/refresh-session-iframe.service';\r\nimport { SilentRenewService } from '../iframe/silent-renew.service';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { LoginResponse } from '../login/login-response';\r\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\r\nimport { UserService } from '../user-data/user.service';\r\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\r\nimport { RefreshSessionRefreshTokenService } from './refresh-session-refresh-token.service';\r\n\r\nexport const MAX_RETRY_ATTEMPTS = 3;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class RefreshSessionService {\r\n  constructor(\r\n    private readonly flowHelper: FlowHelper,\r\n    private readonly flowsDataService: FlowsDataService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly silentRenewService: SilentRenewService,\r\n    private readonly authStateService: AuthStateService,\r\n    private readonly authWellKnownService: AuthWellKnownService,\r\n    private readonly refreshSessionIframeService: RefreshSessionIframeService,\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly refreshSessionRefreshTokenService: RefreshSessionRefreshTokenService,\r\n    private readonly userService: UserService\r\n  ) {}\r\n\r\n  userForceRefreshSession(\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    extraCustomParams?: { [key: string]: string | number | boolean }\r\n  ): Observable<LoginResponse> {\r\n    this.persistCustomParams(extraCustomParams, config);\r\n\r\n    return this.forceRefreshSession(config, allConfigs, extraCustomParams);\r\n  }\r\n\r\n  forceRefreshSession(\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    extraCustomParams?: { [key: string]: string | number | boolean }\r\n  ): Observable<LoginResponse> {\r\n    const { customParamsRefreshTokenRequest, configId } = config;\r\n    const mergedParams = {\r\n      ...customParamsRefreshTokenRequest,\r\n      ...extraCustomParams,\r\n    };\r\n\r\n    if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens(config)) {\r\n      return this.startRefreshSession(config, allConfigs, mergedParams).pipe(\r\n        map(() => {\r\n          const isAuthenticated =\r\n            this.authStateService.areAuthStorageTokensValid(config);\r\n\r\n          if (isAuthenticated) {\r\n            return {\r\n              idToken: this.authStateService.getIdToken(config),\r\n              accessToken: this.authStateService.getAccessToken(config),\r\n              userData: this.userService.getUserDataFromStore(config),\r\n              isAuthenticated,\r\n              configId,\r\n            } as LoginResponse;\r\n          }\r\n\r\n          return {\r\n            isAuthenticated: false,\r\n            errorMessage: '',\r\n            userData: null,\r\n            idToken: '',\r\n            accessToken: '',\r\n            configId,\r\n          };\r\n        })\r\n      );\r\n    }\r\n\r\n    const { silentRenewTimeoutInSeconds } = config;\r\n    const timeOutTime = silentRenewTimeoutInSeconds * 1000;\r\n\r\n    return forkJoin([\r\n      this.startRefreshSession(config, allConfigs, extraCustomParams),\r\n      this.silentRenewService.refreshSessionWithIFrameCompleted$.pipe(take(1)),\r\n    ]).pipe(\r\n      timeout(timeOutTime),\r\n      retryWhen(this.timeoutRetryStrategy.bind(this)),\r\n      map(([_, callbackContext]) => {\r\n        const isAuthenticated =\r\n          this.authStateService.areAuthStorageTokensValid(config);\r\n\r\n        if (isAuthenticated) {\r\n          return {\r\n            idToken: callbackContext?.authResult?.id_token,\r\n            accessToken: callbackContext?.authResult?.access_token,\r\n            userData: this.userService.getUserDataFromStore(config),\r\n            isAuthenticated,\r\n            configId,\r\n          };\r\n        }\r\n\r\n        return {\r\n          isAuthenticated: false,\r\n          errorMessage: '',\r\n          userData: null,\r\n          idToken: '',\r\n          accessToken: '',\r\n          configId,\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  private persistCustomParams(\r\n    extraCustomParams: { [key: string]: string | number | boolean } | undefined,\r\n    config: OpenIdConfiguration\r\n  ): void {\r\n    const { useRefreshToken } = config;\r\n\r\n    if (extraCustomParams) {\r\n      if (useRefreshToken) {\r\n        this.storagePersistenceService.write(\r\n          'storageCustomParamsRefresh',\r\n          extraCustomParams,\r\n          config\r\n        );\r\n      } else {\r\n        this.storagePersistenceService.write(\r\n          'storageCustomParamsAuthRequest',\r\n          extraCustomParams,\r\n          config\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private startRefreshSession(\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    extraCustomParams?: { [key: string]: string | number | boolean }\r\n  ): Observable<boolean | CallbackContext | null> {\r\n    const isSilentRenewRunning =\r\n      this.flowsDataService.isSilentRenewRunning(config);\r\n\r\n    this.loggerService.logDebug(\r\n      config,\r\n      `Checking: silentRenewRunning: ${isSilentRenewRunning}`\r\n    );\r\n    const shouldBeExecuted = !isSilentRenewRunning;\r\n\r\n    if (!shouldBeExecuted) {\r\n      return of(null);\r\n    }\r\n\r\n    return this.authWellKnownService\r\n      .queryAndStoreAuthWellKnownEndPoints(config)\r\n      .pipe(\r\n        switchMap(() => {\r\n          this.flowsDataService.setSilentRenewRunning(config);\r\n\r\n          if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens(config)) {\r\n            // Refresh Session using Refresh tokens\r\n            return this.refreshSessionRefreshTokenService.refreshSessionWithRefreshTokens(\r\n              config,\r\n              allConfigs,\r\n              extraCustomParams\r\n            );\r\n          }\r\n\r\n          return this.refreshSessionIframeService.refreshSessionWithIframe(\r\n            config,\r\n            allConfigs,\r\n            extraCustomParams\r\n          );\r\n        })\r\n      );\r\n  }\r\n\r\n  private timeoutRetryStrategy(\r\n    errorAttempts: Observable<any>,\r\n    config: OpenIdConfiguration\r\n  ): Observable<number> {\r\n    return errorAttempts.pipe(\r\n      mergeMap((error, index) => {\r\n        const scalingDuration = 1000;\r\n        const currentAttempt = index + 1;\r\n\r\n        if (\r\n          !(error instanceof TimeoutError) ||\r\n          currentAttempt > MAX_RETRY_ATTEMPTS\r\n        ) {\r\n          return throwError(() => new Error(error));\r\n        }\r\n\r\n        this.loggerService.logDebug(\r\n          config,\r\n          `forceRefreshSession timeout. Attempt #${currentAttempt}`\r\n        );\r\n\r\n        this.flowsDataService.resetSilentRenewRunning(config);\r\n\r\n        return timer(currentAttempt * scalingDuration);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { LogLevel } from '../logging/log-level';\r\nimport { OpenIdConfiguration } from './openid-configuration';\r\n\r\nexport const DEFAULT_CONFIG: OpenIdConfiguration = {\r\n  authority: 'https://please_set',\r\n  authWellknownEndpointUrl: '',\r\n  authWellknownEndpoints: null,\r\n  redirectUrl: 'https://please_set',\r\n  clientId: 'please_set',\r\n  responseType: 'code',\r\n  scope: 'openid email profile',\r\n  hdParam: '',\r\n  postLogoutRedirectUri: 'https://please_set',\r\n  startCheckSession: false,\r\n  silentRenew: false,\r\n  silentRenewUrl: 'https://please_set',\r\n  silentRenewTimeoutInSeconds: 20,\r\n  renewTimeBeforeTokenExpiresInSeconds: 0,\r\n  useRefreshToken: false,\r\n  usePushedAuthorisationRequests: false,\r\n  ignoreNonceAfterRefresh: false,\r\n  postLoginRoute: '/',\r\n  forbiddenRoute: '/forbidden',\r\n  unauthorizedRoute: '/unauthorized',\r\n  autoUserInfo: true,\r\n  autoCleanStateAfterAuthentication: true,\r\n  triggerAuthorizationResultEvent: false,\r\n  logLevel: LogLevel.Warn,\r\n  issValidationOff: false,\r\n  historyCleanupOff: false,\r\n  maxIdTokenIatOffsetAllowedInSeconds: 120,\r\n  disableIatOffsetValidation: false,\r\n  customParamsAuthRequest: {},\r\n  customParamsRefreshTokenRequest: {},\r\n  customParamsEndSessionRequest: {},\r\n  customParamsCodeRequest: {},\r\n  disableRefreshIdTokenAuthTimeValidation: false,\r\n  triggerRefreshWhenIdTokenExpired: true,\r\n  tokenRefreshInSeconds: 4,\r\n  refreshTokenRetryInSeconds: 3,\r\n  ngswBypass: false,\r\n};\r\n","import { OpenIdConfiguration } from '../openid-configuration';\n\nexport interface Rule {\n  validate(passedConfig: OpenIdConfiguration): RuleValidationResult;\n}\n\nexport interface RuleValidationResult {\n  result: boolean;\n  messages: string[];\n  level: Level;\n}\n\nexport const POSITIVE_VALIDATION_RESULT = {\n  result: true,\n  messages: [],\n  level: null,\n};\n\nexport type Level = 'warning' | 'error';\n","import { OpenIdConfiguration } from '../../openid-configuration';\r\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\r\n\r\nexport const ensureAuthority = (\r\n  passedConfig: OpenIdConfiguration\r\n): RuleValidationResult => {\r\n  if (!passedConfig.authority) {\r\n    return {\r\n      result: false,\r\n      messages: ['The authority URL MUST be provided in the configuration! '],\r\n      level: 'error',\r\n    };\r\n  }\r\n\r\n  return POSITIVE_VALIDATION_RESULT;\r\n};\r\n","import { OpenIdConfiguration } from '../../openid-configuration';\r\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\r\n\r\nexport const ensureClientId = (\r\n  passedConfig: OpenIdConfiguration\r\n): RuleValidationResult => {\r\n  if (!passedConfig.clientId) {\r\n    return {\r\n      result: false,\r\n      messages: ['The clientId is required and missing from your config!'],\r\n      level: 'error',\r\n    };\r\n  }\r\n\r\n  return POSITIVE_VALIDATION_RESULT;\r\n};\r\n","import { OpenIdConfiguration } from '../../openid-configuration';\r\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\r\n\r\nconst createIdentifierToCheck = (passedConfig: OpenIdConfiguration): string => {\r\n  if (!passedConfig) {\r\n    return null;\r\n  }\r\n\r\n  const { authority, clientId, scope } = passedConfig;\r\n\r\n  return `${authority}${clientId}${scope}`;\r\n};\r\n\r\nconst arrayHasDuplicates = (array: string[]): boolean =>\r\n  new Set(array).size !== array.length;\r\n\r\nexport const ensureNoDuplicatedConfigsRule = (\r\n  passedConfigs: OpenIdConfiguration[]\r\n): RuleValidationResult => {\r\n  const allIdentifiers = passedConfigs.map((x) => createIdentifierToCheck(x));\r\n\r\n  const someAreNull = allIdentifiers.some((x) => x === null);\r\n\r\n  if (someAreNull) {\r\n    return {\r\n      result: false,\r\n      messages: [\r\n        `Please make sure you add an object with a 'config' property: ....({ config }) instead of ...(config)`,\r\n      ],\r\n      level: 'error',\r\n    };\r\n  }\r\n\r\n  const hasDuplicates = arrayHasDuplicates(allIdentifiers);\r\n\r\n  if (hasDuplicates) {\r\n    return {\r\n      result: false,\r\n      messages: [\r\n        'You added multiple configs with the same authority, clientId and scope',\r\n      ],\r\n      level: 'warning',\r\n    };\r\n  }\r\n\r\n  return POSITIVE_VALIDATION_RESULT;\r\n};\r\n","import { OpenIdConfiguration } from '../../openid-configuration';\r\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\r\n\r\nexport const ensureRedirectRule = (\r\n  passedConfig: OpenIdConfiguration\r\n): RuleValidationResult => {\r\n  if (!passedConfig.redirectUrl) {\r\n    return {\r\n      result: false,\r\n      messages: ['The redirectUrl is required and missing from your config'],\r\n      level: 'error',\r\n    };\r\n  }\r\n\r\n  return POSITIVE_VALIDATION_RESULT;\r\n};\r\n","import { OpenIdConfiguration } from '../../openid-configuration';\r\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\r\n\r\nexport const ensureSilentRenewUrlWhenNoRefreshTokenUsed = (\r\n  passedConfig: OpenIdConfiguration\r\n): RuleValidationResult => {\r\n  const usesSilentRenew = passedConfig.silentRenew;\r\n  const usesRefreshToken = passedConfig.useRefreshToken;\r\n  const hasSilentRenewUrl = passedConfig.silentRenewUrl;\r\n\r\n  if (usesSilentRenew && !usesRefreshToken && !hasSilentRenewUrl) {\r\n    return {\r\n      result: false,\r\n      messages: [\r\n        'Please provide a silent renew URL if using renew and not refresh tokens',\r\n      ],\r\n      level: 'error',\r\n    };\r\n  }\r\n\r\n  return POSITIVE_VALIDATION_RESULT;\r\n};\r\n","import { OpenIdConfiguration } from '../../openid-configuration';\r\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\r\n\r\nexport const useOfflineScopeWithSilentRenew = (\r\n  passedConfig: OpenIdConfiguration\r\n): RuleValidationResult => {\r\n  const hasRefreshToken = passedConfig.useRefreshToken;\r\n  const hasSilentRenew = passedConfig.silentRenew;\r\n  const scope = passedConfig.scope || '';\r\n  const hasOfflineScope = scope.split(' ').includes('offline_access');\r\n\r\n  if (hasRefreshToken && hasSilentRenew && !hasOfflineScope) {\r\n    return {\r\n      result: false,\r\n      messages: [\r\n        'When using silent renew and refresh tokens please set the `offline_access` scope',\r\n      ],\r\n      level: 'warning',\r\n    };\r\n  }\r\n\r\n  return POSITIVE_VALIDATION_RESULT;\r\n};\r\n","import { ensureAuthority } from './ensure-authority.rule';\nimport { ensureClientId } from './ensure-clientId.rule';\nimport { ensureNoDuplicatedConfigsRule } from './ensure-no-duplicated-configs.rule';\nimport { ensureRedirectRule } from './ensure-redirect-url.rule';\nimport { ensureSilentRenewUrlWhenNoRefreshTokenUsed } from './ensure-silentRenewUrl-with-no-refreshtokens.rule';\nimport { useOfflineScopeWithSilentRenew } from './use-offline-scope-with-silent-renew.rule';\n\nexport const allRules = [\n  ensureAuthority,\n  useOfflineScopeWithSilentRenew,\n  ensureRedirectRule,\n  ensureClientId,\n  ensureSilentRenewUrlWhenNoRefreshTokenUsed,\n];\n\nexport const allMultipleConfigRules = [ensureNoDuplicatedConfigsRule];\n","import { Injectable } from '@angular/core';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { OpenIdConfiguration } from '../openid-configuration';\r\nimport { Level, RuleValidationResult } from './rule';\r\nimport { allRules, allMultipleConfigRules } from './rules';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ConfigValidationService {\r\n  constructor(private readonly loggerService: LoggerService) {}\r\n\r\n  validateConfigs(passedConfigs: OpenIdConfiguration[]): boolean {\r\n    return this.validateConfigsInternal(\r\n      passedConfigs ?? [],\r\n      allMultipleConfigRules\r\n    );\r\n  }\r\n\r\n  validateConfig(passedConfig: OpenIdConfiguration): boolean {\r\n    return this.validateConfigInternal(passedConfig, allRules);\r\n  }\r\n\r\n  private validateConfigsInternal(\r\n    passedConfigs: OpenIdConfiguration[],\r\n    allRulesToUse: any[]\r\n  ): boolean {\r\n    const allValidationResults = allRulesToUse.map((rule) =>\r\n      rule(passedConfigs)\r\n    );\r\n\r\n    let overallErrorCount = 0;\r\n\r\n    passedConfigs.forEach((passedConfig) => {\r\n      const errorCount = this.processValidationResultsAndGetErrorCount(\r\n        allValidationResults,\r\n        passedConfig\r\n      );\r\n\r\n      overallErrorCount += errorCount;\r\n    });\r\n\r\n    return overallErrorCount === 0;\r\n  }\r\n\r\n  private validateConfigInternal(\r\n    passedConfig: OpenIdConfiguration,\r\n    allRulesToUse: any[]\r\n  ): boolean {\r\n    const allValidationResults = allRulesToUse.map((rule) =>\r\n      rule(passedConfig)\r\n    );\r\n\r\n    const errorCount = this.processValidationResultsAndGetErrorCount(\r\n      allValidationResults,\r\n      passedConfig\r\n    );\r\n\r\n    return errorCount === 0;\r\n  }\r\n\r\n  private processValidationResultsAndGetErrorCount(\r\n    allValidationResults: RuleValidationResult[],\r\n    config: OpenIdConfiguration\r\n  ): number {\r\n    const allMessages = allValidationResults.filter(\r\n      (x) => x.messages.length > 0\r\n    );\r\n    const allErrorMessages = this.getAllMessagesOfType('error', allMessages);\r\n    const allWarnings = this.getAllMessagesOfType('warning', allMessages);\r\n\r\n    allErrorMessages.forEach((message) =>\r\n      this.loggerService.logError(config, message)\r\n    );\r\n    allWarnings.forEach((message) =>\r\n      this.loggerService.logWarning(config, message)\r\n    );\r\n\r\n    return allErrorMessages.length;\r\n  }\r\n\r\n  private getAllMessagesOfType(\r\n    type: Level,\r\n    results: RuleValidationResult[]\r\n  ): string[] {\r\n    const allMessages = results\r\n      .filter((x) => x.level === type)\r\n      .map((result) => result.messages);\r\n\r\n    return allMessages.reduce((acc, val) => acc.concat(val), []);\r\n  }\r\n}\r\n","import { isPlatformBrowser } from '@angular/common';\r\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PlatformProvider {\r\n  isBrowser(): boolean {\r\n    return isPlatformBrowser(this.platformId);\r\n  }\r\n\r\n  constructor(@Inject(PLATFORM_ID) private readonly platformId: string) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { forkJoin, Observable, of } from 'rxjs';\r\nimport { concatMap, map } from 'rxjs/operators';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { EventTypes } from '../public-events/event-types';\r\nimport { PublicEventsService } from '../public-events/public-events.service';\r\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\r\nimport { PlatformProvider } from '../utils/platform-provider/platform.provider';\r\nimport { AuthWellKnownService } from './auth-well-known/auth-well-known.service';\r\nimport { DEFAULT_CONFIG } from './default-config';\r\nimport { StsConfigLoader } from './loader/config-loader';\r\nimport { OpenIdConfiguration } from './openid-configuration';\r\nimport { ConfigValidationService } from './validation/config-validation.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ConfigurationService {\r\n  private configsInternal: Record<string, OpenIdConfiguration> = {};\r\n\r\n  constructor(\r\n    private readonly loggerService: LoggerService,\r\n    private readonly publicEventsService: PublicEventsService,\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly configValidationService: ConfigValidationService,\r\n    private readonly platformProvider: PlatformProvider,\r\n    private readonly authWellKnownService: AuthWellKnownService,\r\n    private readonly loader: StsConfigLoader\r\n  ) {}\r\n\r\n  hasManyConfigs(): boolean {\r\n    return Object.keys(this.configsInternal).length > 1;\r\n  }\r\n\r\n  getAllConfigurations(): OpenIdConfiguration[] {\r\n    return Object.values(this.configsInternal);\r\n  }\r\n\r\n  getOpenIDConfiguration(configId?: string): Observable<OpenIdConfiguration> {\r\n    if (this.configsAlreadySaved()) {\r\n      return of(this.getConfig(configId));\r\n    }\r\n\r\n    return this.getOpenIDConfigurations(configId).pipe(\r\n      map((result) => result.currentConfig)\r\n    );\r\n  }\r\n\r\n  getOpenIDConfigurations(\r\n    configId?: string\r\n  ): Observable<{ allConfigs; currentConfig }> {\r\n    return this.loadConfigs().pipe(\r\n      concatMap((allConfigs) => this.prepareAndSaveConfigs(allConfigs)),\r\n      map((allPreparedConfigs) => ({\r\n        allConfigs: allPreparedConfigs,\r\n        currentConfig: this.getConfig(configId),\r\n      }))\r\n    );\r\n  }\r\n\r\n  hasAtLeastOneConfig(): boolean {\r\n    return Object.keys(this.configsInternal).length > 0;\r\n  }\r\n\r\n  private saveConfig(readyConfig: OpenIdConfiguration): void {\r\n    const { configId } = readyConfig;\r\n\r\n    this.configsInternal[configId] = readyConfig;\r\n  }\r\n\r\n  private loadConfigs(): Observable<OpenIdConfiguration[]> {\r\n    return this.loader.loadConfigs();\r\n  }\r\n\r\n  private configsAlreadySaved(): boolean {\r\n    return this.hasAtLeastOneConfig();\r\n  }\r\n\r\n  private getConfig(configId: string): OpenIdConfiguration {\r\n    if (!!configId) {\r\n      return this.configsInternal[configId] || null;\r\n    }\r\n\r\n    const [, value] = Object.entries(this.configsInternal)[0] || [[null, null]];\r\n\r\n    return value || null;\r\n  }\r\n\r\n  private prepareAndSaveConfigs(\r\n    passedConfigs: OpenIdConfiguration[]\r\n  ): Observable<OpenIdConfiguration[]> {\r\n    if (!this.configValidationService.validateConfigs(passedConfigs)) {\r\n      return of(null);\r\n    }\r\n\r\n    this.createUniqueIds(passedConfigs);\r\n    const allHandleConfigs$ = passedConfigs.map((x) => this.handleConfig(x));\r\n\r\n    return forkJoin(allHandleConfigs$);\r\n  }\r\n\r\n  private createUniqueIds(passedConfigs: OpenIdConfiguration[]): void {\r\n    passedConfigs.forEach((config, index) => {\r\n      if (!config.configId) {\r\n        config.configId = `${index}-${config.clientId}`;\r\n      }\r\n    });\r\n  }\r\n\r\n  private handleConfig(\r\n    passedConfig: OpenIdConfiguration\r\n  ): Observable<OpenIdConfiguration> {\r\n    if (!this.configValidationService.validateConfig(passedConfig)) {\r\n      this.loggerService.logError(\r\n        passedConfig,\r\n        'Validation of config rejected with errors. Config is NOT set.'\r\n      );\r\n\r\n      return of(null);\r\n    }\r\n\r\n    if (!passedConfig.authWellknownEndpointUrl) {\r\n      passedConfig.authWellknownEndpointUrl = passedConfig.authority;\r\n    }\r\n\r\n    const usedConfig = this.prepareConfig(passedConfig);\r\n\r\n    this.saveConfig(usedConfig);\r\n\r\n    const configWithAuthWellKnown =\r\n      this.enhanceConfigWithWellKnownEndpoint(usedConfig);\r\n\r\n    this.publicEventsService.fireEvent<OpenIdConfiguration>(\r\n      EventTypes.ConfigLoaded,\r\n      configWithAuthWellKnown\r\n    );\r\n\r\n    return of(usedConfig);\r\n  }\r\n\r\n  private enhanceConfigWithWellKnownEndpoint(\r\n    configuration: OpenIdConfiguration\r\n  ): OpenIdConfiguration {\r\n    const alreadyExistingAuthWellKnownEndpoints =\r\n      this.storagePersistenceService.read(\r\n        'authWellKnownEndPoints',\r\n        configuration\r\n      );\r\n\r\n    if (!!alreadyExistingAuthWellKnownEndpoints) {\r\n      configuration.authWellknownEndpoints =\r\n        alreadyExistingAuthWellKnownEndpoints;\r\n\r\n      return configuration;\r\n    }\r\n\r\n    const passedAuthWellKnownEndpoints = configuration.authWellknownEndpoints;\r\n\r\n    if (!!passedAuthWellKnownEndpoints) {\r\n      this.authWellKnownService.storeWellKnownEndpoints(\r\n        configuration,\r\n        passedAuthWellKnownEndpoints\r\n      );\r\n      configuration.authWellknownEndpoints = passedAuthWellKnownEndpoints;\r\n\r\n      return configuration;\r\n    }\r\n\r\n    return configuration;\r\n  }\r\n\r\n  private prepareConfig(\r\n    configuration: OpenIdConfiguration\r\n  ): OpenIdConfiguration {\r\n    const openIdConfigurationInternal = { ...DEFAULT_CONFIG, ...configuration };\r\n\r\n    this.setSpecialCases(openIdConfigurationInternal);\r\n\r\n    return openIdConfigurationInternal;\r\n  }\r\n\r\n  private setSpecialCases(currentConfig: OpenIdConfiguration): void {\r\n    if (!this.platformProvider.isBrowser()) {\r\n      currentConfig.startCheckSession = false;\r\n      currentConfig.silentRenew = false;\r\n      currentConfig.useRefreshToken = false;\r\n      currentConfig.usePushedAuthorisationRequests = false;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { forkJoin, Observable, of, throwError } from 'rxjs';\r\nimport { catchError, switchMap } from 'rxjs/operators';\r\nimport { AuthStateService } from '../auth-state/auth-state.service';\r\nimport { ConfigurationService } from '../config/config.service';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { CallbackContext } from '../flows/callback-context';\r\nimport { FlowsDataService } from '../flows/flows-data.service';\r\nimport { ResetAuthDataService } from '../flows/reset-auth-data.service';\r\nimport { RefreshSessionIframeService } from '../iframe/refresh-session-iframe.service';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { EventTypes } from '../public-events/event-types';\r\nimport { PublicEventsService } from '../public-events/public-events.service';\r\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\r\nimport { UserService } from '../user-data/user.service';\r\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\r\nimport { IntervalService } from './interval.service';\r\nimport { RefreshSessionRefreshTokenService } from './refresh-session-refresh-token.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PeriodicallyTokenCheckService {\r\n  constructor(\r\n    private readonly resetAuthDataService: ResetAuthDataService,\r\n    private readonly flowHelper: FlowHelper,\r\n    private readonly flowsDataService: FlowsDataService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly userService: UserService,\r\n    private readonly authStateService: AuthStateService,\r\n    private readonly refreshSessionIframeService: RefreshSessionIframeService,\r\n    private readonly refreshSessionRefreshTokenService: RefreshSessionRefreshTokenService,\r\n    private readonly intervalService: IntervalService,\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly publicEventsService: PublicEventsService,\r\n    private readonly configurationService: ConfigurationService\r\n  ) {}\r\n\r\n  startTokenValidationPeriodically(\r\n    allConfigs: OpenIdConfiguration[],\r\n    currentConfig: OpenIdConfiguration\r\n  ): void {\r\n    const configsWithSilentRenewEnabled =\r\n      this.getConfigsWithSilentRenewEnabled(allConfigs);\r\n\r\n    if (configsWithSilentRenewEnabled.length <= 0) {\r\n      return;\r\n    }\r\n\r\n    if (this.intervalService.isTokenValidationRunning()) {\r\n      return;\r\n    }\r\n\r\n    const refreshTimeInSeconds = this.getSmallestRefreshTimeFromConfigs(\r\n      configsWithSilentRenewEnabled\r\n    );\r\n    const periodicallyCheck$ = this.intervalService\r\n      .startPeriodicTokenCheck(refreshTimeInSeconds)\r\n      .pipe(\r\n        switchMap(() => {\r\n          const objectWithConfigIdsAndRefreshEvent = {};\r\n\r\n          configsWithSilentRenewEnabled.forEach((config) => {\r\n            objectWithConfigIdsAndRefreshEvent[config.configId] =\r\n              this.getRefreshEvent(config, allConfigs);\r\n          });\r\n\r\n          return forkJoin(objectWithConfigIdsAndRefreshEvent);\r\n        })\r\n      );\r\n\r\n    this.intervalService.runTokenValidationRunning = periodicallyCheck$\r\n      .pipe(catchError((error) => throwError(() => new Error(error))))\r\n      .subscribe({\r\n        next: (objectWithConfigIds) => {\r\n          for (const [configId, _] of Object.entries(objectWithConfigIds)) {\r\n            this.configurationService\r\n              .getOpenIDConfiguration(configId)\r\n              .subscribe((config) => {\r\n                this.loggerService.logDebug(\r\n                  config,\r\n                  'silent renew, periodic check finished!'\r\n                );\r\n\r\n                if (\r\n                  this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens(config)\r\n                ) {\r\n                  this.flowsDataService.resetSilentRenewRunning(config);\r\n                }\r\n              });\r\n          }\r\n        },\r\n        error: (error) => {\r\n          this.loggerService.logError(\r\n            currentConfig,\r\n            'silent renew failed!',\r\n            error\r\n          );\r\n        },\r\n      });\r\n  }\r\n\r\n  private getRefreshEvent(\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): Observable<boolean | CallbackContext> {\r\n    const shouldStartRefreshEvent =\r\n      this.shouldStartPeriodicallyCheckForConfig(config);\r\n\r\n    if (!shouldStartRefreshEvent) {\r\n      return of(null);\r\n    }\r\n\r\n    const refreshEvent$ = this.createRefreshEventForConfig(config, allConfigs);\r\n\r\n    this.publicEventsService.fireEvent(EventTypes.SilentRenewStarted);\r\n\r\n    return refreshEvent$.pipe(\r\n      catchError((error) => {\r\n        this.loggerService.logError(config, 'silent renew failed!', error);\r\n        this.publicEventsService.fireEvent(EventTypes.SilentRenewFailed, error);\r\n        this.flowsDataService.resetSilentRenewRunning(config);\r\n\r\n        return throwError(() => new Error(error));\r\n      })\r\n    );\r\n  }\r\n\r\n  private getSmallestRefreshTimeFromConfigs(\r\n    configsWithSilentRenewEnabled: OpenIdConfiguration[]\r\n  ): number {\r\n    const result = configsWithSilentRenewEnabled.reduce((prev, curr) =>\r\n      prev.tokenRefreshInSeconds < curr.tokenRefreshInSeconds ? prev : curr\r\n    );\r\n\r\n    return result.tokenRefreshInSeconds;\r\n  }\r\n\r\n  private getConfigsWithSilentRenewEnabled(\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): OpenIdConfiguration[] {\r\n    return allConfigs.filter((x) => x.silentRenew);\r\n  }\r\n\r\n  private createRefreshEventForConfig(\r\n    configuration: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): Observable<boolean | CallbackContext> {\r\n    this.loggerService.logDebug(configuration, 'starting silent renew...');\r\n\r\n    return this.configurationService\r\n      .getOpenIDConfiguration(configuration.configId)\r\n      .pipe(\r\n        switchMap((config) => {\r\n          if (!config?.silentRenew) {\r\n            this.resetAuthDataService.resetAuthorizationData(\r\n              config,\r\n              allConfigs\r\n            );\r\n\r\n            return of(null);\r\n          }\r\n\r\n          this.flowsDataService.setSilentRenewRunning(config);\r\n\r\n          if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens(config)) {\r\n            // Retrieve Dynamically Set Custom Params for refresh body\r\n            const customParamsRefresh: {\r\n              [key: string]: string | number | boolean;\r\n            } =\r\n              this.storagePersistenceService.read(\r\n                'storageCustomParamsRefresh',\r\n                config\r\n              ) || {};\r\n\r\n            const { customParamsRefreshTokenRequest } = config;\r\n\r\n            const mergedParams = {\r\n              ...customParamsRefreshTokenRequest,\r\n              ...customParamsRefresh,\r\n            };\r\n\r\n            // Refresh Session using Refresh tokens\r\n            return this.refreshSessionRefreshTokenService.refreshSessionWithRefreshTokens(\r\n              config,\r\n              allConfigs,\r\n              mergedParams\r\n            );\r\n          }\r\n\r\n          // Retrieve Dynamically Set Custom Params\r\n          const customParams: { [key: string]: string | number | boolean } =\r\n            this.storagePersistenceService.read(\r\n              'storageCustomParamsAuthRequest',\r\n              config\r\n            );\r\n\r\n          return this.refreshSessionIframeService.refreshSessionWithIframe(\r\n            config,\r\n            allConfigs,\r\n            customParams\r\n          );\r\n        })\r\n      );\r\n  }\r\n\r\n  private shouldStartPeriodicallyCheckForConfig(\r\n    config: OpenIdConfiguration\r\n  ): boolean {\r\n    const idToken = this.authStateService.getIdToken(config);\r\n    const isSilentRenewRunning =\r\n      this.flowsDataService.isSilentRenewRunning(config);\r\n    const isCodeFlowInProgress =\r\n      this.flowsDataService.isCodeFlowInProgress(config);\r\n    const userDataFromStore = this.userService.getUserDataFromStore(config);\r\n\r\n    this.loggerService.logDebug(\r\n      config,\r\n      `Checking: silentRenewRunning: ${isSilentRenewRunning}, isCodeFlowInProgress: ${isCodeFlowInProgress} - has idToken: ${!!idToken} - has userData: ${!!userDataFromStore}`\r\n    );\r\n\r\n    const shouldBeExecuted =\r\n      !!userDataFromStore &&\r\n      !isSilentRenewRunning &&\r\n      !!idToken &&\r\n      !isCodeFlowInProgress;\r\n\r\n    if (!shouldBeExecuted) {\r\n      return false;\r\n    }\r\n\r\n    const idTokenExpired =\r\n      this.authStateService.hasIdTokenExpiredAndRenewCheckIsEnabled(config);\r\n    const accessTokenExpired =\r\n      this.authStateService.hasAccessTokenExpiredIfExpiryExists(config);\r\n\r\n    return idTokenExpired || accessTokenExpired;\r\n  }\r\n}\r\n","import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { StoragePersistenceService } from '../../storage/storage-persistence.service';\r\nimport { PopupOptions } from './popup-options';\r\nimport { PopupResult } from './popup-result';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PopUpService {\r\n  private readonly STORAGE_IDENTIFIER = 'popupauth';\r\n\r\n  private popUp: Window;\r\n\r\n  private handle: number;\r\n\r\n  private readonly resultInternal$ = new Subject<PopupResult>();\r\n\r\n  get result$(): Observable<PopupResult> {\r\n    return this.resultInternal$.asObservable();\r\n  }\r\n\r\n  private get windowInternal(): Window {\r\n    return this.document.defaultView;\r\n  }\r\n\r\n  constructor(\r\n    @Inject(DOCUMENT) private readonly document: Document,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly storagePersistenceService: StoragePersistenceService\r\n  ) {}\r\n\r\n  isCurrentlyInPopup(config: OpenIdConfiguration): boolean {\r\n    if (this.canAccessSessionStorage()) {\r\n      const popup = this.storagePersistenceService.read(\r\n        this.STORAGE_IDENTIFIER,\r\n        config\r\n      );\r\n\r\n      return (\r\n        !!this.windowInternal.opener &&\r\n        this.windowInternal.opener !== this.windowInternal &&\r\n        !!popup\r\n      );\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  openPopUp(\r\n    url: string,\r\n    popupOptions: PopupOptions,\r\n    config: OpenIdConfiguration\r\n  ): void {\r\n    const optionsToPass = this.getOptions(popupOptions);\r\n\r\n    this.storagePersistenceService.write(\r\n      this.STORAGE_IDENTIFIER,\r\n      'true',\r\n      config\r\n    );\r\n\r\n    this.popUp = this.windowInternal.open(url, '_blank', optionsToPass);\r\n\r\n    if (!this.popUp) {\r\n      this.storagePersistenceService.remove(this.STORAGE_IDENTIFIER, config);\r\n      this.loggerService.logError(config, 'Could not open popup');\r\n\r\n      return;\r\n    }\r\n\r\n    this.loggerService.logDebug(config, 'Opened popup with url ' + url);\r\n\r\n    const listener = (event: MessageEvent): void => {\r\n      if (!event?.data || typeof event.data !== 'string') {\r\n        this.cleanUp(listener, config);\r\n\r\n        return;\r\n      }\r\n\r\n      this.loggerService.logDebug(\r\n        config,\r\n        'Received message from popup with url ' + event.data\r\n      );\r\n\r\n      this.resultInternal$.next({ userClosed: false, receivedUrl: event.data });\r\n\r\n      this.cleanUp(listener, config);\r\n    };\r\n\r\n    this.windowInternal.addEventListener('message', listener, false);\r\n\r\n    this.handle = this.windowInternal.setInterval(() => {\r\n      if (this.popUp?.closed) {\r\n        this.resultInternal$.next({ userClosed: true });\r\n\r\n        this.cleanUp(listener, config);\r\n      }\r\n    }, 200);\r\n  }\r\n\r\n  sendMessageToMainWindow(url: string): void {\r\n    if (this.windowInternal.opener) {\r\n      const href = this.windowInternal.location.href;\r\n\r\n      this.sendMessage(url, href);\r\n    }\r\n  }\r\n\r\n  private cleanUp(listener: any, config: OpenIdConfiguration): void {\r\n    this.windowInternal.removeEventListener('message', listener, false);\r\n    this.windowInternal.clearInterval(this.handle);\r\n\r\n    if (this.popUp) {\r\n      this.storagePersistenceService.remove(this.STORAGE_IDENTIFIER, config);\r\n      this.popUp.close();\r\n      this.popUp = null;\r\n    }\r\n  }\r\n\r\n  private sendMessage(url: string, href: string): void {\r\n    this.windowInternal.opener.postMessage(url, href);\r\n  }\r\n\r\n  private getOptions(popupOptions: PopupOptions): string {\r\n    const popupDefaultOptions: PopupOptions = {\r\n      width: 500,\r\n      height: 500,\r\n      left: 50,\r\n      top: 50,\r\n    };\r\n    const options: PopupOptions = {\r\n      ...popupDefaultOptions,\r\n      ...(popupOptions || {}),\r\n    };\r\n    const left: number =\r\n      this.windowInternal.screenLeft +\r\n      (this.windowInternal.outerWidth - options.width) / 2;\r\n    const top: number =\r\n      this.windowInternal.screenTop +\r\n      (this.windowInternal.outerHeight - options.height) / 2;\r\n\r\n    options.left = left;\r\n    options.top = top;\r\n\r\n    return Object.entries(options)\r\n      .map(\r\n        ([key, value]) =>\r\n          `${encodeURIComponent(key)}=${encodeURIComponent(value)}`\r\n      )\r\n      .join(',');\r\n  }\r\n\r\n  private canAccessSessionStorage(): boolean {\r\n    return (\r\n      typeof navigator !== 'undefined' &&\r\n      navigator.cookieEnabled &&\r\n      typeof Storage !== 'undefined'\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { forkJoin, Observable, of, throwError } from 'rxjs';\r\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\r\nimport { AutoLoginService } from '../auto-login/auto-login.service';\r\nimport { CallbackService } from '../callback/callback.service';\r\nimport { PeriodicallyTokenCheckService } from '../callback/periodically-token-check.service';\r\nimport { RefreshSessionService } from '../callback/refresh-session.service';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { CheckSessionService } from '../iframe/check-session.service';\r\nimport { SilentRenewService } from '../iframe/silent-renew.service';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { LoginResponse } from '../login/login-response';\r\nimport { PopUpService } from '../login/popup/popup.service';\r\nimport { EventTypes } from '../public-events/event-types';\r\nimport { PublicEventsService } from '../public-events/public-events.service';\r\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\r\nimport { UserService } from '../user-data/user.service';\r\nimport { CurrentUrlService } from '../utils/url/current-url.service';\r\nimport { AuthStateService } from './auth-state.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CheckAuthService {\r\n  constructor(\r\n    private readonly checkSessionService: CheckSessionService,\r\n    private readonly currentUrlService: CurrentUrlService,\r\n    private readonly silentRenewService: SilentRenewService,\r\n    private readonly userService: UserService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly authStateService: AuthStateService,\r\n    private readonly callbackService: CallbackService,\r\n    private readonly refreshSessionService: RefreshSessionService,\r\n    private readonly periodicallyTokenCheckService: PeriodicallyTokenCheckService,\r\n    private readonly popupService: PopUpService,\r\n    private readonly autoLoginService: AutoLoginService,\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly publicEventsService: PublicEventsService\r\n  ) {}\r\n\r\n  checkAuth(\r\n    configuration: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    url?: string\r\n  ): Observable<LoginResponse> {\r\n    this.publicEventsService.fireEvent(EventTypes.CheckingAuth);\r\n\r\n    const stateParamFromUrl =\r\n      this.currentUrlService.getStateParamFromCurrentUrl(url);\r\n\r\n    if (!!stateParamFromUrl) {\r\n      configuration = this.getConfigurationWithUrlState(\r\n        [configuration],\r\n        stateParamFromUrl\r\n      );\r\n\r\n      if (!configuration) {\r\n        return throwError(\r\n          () =>\r\n            new Error(\r\n              `could not find matching config for state ${stateParamFromUrl}`\r\n            )\r\n        );\r\n      }\r\n    }\r\n\r\n    return this.checkAuthWithConfig(configuration, allConfigs, url);\r\n  }\r\n\r\n  checkAuthMultiple(\r\n    allConfigs: OpenIdConfiguration[],\r\n    url?: string\r\n  ): Observable<LoginResponse[]> {\r\n    const stateParamFromUrl =\r\n      this.currentUrlService.getStateParamFromCurrentUrl(url);\r\n\r\n    if (stateParamFromUrl) {\r\n      const config = this.getConfigurationWithUrlState(\r\n        allConfigs,\r\n        stateParamFromUrl\r\n      );\r\n\r\n      if (!config) {\r\n        return throwError(\r\n          () =>\r\n            new Error(\r\n              `could not find matching config for state ${stateParamFromUrl}`\r\n            )\r\n        );\r\n      }\r\n\r\n      return this.composeMultipleLoginResults(allConfigs, config, url);\r\n    }\r\n\r\n    const configs = allConfigs;\r\n    const allChecks$ = configs.map((x) =>\r\n      this.checkAuthWithConfig(x, configs, url)\r\n    );\r\n\r\n    return forkJoin(allChecks$);\r\n  }\r\n\r\n  checkAuthIncludingServer(\r\n    configuration: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): Observable<LoginResponse> {\r\n    return this.checkAuthWithConfig(configuration, allConfigs).pipe(\r\n      switchMap((loginResponse) => {\r\n        const { isAuthenticated } = loginResponse;\r\n\r\n        if (isAuthenticated) {\r\n          return of(loginResponse);\r\n        }\r\n\r\n        return this.refreshSessionService\r\n          .forceRefreshSession(configuration, allConfigs)\r\n          .pipe(\r\n            tap((loginResponseAfterRefreshSession) => {\r\n              if (loginResponseAfterRefreshSession?.isAuthenticated) {\r\n                this.startCheckSessionAndValidation(configuration, allConfigs);\r\n              }\r\n            })\r\n          );\r\n      })\r\n    );\r\n  }\r\n\r\n  private checkAuthWithConfig(\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    url?: string\r\n  ): Observable<LoginResponse> {\r\n    if (!config) {\r\n      const errorMessage =\r\n        'Please provide at least one configuration before setting up the module';\r\n\r\n      this.loggerService.logError(config, errorMessage);\r\n\r\n      return of({\r\n        isAuthenticated: false,\r\n        errorMessage,\r\n        userData: null,\r\n        idToken: '',\r\n        accessToken: '',\r\n        configId: null,\r\n      });\r\n    }\r\n\r\n    const currentUrl = url || this.currentUrlService.getCurrentUrl();\r\n    const { configId, authority } = config;\r\n\r\n    this.loggerService.logDebug(\r\n      config,\r\n      `Working with config '${configId}' using ${authority}`\r\n    );\r\n\r\n    if (this.popupService.isCurrentlyInPopup(config)) {\r\n      this.popupService.sendMessageToMainWindow(currentUrl);\r\n\r\n      return of({\r\n        isAuthenticated: false,\r\n        errorMessage: '',\r\n        userData: null,\r\n        idToken: '',\r\n        accessToken: '',\r\n      });\r\n    }\r\n\r\n    const isCallback = this.callbackService.isCallback(currentUrl);\r\n\r\n    this.loggerService.logDebug(\r\n      config,\r\n      'currentUrl to check auth with: ',\r\n      currentUrl\r\n    );\r\n\r\n    const callback$ = isCallback\r\n      ? this.callbackService.handleCallbackAndFireEvents(\r\n          currentUrl,\r\n          config,\r\n          allConfigs\r\n        )\r\n      : of(null);\r\n\r\n    return callback$.pipe(\r\n      map(() => {\r\n        const isAuthenticated =\r\n          this.authStateService.areAuthStorageTokensValid(config);\r\n\r\n        if (isAuthenticated) {\r\n          this.startCheckSessionAndValidation(config, allConfigs);\r\n\r\n          if (!isCallback) {\r\n            this.authStateService.setAuthenticatedAndFireEvent(allConfigs);\r\n            this.userService.publishUserDataIfExists(config, allConfigs);\r\n          }\r\n        }\r\n\r\n        this.loggerService.logDebug(\r\n          config,\r\n          'checkAuth completed - firing events now. isAuthenticated: ' +\r\n            isAuthenticated\r\n        );\r\n\r\n        return {\r\n          isAuthenticated,\r\n          userData: this.userService.getUserDataFromStore(config),\r\n          accessToken: this.authStateService.getAccessToken(config),\r\n          idToken: this.authStateService.getIdToken(config),\r\n          configId,\r\n        };\r\n      }),\r\n      tap(({ isAuthenticated }) => {\r\n        this.publicEventsService.fireEvent(EventTypes.CheckingAuthFinished);\r\n\r\n        if (isAuthenticated) {\r\n          this.autoLoginService.checkSavedRedirectRouteAndNavigate(config);\r\n        }\r\n      }),\r\n      catchError(({ message }) => {\r\n        this.loggerService.logError(config, message);\r\n        this.publicEventsService.fireEvent(\r\n          EventTypes.CheckingAuthFinishedWithError,\r\n          message\r\n        );\r\n\r\n        return of({\r\n          isAuthenticated: false,\r\n          errorMessage: message,\r\n          userData: null,\r\n          idToken: '',\r\n          accessToken: '',\r\n          configId,\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  private startCheckSessionAndValidation(\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): void {\r\n    if (this.checkSessionService.isCheckSessionConfigured(config)) {\r\n      this.checkSessionService.start(config);\r\n    }\r\n\r\n    this.periodicallyTokenCheckService.startTokenValidationPeriodically(\r\n      allConfigs,\r\n      config\r\n    );\r\n\r\n    if (this.silentRenewService.isSilentRenewConfigured(config)) {\r\n      this.silentRenewService.getOrCreateIframe(config);\r\n    }\r\n  }\r\n\r\n  private getConfigurationWithUrlState(\r\n    configurations: OpenIdConfiguration[],\r\n    stateFromUrl: string\r\n  ): OpenIdConfiguration | null {\r\n    for (const config of configurations) {\r\n      const storedState = this.storagePersistenceService.read(\r\n        'authStateControl',\r\n        config\r\n      );\r\n\r\n      if (storedState === stateFromUrl) {\r\n        return config;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private composeMultipleLoginResults(\r\n    configurations: OpenIdConfiguration[],\r\n    activeConfig: OpenIdConfiguration,\r\n    url?: string\r\n  ): Observable<LoginResponse[]> {\r\n    const allOtherConfigs = configurations.filter(\r\n      (x) => x.configId !== activeConfig.configId\r\n    );\r\n\r\n    const currentConfigResult = this.checkAuthWithConfig(\r\n      activeConfig,\r\n      configurations,\r\n      url\r\n    );\r\n\r\n    const allOtherConfigResults = allOtherConfigs.map((config) => {\r\n      const { redirectUrl } = config;\r\n\r\n      return this.checkAuthWithConfig(config, configurations, redirectUrl);\r\n    });\r\n\r\n    return forkJoin([currentConfigResult, ...allOtherConfigResults]);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { FlowHelper } from '../../utils/flowHelper/flow-helper.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ResponseTypeValidationService {\r\n  constructor(\r\n    private readonly loggerService: LoggerService,\r\n    private readonly flowHelper: FlowHelper\r\n  ) {}\r\n\r\n  hasConfigValidResponseType(configuration: OpenIdConfiguration): boolean {\r\n    if (this.flowHelper.isCurrentFlowAnyImplicitFlow(configuration)) {\r\n      return true;\r\n    }\r\n\r\n    if (this.flowHelper.isCurrentFlowCodeFlow(configuration)) {\r\n      return true;\r\n    }\r\n\r\n    this.loggerService.logWarning(\r\n      configuration,\r\n      'module configured incorrectly, invalid response_type. Check the responseType in the config'\r\n    );\r\n\r\n    return false;\r\n  }\r\n}\r\n","import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable } from '@angular/core';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class RedirectService {\r\n  constructor(@Inject(DOCUMENT) private readonly document: Document) {}\r\n\r\n  redirectTo(url): void {\r\n    this.document.location.href = url;\r\n  }\r\n}\r\n","import { HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map, retry, switchMap } from 'rxjs/operators';\r\nimport { DataService } from '../../api/data.service';\r\nimport { AuthOptions } from '../../auth-options';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { StoragePersistenceService } from '../../storage/storage-persistence.service';\r\nimport { UrlService } from '../../utils/url/url.service';\r\nimport { ParResponse } from './par-response';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ParService {\r\n  constructor(\r\n    private readonly loggerService: LoggerService,\r\n    private readonly urlService: UrlService,\r\n    private readonly dataService: DataService,\r\n    private readonly storagePersistenceService: StoragePersistenceService\r\n  ) {}\r\n\r\n  postParRequest(\r\n    configuration: OpenIdConfiguration,\r\n    authOptions?: AuthOptions\r\n  ): Observable<ParResponse> {\r\n    let headers: HttpHeaders = new HttpHeaders();\r\n\r\n    headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n    const authWellKnownEndpoints = this.storagePersistenceService.read(\r\n      'authWellKnownEndPoints',\r\n      configuration\r\n    );\r\n\r\n    if (!authWellKnownEndpoints) {\r\n      return throwError(\r\n        () =>\r\n          new Error(\r\n            'Could not read PAR endpoint because authWellKnownEndPoints are not given'\r\n          )\r\n      );\r\n    }\r\n\r\n    const parEndpoint = authWellKnownEndpoints.parEndpoint;\r\n\r\n    if (!parEndpoint) {\r\n      return throwError(\r\n        () =>\r\n          new Error('Could not read PAR endpoint from authWellKnownEndpoints')\r\n      );\r\n    }\r\n\r\n    return this.urlService\r\n      .createBodyForParCodeFlowRequest(configuration, authOptions)\r\n      .pipe(\r\n        switchMap((data) => {\r\n          return this.dataService\r\n            .post(parEndpoint, data, configuration, headers)\r\n            .pipe(\r\n              retry(2),\r\n              map((response: any) => {\r\n                this.loggerService.logDebug(\r\n                  configuration,\r\n                  'par response: ',\r\n                  response\r\n                );\r\n\r\n                return {\r\n                  expiresIn: response.expires_in,\r\n                  requestUri: response.request_uri,\r\n                };\r\n              }),\r\n              catchError((error) => {\r\n                const errorMessage = `There was an error on ParService postParRequest`;\r\n\r\n                this.loggerService.logError(configuration, errorMessage, error);\r\n\r\n                return throwError(() => new Error(errorMessage));\r\n              })\r\n            );\r\n        })\r\n      );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { switchMap, take } from 'rxjs/operators';\r\nimport { AuthOptions } from '../../auth-options';\r\nimport { CheckAuthService } from '../../auth-state/check-auth.service';\r\nimport { AuthWellKnownService } from '../../config/auth-well-known/auth-well-known.service';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { RedirectService } from '../../utils/redirect/redirect.service';\r\nimport { UrlService } from '../../utils/url/url.service';\r\nimport { LoginResponse } from '../login-response';\r\nimport { PopupOptions } from '../popup/popup-options';\r\nimport { PopupResultReceivedUrl } from '../popup/popup-result';\r\nimport { PopUpService } from '../popup/popup.service';\r\nimport { ResponseTypeValidationService } from '../response-type-validation/response-type-validation.service';\r\nimport { ParResponse } from './par-response';\r\nimport { ParService } from './par.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ParLoginService {\r\n  constructor(\r\n    private readonly loggerService: LoggerService,\r\n    private readonly responseTypeValidationService: ResponseTypeValidationService,\r\n    private readonly urlService: UrlService,\r\n    private readonly redirectService: RedirectService,\r\n    private readonly authWellKnownService: AuthWellKnownService,\r\n    private readonly popupService: PopUpService,\r\n    private readonly checkAuthService: CheckAuthService,\r\n    private readonly parService: ParService\r\n  ) {}\r\n\r\n  loginPar(\r\n    configuration: OpenIdConfiguration,\r\n    authOptions?: AuthOptions\r\n  ): void {\r\n    if (\r\n      !this.responseTypeValidationService.hasConfigValidResponseType(\r\n        configuration\r\n      )\r\n    ) {\r\n      this.loggerService.logError(configuration, 'Invalid response type!');\r\n\r\n      return;\r\n    }\r\n\r\n    this.loggerService.logDebug(\r\n      configuration,\r\n      'BEGIN Authorize OIDC Flow, no auth data'\r\n    );\r\n\r\n    this.authWellKnownService\r\n      .queryAndStoreAuthWellKnownEndPoints(configuration)\r\n      .pipe(\r\n        switchMap(() =>\r\n          this.parService.postParRequest(configuration, authOptions)\r\n        )\r\n      )\r\n      .subscribe((response) => {\r\n        this.loggerService.logDebug(configuration, 'par response: ', response);\r\n\r\n        const url = this.urlService.getAuthorizeParUrl(\r\n          response.requestUri,\r\n          configuration\r\n        );\r\n\r\n        this.loggerService.logDebug(configuration, 'par request url: ', url);\r\n\r\n        if (!url) {\r\n          this.loggerService.logError(\r\n            configuration,\r\n            `Could not create URL with param ${response.requestUri}: '${url}'`\r\n          );\r\n\r\n          return;\r\n        }\r\n\r\n        if (authOptions.urlHandler) {\r\n          authOptions.urlHandler(url);\r\n        } else {\r\n          this.redirectService.redirectTo(url);\r\n        }\r\n      });\r\n  }\r\n\r\n  loginWithPopUpPar(\r\n    configuration: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    authOptions?: AuthOptions,\r\n    popupOptions?: PopupOptions\r\n  ): Observable<LoginResponse> {\r\n    const { configId } = configuration;\r\n\r\n    if (\r\n      !this.responseTypeValidationService.hasConfigValidResponseType(\r\n        configuration\r\n      )\r\n    ) {\r\n      const errorMessage = 'Invalid response type!';\r\n\r\n      this.loggerService.logError(configuration, errorMessage);\r\n\r\n      return throwError(() => new Error(errorMessage));\r\n    }\r\n\r\n    this.loggerService.logDebug(\r\n      configuration,\r\n      'BEGIN Authorize OIDC Flow with popup, no auth data'\r\n    );\r\n\r\n    return this.authWellKnownService\r\n      .queryAndStoreAuthWellKnownEndPoints(configuration)\r\n      .pipe(\r\n        switchMap(() =>\r\n          this.parService.postParRequest(configuration, authOptions)\r\n        ),\r\n        switchMap((response: ParResponse) => {\r\n          this.loggerService.logDebug(\r\n            configuration,\r\n            'par response: ',\r\n            response\r\n          );\r\n\r\n          const url = this.urlService.getAuthorizeParUrl(\r\n            response.requestUri,\r\n            configuration\r\n          );\r\n\r\n          this.loggerService.logDebug(configuration, 'par request url: ', url);\r\n\r\n          if (!url) {\r\n            const errorMessage = `Could not create URL with param ${response.requestUri}: 'url'`;\r\n\r\n            this.loggerService.logError(configuration, errorMessage);\r\n\r\n            return throwError(() => new Error(errorMessage));\r\n          }\r\n\r\n          this.popupService.openPopUp(url, popupOptions, configuration);\r\n\r\n          return this.popupService.result$.pipe(\r\n            take(1),\r\n            switchMap((result: PopupResultReceivedUrl) => {\r\n              const { userClosed, receivedUrl } = result;\r\n\r\n              if (userClosed) {\r\n                return of({\r\n                  isAuthenticated: false,\r\n                  errorMessage: 'User closed popup',\r\n                  userData: null,\r\n                  idToken: null,\r\n                  accessToken: null,\r\n                  configId,\r\n                });\r\n              }\r\n\r\n              return this.checkAuthService.checkAuth(\r\n                configuration,\r\n                allConfigs,\r\n                receivedUrl\r\n              );\r\n            })\r\n          );\r\n        })\r\n      );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { switchMap, take, tap } from 'rxjs/operators';\r\nimport { AuthOptions } from '../../auth-options';\r\nimport { CheckAuthService } from '../../auth-state/check-auth.service';\r\nimport { AuthWellKnownService } from '../../config/auth-well-known/auth-well-known.service';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { UrlService } from '../../utils/url/url.service';\r\nimport { LoginResponse } from '../login-response';\r\nimport { PopupOptions } from './popup-options';\r\nimport { PopUpService } from './popup.service';\r\nimport { ResponseTypeValidationService } from '../response-type-validation/response-type-validation.service';\r\nimport { PopupResultReceivedUrl } from './popup-result';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PopUpLoginService {\r\n  constructor(\r\n    private readonly loggerService: LoggerService,\r\n    private readonly responseTypeValidationService: ResponseTypeValidationService,\r\n    private readonly urlService: UrlService,\r\n    private readonly authWellKnownService: AuthWellKnownService,\r\n    private readonly popupService: PopUpService,\r\n    private readonly checkAuthService: CheckAuthService\r\n  ) {}\r\n\r\n  loginWithPopUpStandard(\r\n    configuration: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    authOptions?: AuthOptions,\r\n    popupOptions?: PopupOptions\r\n  ): Observable<LoginResponse> {\r\n    const { configId } = configuration;\r\n\r\n    if (\r\n      !this.responseTypeValidationService.hasConfigValidResponseType(\r\n        configuration\r\n      )\r\n    ) {\r\n      const errorMessage = 'Invalid response type!';\r\n\r\n      this.loggerService.logError(configuration, errorMessage);\r\n\r\n      return throwError(() => new Error(errorMessage));\r\n    }\r\n\r\n    this.loggerService.logDebug(\r\n      configuration,\r\n      'BEGIN Authorize OIDC Flow with popup, no auth data'\r\n    );\r\n\r\n    return this.authWellKnownService\r\n      .queryAndStoreAuthWellKnownEndPoints(configuration)\r\n      .pipe(\r\n        switchMap(() =>\r\n          this.urlService.getAuthorizeUrl(configuration, authOptions)\r\n        ),\r\n        tap((authUrl: string) =>\r\n          this.popupService.openPopUp(authUrl, popupOptions, configuration)\r\n        ),\r\n        switchMap(() => {\r\n          return this.popupService.result$.pipe(\r\n            take(1),\r\n            switchMap((result: PopupResultReceivedUrl) => {\r\n              const { userClosed, receivedUrl } = result;\r\n\r\n              if (userClosed) {\r\n                return of({\r\n                  isAuthenticated: false,\r\n                  errorMessage: 'User closed popup',\r\n                  userData: null,\r\n                  idToken: null,\r\n                  accessToken: null,\r\n                  configId,\r\n                });\r\n              }\r\n\r\n              return this.checkAuthService.checkAuth(\r\n                configuration,\r\n                allConfigs,\r\n                receivedUrl\r\n              );\r\n            })\r\n          );\r\n        })\r\n      );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthOptions } from '../../auth-options';\r\nimport { AuthWellKnownService } from '../../config/auth-well-known/auth-well-known.service';\r\nimport { FlowsDataService } from '../../flows/flows-data.service';\r\nimport { LoggerService } from '../../logging/logger.service';\r\nimport { RedirectService } from '../../utils/redirect/redirect.service';\r\nimport { UrlService } from '../../utils/url/url.service';\r\nimport { ResponseTypeValidationService } from '../response-type-validation/response-type-validation.service';\r\nimport { OpenIdConfiguration } from '../../config/openid-configuration';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class StandardLoginService {\r\n  constructor(\r\n    private readonly loggerService: LoggerService,\r\n    private readonly responseTypeValidationService: ResponseTypeValidationService,\r\n    private readonly urlService: UrlService,\r\n    private readonly redirectService: RedirectService,\r\n    private readonly authWellKnownService: AuthWellKnownService,\r\n    private readonly flowsDataService: FlowsDataService\r\n  ) {}\r\n\r\n  loginStandard(\r\n    configuration: OpenIdConfiguration,\r\n    authOptions?: AuthOptions\r\n  ): void {\r\n    if (\r\n      !this.responseTypeValidationService.hasConfigValidResponseType(\r\n        configuration\r\n      )\r\n    ) {\r\n      this.loggerService.logError(configuration, 'Invalid response type!');\r\n\r\n      return;\r\n    }\r\n\r\n    this.loggerService.logDebug(\r\n      configuration,\r\n      'BEGIN Authorize OIDC Flow, no auth data'\r\n    );\r\n    this.flowsDataService.setCodeFlowInProgress(configuration);\r\n\r\n    this.authWellKnownService\r\n      .queryAndStoreAuthWellKnownEndPoints(configuration)\r\n      .subscribe(() => {\r\n        const { urlHandler } = authOptions || {};\r\n\r\n        this.flowsDataService.resetSilentRenewRunning(configuration);\r\n\r\n        this.urlService\r\n          .getAuthorizeUrl(configuration, authOptions)\r\n          .subscribe((url: string) => {\r\n            if (!url) {\r\n              this.loggerService.logError(\r\n                configuration,\r\n                'Could not create URL',\r\n                url\r\n              );\r\n\r\n              return;\r\n            }\r\n\r\n            if (urlHandler) {\r\n              urlHandler(url);\r\n            } else {\r\n              this.redirectService.redirectTo(url);\r\n            }\r\n          });\r\n      });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { AuthOptions } from '../auth-options';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\r\nimport { LoginResponse } from './login-response';\r\nimport { ParLoginService } from './par/par-login.service';\r\nimport { PopUpLoginService } from './popup/popup-login.service';\r\nimport { PopupOptions } from './popup/popup-options';\r\nimport { PopUpService } from './popup/popup.service';\r\nimport { StandardLoginService } from './standard/standard-login.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class LoginService {\r\n  constructor(\r\n    private readonly parLoginService: ParLoginService,\r\n    private readonly popUpLoginService: PopUpLoginService,\r\n    private readonly standardLoginService: StandardLoginService,\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly popupService: PopUpService\r\n  ) {}\r\n\r\n  login(configuration: OpenIdConfiguration, authOptions?: AuthOptions): void {\r\n    const { usePushedAuthorisationRequests } = configuration;\r\n\r\n    if (authOptions?.customParams) {\r\n      this.storagePersistenceService.write(\r\n        'storageCustomParamsAuthRequest',\r\n        authOptions.customParams,\r\n        configuration\r\n      );\r\n    }\r\n\r\n    if (usePushedAuthorisationRequests) {\r\n      return this.parLoginService.loginPar(configuration, authOptions);\r\n    } else {\r\n      return this.standardLoginService.loginStandard(\r\n        configuration,\r\n        authOptions\r\n      );\r\n    }\r\n  }\r\n\r\n  loginWithPopUp(\r\n    configuration: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    authOptions?: AuthOptions,\r\n    popupOptions?: PopupOptions\r\n  ): Observable<LoginResponse> {\r\n    const isAlreadyInPopUp =\r\n      this.popupService.isCurrentlyInPopup(configuration);\r\n\r\n    if (isAlreadyInPopUp) {\r\n      return of({\r\n        errorMessage: 'There is already a popup open.',\r\n      } as LoginResponse);\r\n    }\r\n\r\n    const { usePushedAuthorisationRequests } = configuration;\r\n\r\n    if (authOptions?.customParams) {\r\n      this.storagePersistenceService.write(\r\n        'storageCustomParamsAuthRequest',\r\n        authOptions.customParams,\r\n        configuration\r\n      );\r\n    }\r\n\r\n    if (usePushedAuthorisationRequests) {\r\n      return this.parLoginService.loginWithPopUpPar(\r\n        configuration,\r\n        allConfigs,\r\n        authOptions,\r\n        popupOptions\r\n      );\r\n    }\r\n\r\n    return this.popUpLoginService.loginWithPopUpStandard(\r\n      configuration,\r\n      allConfigs,\r\n      authOptions,\r\n      popupOptions\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  ActivatedRouteSnapshot,\r\n  Router,\r\n  RouterStateSnapshot,\r\n  UrlTree,\r\n} from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { map, switchMap, take } from 'rxjs/operators';\r\nimport { CheckAuthService } from '../auth-state/check-auth.service';\r\nimport { ConfigurationService } from '../config/config.service';\r\nimport { LoginService } from '../login/login.service';\r\nimport { AutoLoginService } from './auto-login.service';\r\n\r\n/**\r\n * @deprecated Please do not use the `AutoLoginAllRoutesGuard` anymore as it is not recommended anymore, deprecated and will be removed in future versions of this library. More information [Why is AutoLoginAllRoutesGuard not recommended?](https://github.com/damienbod/angular-auth-oidc-client/issues/1549)\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class AutoLoginAllRoutesGuard {\r\n  constructor(\r\n    private readonly autoLoginService: AutoLoginService,\r\n    private readonly checkAuthService: CheckAuthService,\r\n    private readonly loginService: LoginService,\r\n    private readonly configurationService: ConfigurationService,\r\n    private readonly router: Router\r\n  ) {}\r\n\r\n  canLoad(): Observable<boolean> {\r\n    const url =\r\n      this.router\r\n        .getCurrentNavigation()\r\n        ?.extractedUrl.toString()\r\n        .substring(1) ?? '';\r\n\r\n    return checkAuth(\r\n      url,\r\n      this.configurationService,\r\n      this.checkAuthService,\r\n      this.autoLoginService,\r\n      this.loginService\r\n    );\r\n  }\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean | UrlTree> {\r\n    return checkAuth(\r\n      state.url,\r\n      this.configurationService,\r\n      this.checkAuthService,\r\n      this.autoLoginService,\r\n      this.loginService\r\n    );\r\n  }\r\n\r\n  canActivateChild(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean | UrlTree> {\r\n    return checkAuth(\r\n      state.url,\r\n      this.configurationService,\r\n      this.checkAuthService,\r\n      this.autoLoginService,\r\n      this.loginService\r\n    );\r\n  }\r\n}\r\n\r\nfunction checkAuth(\r\n  url: string,\r\n  configurationService: ConfigurationService,\r\n  checkAuthService: CheckAuthService,\r\n  autoLoginService: AutoLoginService,\r\n  loginService: LoginService\r\n): Observable<boolean> {\r\n  return configurationService.getOpenIDConfiguration().pipe(\r\n    switchMap((config) => {\r\n      const allConfigs = configurationService.getAllConfigurations();\r\n\r\n      return checkAuthService.checkAuth(config, allConfigs).pipe(\r\n        take(1),\r\n        map(({ isAuthenticated }) => {\r\n          if (isAuthenticated) {\r\n            autoLoginService.checkSavedRedirectRouteAndNavigate(config);\r\n          }\r\n\r\n          if (!isAuthenticated) {\r\n            autoLoginService.saveRedirectRoute(config, url);\r\n            loginService.login(config);\r\n          }\r\n\r\n          return isAuthenticated;\r\n        })\r\n      );\r\n    })\r\n  );\r\n}\r\n","import { Injectable, inject } from '@angular/core';\r\nimport {\r\n  ActivatedRouteSnapshot,\r\n  Router,\r\n  RouterStateSnapshot,\r\n} from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { AuthOptions } from '../auth-options';\r\nimport { AuthStateService } from '../auth-state/auth-state.service';\r\nimport { ConfigurationService } from '../config/config.service';\r\nimport { LoginService } from '../login/login.service';\r\nimport { AutoLoginService } from './auto-login.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AutoLoginPartialRoutesGuard {\r\n  constructor(\r\n    private readonly autoLoginService: AutoLoginService,\r\n    private readonly authStateService: AuthStateService,\r\n    private readonly loginService: LoginService,\r\n    private readonly configurationService: ConfigurationService,\r\n    private readonly router: Router\r\n  ) {}\r\n\r\n  canLoad(): Observable<boolean> {\r\n    const url =\r\n      this.router\r\n        .getCurrentNavigation()\r\n        ?.extractedUrl.toString()\r\n        .substring(1) ?? '';\r\n\r\n    return checkAuth(\r\n      url,\r\n      this.configurationService,\r\n      this.authStateService,\r\n      this.autoLoginService,\r\n      this.loginService\r\n    );\r\n  }\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean> {\r\n    const authOptions: AuthOptions | undefined = route?.data\r\n      ? { customParams: route.data }\r\n      : undefined;\r\n\r\n    return checkAuth(\r\n      state.url,\r\n      this.configurationService,\r\n      this.authStateService,\r\n      this.autoLoginService,\r\n      this.loginService,\r\n      authOptions\r\n    );\r\n  }\r\n\r\n  canActivateChild(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean> {\r\n    const authOptions: AuthOptions | undefined = route?.data\r\n      ? { customParams: route.data }\r\n      : undefined;\r\n\r\n    return checkAuth(\r\n      state.url,\r\n      this.configurationService,\r\n      this.authStateService,\r\n      this.autoLoginService,\r\n      this.loginService,\r\n      authOptions\r\n    );\r\n  }\r\n}\r\n\r\nexport function autoLoginPartialRoutesGuard(): Observable<boolean> {\r\n  const configurationService = inject(ConfigurationService);\r\n  const authStateService = inject(AuthStateService);\r\n  const loginService = inject(LoginService);\r\n  const autoLoginService = inject(AutoLoginService);\r\n  const router = inject(Router);\r\n\r\n  const url =\r\n    router.getCurrentNavigation()?.extractedUrl.toString().substring(1) ?? '';\r\n\r\n  return checkAuth(\r\n    url,\r\n    configurationService,\r\n    authStateService,\r\n    autoLoginService,\r\n    loginService\r\n  );\r\n}\r\n\r\nfunction checkAuth(\r\n  url: string,\r\n  configurationService: ConfigurationService,\r\n  authStateService: AuthStateService,\r\n  autoLoginService: AutoLoginService,\r\n  loginService: LoginService,\r\n  authOptions?: AuthOptions\r\n): Observable<boolean> {\r\n  return configurationService.getOpenIDConfiguration().pipe(\r\n    map((configuration) => {\r\n      const isAuthenticated =\r\n        authStateService.areAuthStorageTokensValid(configuration);\r\n\r\n      if (isAuthenticated) {\r\n        autoLoginService.checkSavedRedirectRouteAndNavigate(configuration);\r\n      }\r\n\r\n      if (!isAuthenticated) {\r\n        autoLoginService.saveRedirectRoute(configuration, url);\r\n        if (authOptions) {\r\n          loginService.login(configuration, authOptions);\r\n        } else {\r\n          loginService.login(configuration);\r\n        }\r\n      }\r\n\r\n      return isAuthenticated;\r\n    })\r\n  );\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ClosestMatchingRouteService {\r\n  getConfigIdForClosestMatchingRoute(\r\n    route: string,\r\n    configurations: OpenIdConfiguration[]\r\n  ): ClosestMatchingRouteResult {\r\n    for (const config of configurations) {\r\n      const { secureRoutes } = config;\r\n\r\n      for (const configuredRoute of secureRoutes) {\r\n        if (route.startsWith(configuredRoute)) {\r\n          return {\r\n            matchingRoute: configuredRoute,\r\n            matchingConfig: config,\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      matchingRoute: null,\r\n      matchingConfig: null,\r\n    };\r\n  }\r\n}\r\n\r\nexport interface ClosestMatchingRouteResult {\r\n  matchingRoute: string;\r\n  matchingConfig: OpenIdConfiguration;\r\n}\r\n","import {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpHandlerFn,\r\n  HttpInterceptor,\r\n  HttpInterceptorFn,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthStateService } from '../auth-state/auth-state.service';\r\nimport { ConfigurationService } from '../config/config.service';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { ClosestMatchingRouteService } from './closest-matching-route.service';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  constructor(\r\n    private readonly authStateService: AuthStateService,\r\n    private readonly configurationService: ConfigurationService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly closestMatchingRouteService: ClosestMatchingRouteService\r\n  ) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    return interceptRequest(req, next.handle, {\r\n      configurationService: this.configurationService,\r\n      authStateService: this.authStateService,\r\n      closestMatchingRouteService: this.closestMatchingRouteService,\r\n      loggerService: this.loggerService,\r\n    });\r\n  }\r\n}\r\n\r\nexport function authInterceptor(): HttpInterceptorFn {\r\n  return (req, next) => {\r\n    return interceptRequest(req, next, {\r\n      configurationService: inject(ConfigurationService),\r\n      authStateService: inject(AuthStateService),\r\n      closestMatchingRouteService: inject(ClosestMatchingRouteService),\r\n      loggerService: inject(LoggerService),\r\n    });\r\n  };\r\n}\r\n\r\nfunction interceptRequest(\r\n  req: HttpRequest<any>,\r\n  next: HttpHandlerFn,\r\n  deps: {\r\n    authStateService: AuthStateService;\r\n    configurationService: ConfigurationService;\r\n    loggerService: LoggerService;\r\n    closestMatchingRouteService: ClosestMatchingRouteService;\r\n  }\r\n): Observable<HttpEvent<unknown>> {\r\n  if (!deps.configurationService.hasAtLeastOneConfig()) {\r\n    return next(req);\r\n  }\r\n\r\n  const allConfigurations = deps.configurationService.getAllConfigurations();\r\n  const allRoutesConfigured = allConfigurations.map(\r\n    (x) => x.secureRoutes || []\r\n  );\r\n  const allRoutesConfiguredFlat = [].concat(...allRoutesConfigured) as string[];\r\n\r\n  if (allRoutesConfiguredFlat.length === 0) {\r\n    deps.loggerService.logDebug(\r\n      allConfigurations[0],\r\n      `No routes to check configured`\r\n    );\r\n\r\n    return next(req);\r\n  }\r\n\r\n  const { matchingConfig, matchingRoute } =\r\n    deps.closestMatchingRouteService.getConfigIdForClosestMatchingRoute(\r\n      req.url,\r\n      allConfigurations\r\n    );\r\n\r\n  if (!matchingConfig) {\r\n    deps.loggerService.logDebug(\r\n      allConfigurations[0],\r\n      `Did not find any configured route for route ${req.url}`\r\n    );\r\n\r\n    return next(req);\r\n  }\r\n\r\n  deps.loggerService.logDebug(\r\n    matchingConfig,\r\n    `'${req.url}' matches configured route '${matchingRoute}'`\r\n  );\r\n  const token = deps.authStateService.getAccessToken(matchingConfig);\r\n\r\n  if (!token) {\r\n    deps.loggerService.logDebug(\r\n      matchingConfig,\r\n      `Wanted to add token to ${req.url} but found no token: '${token}'`\r\n    );\r\n\r\n    return next(req);\r\n  }\r\n\r\n  deps.loggerService.logDebug(\r\n    matchingConfig,\r\n    `'${req.url}' matches configured route '${matchingRoute}', adding token`\r\n  );\r\n  req = req.clone({\r\n    headers: req.headers.set('Authorization', 'Bearer ' + token),\r\n  });\r\n\r\n  return next(req);\r\n}\r\n","export function removeNullAndUndefinedValues(obj: any): any {\r\n  const copy = { ...obj };\r\n\r\n  for (const key in obj) {\r\n    if (obj[key] === undefined || obj[key] === null) {\r\n      delete copy[key];\r\n    }\r\n  }\r\n\r\n  return copy;\r\n}\r\n","import { HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { catchError, concatMap, retry, switchMap } from 'rxjs/operators';\r\nimport { DataService } from '../api/data.service';\r\nimport { LogoutAuthOptions } from '../auth-options';\r\nimport { OpenIdConfiguration } from '../config/openid-configuration';\r\nimport { ResetAuthDataService } from '../flows/reset-auth-data.service';\r\nimport { CheckSessionService } from '../iframe/check-session.service';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { StoragePersistenceService } from '../storage/storage-persistence.service';\r\nimport { removeNullAndUndefinedValues } from '../utils/object/object.helper';\r\nimport { RedirectService } from '../utils/redirect/redirect.service';\r\nimport { UrlService } from '../utils/url/url.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class LogoffRevocationService {\r\n  constructor(\r\n    private readonly dataService: DataService,\r\n    private readonly storagePersistenceService: StoragePersistenceService,\r\n    private readonly loggerService: LoggerService,\r\n    private readonly urlService: UrlService,\r\n    private readonly checkSessionService: CheckSessionService,\r\n    private readonly resetAuthDataService: ResetAuthDataService,\r\n    private readonly redirectService: RedirectService\r\n  ) {}\r\n\r\n  // Logs out on the server and the local client.\r\n  // If the server state has changed, check session, then only a local logout.\r\n  logoff(\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    logoutAuthOptions?: LogoutAuthOptions\r\n  ): Observable<unknown> {\r\n    this.loggerService.logDebug(\r\n      config,\r\n      'logoff, remove auth',\r\n      logoutAuthOptions\r\n    );\r\n\r\n    const { urlHandler, customParams } = logoutAuthOptions || {};\r\n\r\n    const endSessionUrl = this.urlService.getEndSessionUrl(\r\n      config,\r\n      customParams\r\n    );\r\n\r\n    if (!endSessionUrl) {\r\n      this.loggerService.logDebug(\r\n        config,\r\n        'No endsessionUrl present. Logoff was only locally. Returning.'\r\n      );\r\n\r\n      return of(null);\r\n    }\r\n\r\n    if (this.checkSessionService.serverStateChanged(config)) {\r\n      this.loggerService.logDebug(\r\n        config,\r\n        'Server State changed. Logoff was only locally. Returning.'\r\n      );\r\n\r\n      return of(null);\r\n    }\r\n\r\n    if (urlHandler) {\r\n      this.loggerService.logDebug(\r\n        config,\r\n        `Custom UrlHandler found. Using this to handle logoff with url '${endSessionUrl}'`\r\n      );\r\n      urlHandler(endSessionUrl);\r\n      this.resetAuthDataService.resetAuthorizationData(config, allConfigs);\r\n\r\n      return of(null);\r\n    }\r\n\r\n    return this.logoffInternal(\r\n      logoutAuthOptions,\r\n      endSessionUrl,\r\n      config,\r\n      allConfigs\r\n    );\r\n  }\r\n\r\n  logoffLocal(\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): void {\r\n    this.resetAuthDataService.resetAuthorizationData(config, allConfigs);\r\n    this.checkSessionService.stop();\r\n  }\r\n\r\n  logoffLocalMultiple(allConfigs: OpenIdConfiguration[]): void {\r\n    allConfigs.forEach((configuration) =>\r\n      this.logoffLocal(configuration, allConfigs)\r\n    );\r\n  }\r\n\r\n  // The refresh token and and the access token are revoked on the server. If the refresh token does not exist\r\n  // only the access token is revoked. Then the logout run.\r\n  logoffAndRevokeTokens(\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[],\r\n    logoutAuthOptions?: LogoutAuthOptions\r\n  ): Observable<any> {\r\n    const { revocationEndpoint } =\r\n      this.storagePersistenceService.read('authWellKnownEndPoints', config) ||\r\n      {};\r\n\r\n    if (!revocationEndpoint) {\r\n      this.loggerService.logDebug(config, 'revocation endpoint not supported');\r\n\r\n      return this.logoff(config, allConfigs, logoutAuthOptions);\r\n    }\r\n\r\n    if (this.storagePersistenceService.getRefreshToken(config)) {\r\n      return this.revokeRefreshToken(config).pipe(\r\n        switchMap((_) => this.revokeAccessToken(config)),\r\n        catchError((error) => {\r\n          const errorMessage = `revoke token failed`;\r\n\r\n          this.loggerService.logError(config, errorMessage, error);\r\n\r\n          return throwError(() => new Error(errorMessage));\r\n        }),\r\n        concatMap(() => this.logoff(config, allConfigs, logoutAuthOptions))\r\n      );\r\n    } else {\r\n      return this.revokeAccessToken(config).pipe(\r\n        catchError((error) => {\r\n          const errorMessage = `revoke accessToken failed`;\r\n\r\n          this.loggerService.logError(config, errorMessage, error);\r\n\r\n          return throwError(() => new Error(errorMessage));\r\n        }),\r\n        concatMap(() => this.logoff(config, allConfigs, logoutAuthOptions))\r\n      );\r\n    }\r\n  }\r\n\r\n  // https://tools.ietf.org/html/rfc7009\r\n  // revokes an access token on the STS. If no token is provided, then the token from\r\n  // the storage is revoked. You can pass any token to revoke. This makes it possible to\r\n  // manage your own tokens. The is a public API.\r\n  revokeAccessToken(\r\n    configuration: OpenIdConfiguration,\r\n    accessToken?: any\r\n  ): Observable<any> {\r\n    const accessTok =\r\n      accessToken ||\r\n      this.storagePersistenceService.getAccessToken(configuration);\r\n    const body = this.urlService.createRevocationEndpointBodyAccessToken(\r\n      accessTok,\r\n      configuration\r\n    );\r\n\r\n    return this.sendRevokeRequest(configuration, body);\r\n  }\r\n\r\n  // https://tools.ietf.org/html/rfc7009\r\n  // revokes an refresh token on the STS. This is only required in the code flow with refresh tokens.\r\n  // If no token is provided, then the token from the storage is revoked. You can pass any token to revoke.\r\n  // This makes it possible to manage your own tokens.\r\n  revokeRefreshToken(\r\n    configuration: OpenIdConfiguration,\r\n    refreshToken?: any\r\n  ): Observable<any> {\r\n    const refreshTok =\r\n      refreshToken ||\r\n      this.storagePersistenceService.getRefreshToken(configuration);\r\n    const body = this.urlService.createRevocationEndpointBodyRefreshToken(\r\n      refreshTok,\r\n      configuration\r\n    );\r\n\r\n    return this.sendRevokeRequest(configuration, body);\r\n  }\r\n\r\n  private logoffInternal(\r\n    logoutAuthOptions: LogoutAuthOptions,\r\n    endSessionUrl: string,\r\n    config: OpenIdConfiguration,\r\n    allConfigs: OpenIdConfiguration[]\r\n  ): Observable<unknown> {\r\n    const { logoffMethod, customParams } = logoutAuthOptions || {};\r\n\r\n    if (!logoffMethod || logoffMethod === 'GET') {\r\n      this.redirectService.redirectTo(endSessionUrl);\r\n\r\n      this.resetAuthDataService.resetAuthorizationData(config, allConfigs);\r\n\r\n      return of(null);\r\n    }\r\n\r\n    const { state, logout_hint, ui_locales } = customParams || {};\r\n    const { clientId } = config;\r\n    const idToken = this.storagePersistenceService.getIdToken(config);\r\n    const postLogoutRedirectUrl =\r\n      this.urlService.getPostLogoutRedirectUrl(config);\r\n    const headers = this.getHeaders();\r\n    const { url } = this.urlService.getEndSessionEndpoint(config);\r\n    const body = {\r\n      id_token_hint: idToken,\r\n      client_id: clientId,\r\n      post_logout_redirect_uri: postLogoutRedirectUrl,\r\n      state,\r\n      logout_hint,\r\n      ui_locales,\r\n    };\r\n    const bodyWithoutNullOrUndefined = removeNullAndUndefinedValues(body);\r\n\r\n    this.resetAuthDataService.resetAuthorizationData(config, allConfigs);\r\n\r\n    return this.dataService.post(\r\n      url,\r\n      bodyWithoutNullOrUndefined,\r\n      config,\r\n      headers\r\n    );\r\n  }\r\n\r\n  private sendRevokeRequest(\r\n    configuration: OpenIdConfiguration,\r\n    body: string\r\n  ): Observable<any> {\r\n    const url = this.urlService.getRevocationEndpointUrl(configuration);\r\n    const headers = this.getHeaders();\r\n\r\n    return this.dataService.post(url, body, configuration, headers).pipe(\r\n      retry(2),\r\n      switchMap((response: any) => {\r\n        this.loggerService.logDebug(\r\n          configuration,\r\n          'revocation endpoint post response: ',\r\n          response\r\n        );\r\n\r\n        return of(response);\r\n      }),\r\n      catchError((error) => {\r\n        const errorMessage = `Revocation request failed`;\r\n\r\n        this.loggerService.logError(configuration, errorMessage, error);\r\n\r\n        return throwError(() => new Error(errorMessage));\r\n      })\r\n    );\r\n  }\r\n\r\n  private getHeaders(): HttpHeaders {\r\n    let headers: HttpHeaders = new HttpHeaders();\r\n\r\n    headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n    return headers;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { concatMap, map } from 'rxjs/operators';\r\nimport { AuthOptions, LogoutAuthOptions } from './auth-options';\r\nimport { AuthenticatedResult } from './auth-state/auth-result';\r\nimport { AuthStateService } from './auth-state/auth-state.service';\r\nimport { CheckAuthService } from './auth-state/check-auth.service';\r\nimport { CallbackService } from './callback/callback.service';\r\nimport { RefreshSessionService } from './callback/refresh-session.service';\r\nimport { AuthWellKnownEndpoints } from './config/auth-well-known/auth-well-known-endpoints';\r\nimport { AuthWellKnownService } from './config/auth-well-known/auth-well-known.service';\r\nimport { ConfigurationService } from './config/config.service';\r\nimport { OpenIdConfiguration } from './config/openid-configuration';\r\nimport { FlowsDataService } from './flows/flows-data.service';\r\nimport { CheckSessionService } from './iframe/check-session.service';\r\nimport { LoginResponse } from './login/login-response';\r\nimport { LoginService } from './login/login.service';\r\nimport { PopupOptions } from './login/popup/popup-options';\r\nimport { LogoffRevocationService } from './logoff-revoke/logoff-revocation.service';\r\nimport { UserService } from './user-data/user.service';\r\nimport { UserDataResult } from './user-data/userdata-result';\r\nimport { TokenHelperService } from './utils/tokenHelper/token-helper.service';\r\nimport { UrlService } from './utils/url/url.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OidcSecurityService {\r\n  /**\r\n   * Provides information about the user after they have logged in.\r\n   *\r\n   * @returns Returns an object containing either the user data directly (single config) or\r\n   * the user data per config in case you are running with multiple configs\r\n   */\r\n  get userData$(): Observable<UserDataResult> {\r\n    return this.userService.userData$;\r\n  }\r\n\r\n  /**\r\n   * Emits each time an authorization event occurs.\r\n   *\r\n   * @returns Returns an object containing if you are authenticated or not.\r\n   * Single Config: true if config is authenticated, false if not.\r\n   * Multiple Configs: true is all configs are authenticated, false if only one of them is not\r\n   *\r\n   * The `allConfigsAuthenticated` property contains the auth information _per config_.\r\n   */\r\n  get isAuthenticated$(): Observable<AuthenticatedResult> {\r\n    return this.authStateService.authenticated$;\r\n  }\r\n\r\n  /**\r\n   * Emits each time the server sends a CheckSession event and the value changed. This property will always return\r\n   * true.\r\n   */\r\n  get checkSessionChanged$(): Observable<boolean> {\r\n    return this.checkSessionService.checkSessionChanged$;\r\n  }\r\n\r\n  /**\r\n   * Emits on a Security Token Service callback. The observable will never contain a value.\r\n   */\r\n  get stsCallback$(): Observable<any> {\r\n    return this.callbackService.stsCallback$;\r\n  }\r\n\r\n  constructor(\r\n    private readonly checkSessionService: CheckSessionService,\r\n    private readonly checkAuthService: CheckAuthService,\r\n    private readonly userService: UserService,\r\n    private readonly tokenHelperService: TokenHelperService,\r\n    private readonly configurationService: ConfigurationService,\r\n    private readonly authStateService: AuthStateService,\r\n    private readonly flowsDataService: FlowsDataService,\r\n    private readonly callbackService: CallbackService,\r\n    private readonly logoffRevocationService: LogoffRevocationService,\r\n    private readonly loginService: LoginService,\r\n    private readonly refreshSessionService: RefreshSessionService,\r\n    private readonly urlService: UrlService,\r\n    private readonly authWellKnownService: AuthWellKnownService\r\n  ) {}\r\n\r\n  preloadAuthWellKnownDocument(\r\n    configId?: string\r\n  ): Observable<AuthWellKnownEndpoints> {\r\n    return this.configurationService\r\n      .getOpenIDConfiguration(configId)\r\n      .pipe(\r\n        concatMap((config) =>\r\n          this.authWellKnownService.queryAndStoreAuthWellKnownEndPoints(config)\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Returns the currently active OpenID configurations.\r\n   *\r\n   * @returns an array of OpenIdConfigurations.\r\n   */\r\n  getConfigurations(): OpenIdConfiguration[] {\r\n    return this.configurationService.getAllConfigurations();\r\n  }\r\n\r\n  /**\r\n   * Returns a single active OpenIdConfiguration.\r\n   *\r\n   * @param configId The configId to identify the config. If not passed, the first one is being returned\r\n   */\r\n  getConfiguration(configId?: string): Observable<OpenIdConfiguration> {\r\n    return this.configurationService.getOpenIDConfiguration(configId);\r\n  }\r\n\r\n  /**\r\n   * Returns the userData for a configuration\r\n   *\r\n   * @param configId The configId to identify the config. If not passed, the first one is being used\r\n   */\r\n  getUserData(configId?: string): Observable<any> {\r\n    return this.configurationService\r\n      .getOpenIDConfiguration(configId)\r\n      .pipe(map((config) => this.userService.getUserDataFromStore(config)));\r\n  }\r\n\r\n  /**\r\n   * Starts the complete setup flow for one configuration. Calling will start the entire authentication flow, and the returned observable\r\n   * will denote whether the user was successfully authenticated including the user data, the access token, the configId and\r\n   * an error message in case an error happened\r\n   *\r\n   * @param url The URL to perform the authorization on the behalf of.\r\n   * @param configId The configId to perform the authorization on the behalf of. If not passed, the first configs will be taken\r\n   *\r\n   * @returns An object `LoginResponse` containing all information about the login\r\n   */\r\n  checkAuth(url?: string, configId?: string): Observable<LoginResponse> {\r\n    return this.configurationService\r\n      .getOpenIDConfigurations(configId)\r\n      .pipe(\r\n        concatMap(({ allConfigs, currentConfig }) =>\r\n          this.checkAuthService.checkAuth(currentConfig, allConfigs, url)\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Starts the complete setup flow for multiple configurations.\r\n   * Calling will start the entire authentication flow, and the returned observable\r\n   * will denote whether the user was successfully authenticated including the user data, the access token, the configId and\r\n   * an error message in case an error happened in an array for each config which was provided\r\n   *\r\n   * @param url The URL to perform the authorization on the behalf of.\r\n   *\r\n   * @returns An array of `LoginResponse` objects containing all information about the logins\r\n   */\r\n  checkAuthMultiple(url?: string): Observable<LoginResponse[]> {\r\n    return this.configurationService\r\n      .getOpenIDConfigurations()\r\n      .pipe(\r\n        concatMap(({ allConfigs }) =>\r\n          this.checkAuthService.checkAuthMultiple(allConfigs, url)\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Provides information about the current authenticated state\r\n   *\r\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\r\n   *\r\n   * @returns A boolean whether the config is authenticated or not.\r\n   */\r\n  isAuthenticated(configId?: string): Observable<boolean> {\r\n    return this.configurationService\r\n      .getOpenIDConfiguration(configId)\r\n      .pipe(map((config) => this.authStateService.isAuthenticated(config)));\r\n  }\r\n\r\n  /**\r\n   * Checks the server for an authenticated session using the iframe silent renew if not locally authenticated.\r\n   */\r\n  checkAuthIncludingServer(configId?: string): Observable<LoginResponse> {\r\n    return this.configurationService\r\n      .getOpenIDConfigurations(configId)\r\n      .pipe(\r\n        concatMap(({ allConfigs, currentConfig }) =>\r\n          this.checkAuthService.checkAuthIncludingServer(\r\n            currentConfig,\r\n            allConfigs\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Returns the access token for the login scenario.\r\n   *\r\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\r\n   *\r\n   * @returns A string with the access token.\r\n   */\r\n  getAccessToken(configId?: string): Observable<string> {\r\n    return this.configurationService\r\n      .getOpenIDConfiguration(configId)\r\n      .pipe(map((config) => this.authStateService.getAccessToken(config)));\r\n  }\r\n\r\n  /**\r\n   * Returns the ID token for the sign-in.\r\n   *\r\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\r\n   *\r\n   * @returns A string with the id token.\r\n   */\r\n  getIdToken(configId?: string): Observable<string> {\r\n    return this.configurationService\r\n      .getOpenIDConfiguration(configId)\r\n      .pipe(map((config) => this.authStateService.getIdToken(config)));\r\n  }\r\n\r\n  /**\r\n   * Returns the refresh token, if present, for the sign-in.\r\n   *\r\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\r\n   *\r\n   * @returns A string with the refresh token.\r\n   */\r\n  getRefreshToken(configId?: string): Observable<string> {\r\n    return this.configurationService\r\n      .getOpenIDConfiguration(configId)\r\n      .pipe(map((config) => this.authStateService.getRefreshToken(config)));\r\n  }\r\n\r\n  /**\r\n   * Returns the authentication result, if present, for the sign-in.\r\n   *\r\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\r\n   *\r\n   * @returns A object with the authentication result\r\n   */\r\n  getAuthenticationResult(configId?: string): Observable<any> {\r\n    return this.configurationService\r\n      .getOpenIDConfiguration(configId)\r\n      .pipe(\r\n        map((config) => this.authStateService.getAuthenticationResult(config))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Returns the payload from the ID token.\r\n   *\r\n   * @param encode Set to true if the payload is base64 encoded\r\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\r\n   *\r\n   * @returns The payload from the id token.\r\n   */\r\n  getPayloadFromIdToken(encode = false, configId?: string): Observable<any> {\r\n    return this.configurationService.getOpenIDConfiguration(configId).pipe(\r\n      map((config) => {\r\n        const token = this.authStateService.getIdToken(config);\r\n\r\n        return this.tokenHelperService.getPayloadFromToken(\r\n          token,\r\n          encode,\r\n          config\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the payload from the access token.\r\n   *\r\n   * @param encode Set to true if the payload is base64 encoded\r\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\r\n   *\r\n   * @returns The payload from the access token.\r\n   */\r\n  getPayloadFromAccessToken(\r\n    encode = false,\r\n    configId?: string\r\n  ): Observable<any> {\r\n    return this.configurationService.getOpenIDConfiguration(configId).pipe(\r\n      map((config) => {\r\n        const token = this.authStateService.getAccessToken(config);\r\n\r\n        return this.tokenHelperService.getPayloadFromToken(\r\n          token,\r\n          encode,\r\n          config\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sets a custom state for the authorize request.\r\n   *\r\n   * @param state The state to set.\r\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\r\n   */\r\n  setState(state: string, configId?: string): Observable<boolean> {\r\n    return this.configurationService\r\n      .getOpenIDConfiguration(configId)\r\n      .pipe(\r\n        map((config) =>\r\n          this.flowsDataService.setAuthStateControl(state, config)\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Gets the state value used for the authorize request.\r\n   *\r\n   * @param configId The configId to check the information for. If not passed, the first configs will be taken\r\n   *\r\n   * @returns The state value used for the authorize request.\r\n   */\r\n  getState(configId?: string): Observable<string> {\r\n    return this.configurationService\r\n      .getOpenIDConfiguration(configId)\r\n      .pipe(map((config) => this.flowsDataService.getAuthStateControl(config)));\r\n  }\r\n\r\n  /**\r\n   * Redirects the user to the Security Token Service to begin the authentication process.\r\n   *\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   * @param authOptions The custom options for the the authentication request.\r\n   */\r\n  authorize(configId?: string, authOptions?: AuthOptions): void {\r\n    this.configurationService\r\n      .getOpenIDConfiguration(configId)\r\n      .subscribe((config) => this.loginService.login(config, authOptions));\r\n  }\r\n\r\n  /**\r\n   * Opens the Security Token Service in a new window to begin the authentication process.\r\n   *\r\n   * @param authOptions The custom options for the authentication request.\r\n   * @param popupOptions The configuration for the popup window.\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   *\r\n   * @returns An `Observable<LoginResponse>` containing all information about the login\r\n   */\r\n  authorizeWithPopUp(\r\n    authOptions?: AuthOptions,\r\n    popupOptions?: PopupOptions,\r\n    configId?: string\r\n  ): Observable<LoginResponse> {\r\n    return this.configurationService\r\n      .getOpenIDConfigurations(configId)\r\n      .pipe(\r\n        concatMap(({ allConfigs, currentConfig }) =>\r\n          this.loginService.loginWithPopUp(\r\n            currentConfig,\r\n            allConfigs,\r\n            authOptions,\r\n            popupOptions\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Manually refreshes the session.\r\n   *\r\n   * @param customParams Custom parameters to pass to the refresh request.\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   *\r\n   * @returns An `Observable<LoginResponse>` containing all information about the login\r\n   */\r\n  forceRefreshSession(\r\n    customParams?: { [key: string]: string | number | boolean },\r\n    configId?: string\r\n  ): Observable<LoginResponse> {\r\n    return this.configurationService\r\n      .getOpenIDConfigurations(configId)\r\n      .pipe(\r\n        concatMap(({ allConfigs, currentConfig }) =>\r\n          this.refreshSessionService.userForceRefreshSession(\r\n            currentConfig,\r\n            allConfigs,\r\n            customParams\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Revokes the refresh token (if present) and the access token on the server and then performs the logoff operation.\r\n   * The refresh token and and the access token are revoked on the server. If the refresh token does not exist\r\n   * only the access token is revoked. Then the logout run.\r\n   *\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   * @param logoutAuthOptions The custom options for the request.\r\n   *\r\n   * @returns An observable when the action is finished\r\n   */\r\n  logoffAndRevokeTokens(\r\n    configId?: string,\r\n    logoutAuthOptions?: LogoutAuthOptions\r\n  ): Observable<any> {\r\n    return this.configurationService\r\n      .getOpenIDConfigurations(configId)\r\n      .pipe(\r\n        concatMap(({ allConfigs, currentConfig }) =>\r\n          this.logoffRevocationService.logoffAndRevokeTokens(\r\n            currentConfig,\r\n            allConfigs,\r\n            logoutAuthOptions\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Logs out on the server and the local client. If the server state has changed, confirmed via check session,\r\n   * then only a local logout is performed.\r\n   *\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   * @param logoutAuthOptions with custom parameters and/or an custom url handler\r\n   */\r\n  logoff(\r\n    configId?: string,\r\n    logoutAuthOptions?: LogoutAuthOptions\r\n  ): Observable<unknown> {\r\n    return this.configurationService\r\n      .getOpenIDConfigurations(configId)\r\n      .pipe(\r\n        concatMap(({ allConfigs, currentConfig }) =>\r\n          this.logoffRevocationService.logoff(\r\n            currentConfig,\r\n            allConfigs,\r\n            logoutAuthOptions\r\n          )\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Logs the user out of the application without logging them out of the server.\r\n   * Use this method if you have _one_ config enabled.\r\n   *\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   */\r\n  logoffLocal(configId?: string): void {\r\n    this.configurationService\r\n      .getOpenIDConfigurations(configId)\r\n      .subscribe(({ allConfigs, currentConfig }) =>\r\n        this.logoffRevocationService.logoffLocal(currentConfig, allConfigs)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Logs the user out of the application for all configs without logging them out of the server.\r\n   * Use this method if you have _multiple_ configs enabled.\r\n   */\r\n  logoffLocalMultiple(): void {\r\n    this.configurationService\r\n      .getOpenIDConfigurations()\r\n      .subscribe(({ allConfigs }) =>\r\n        this.logoffRevocationService.logoffLocalMultiple(allConfigs)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Revokes an access token on the Security Token Service. This is only required in the code flow with refresh tokens. If no token is\r\n   * provided, then the token from the storage is revoked. You can pass any token to revoke.\r\n   * https://tools.ietf.org/html/rfc7009\r\n   *\r\n   * @param accessToken The access token to revoke.\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   *\r\n   * @returns An observable when the action is finished\r\n   */\r\n  revokeAccessToken(accessToken?: any, configId?: string): Observable<any> {\r\n    return this.configurationService\r\n      .getOpenIDConfiguration(configId)\r\n      .pipe(\r\n        concatMap((config) =>\r\n          this.logoffRevocationService.revokeAccessToken(config, accessToken)\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Revokes a refresh token on the Security Token Service. This is only required in the code flow with refresh tokens. If no token is\r\n   * provided, then the token from the storage is revoked. You can pass any token to revoke.\r\n   * https://tools.ietf.org/html/rfc7009\r\n   *\r\n   * @param refreshToken The access token to revoke.\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   *\r\n   * @returns An observable when the action is finished\r\n   */\r\n  revokeRefreshToken(refreshToken?: any, configId?: string): Observable<any> {\r\n    return this.configurationService\r\n      .getOpenIDConfiguration(configId)\r\n      .pipe(\r\n        concatMap((config) =>\r\n          this.logoffRevocationService.revokeRefreshToken(config, refreshToken)\r\n        )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Creates the end session URL which can be used to implement an alternate server logout.\r\n   *\r\n   * @param customParams\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   *\r\n   * @returns A string with the end session url or null\r\n   */\r\n  getEndSessionUrl(\r\n    customParams?: { [p: string]: string | number | boolean },\r\n    configId?: string\r\n  ): Observable<string | null> {\r\n    return this.configurationService\r\n      .getOpenIDConfiguration(configId)\r\n      .pipe(\r\n        map((config) => this.urlService.getEndSessionUrl(config, customParams))\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Creates the authorize URL based on your flow\r\n   *\r\n   * @param customParams\r\n   * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken\r\n   *\r\n   * @returns A string with the authorize URL or null\r\n   */\r\n  getAuthorizeUrl(\r\n    customParams?: { [p: string]: string | number | boolean },\r\n    configId?: string\r\n  ): Observable<string | null> {\r\n    return this.configurationService\r\n      .getOpenIDConfiguration(configId)\r\n      .pipe(\r\n        concatMap((config) =>\r\n          this.urlService.getAuthorizeUrl(\r\n            config,\r\n            customParams ? { customParams } : undefined\r\n          )\r\n        )\r\n      );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AbstractSecurityStorage } from './abstract-security-storage';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DefaultLocalStorageService implements AbstractSecurityStorage {\r\n  public read(key: string): any {\r\n    return localStorage.getItem(key);\r\n  }\r\n\r\n  public write(key: string, value: any): void {\r\n    localStorage.setItem(key, value);\r\n  }\r\n\r\n  public remove(key: string): void {\r\n    localStorage.removeItem(key);\r\n  }\r\n\r\n  public clear(): void {\r\n    localStorage.clear();\r\n  }\r\n}\r\n","// Public classes.\r\n\r\nexport { PassedInitialConfig } from './auth-config';\r\nexport * from './auth-options';\r\nexport * from './auth-state/auth-result';\r\nexport * from './auth-state/auth-state';\r\nexport * from './auth.module';\r\nexport * from './auto-login/auto-login-all-routes.guard';\r\nexport * from './auto-login/auto-login-partial-routes.guard';\r\nexport * from './config/auth-well-known/auth-well-known-endpoints';\r\nexport * from './config/config.service';\r\nexport * from './config/loader/config-loader';\r\nexport * from './config/openid-configuration';\r\nexport * from './interceptor/auth.interceptor';\r\nexport * from './logging/abstract-logger.service';\r\nexport * from './logging/log-level';\r\nexport * from './login/login-response';\r\nexport * from './login/popup/popup-options';\r\nexport * from './login/popup/popup.service';\r\nexport * from './oidc.security.service';\r\nexport * from './provide-auth';\r\nexport * from './public-events/event-types';\r\nexport * from './public-events/notification';\r\nexport * from './public-events/public-events.service';\r\nexport * from './storage/abstract-security-storage';\r\nexport * from './storage/default-localstorage.service';\r\nexport * from './user-data/userdata-result';\r\nexport * from './validation/jwtkeys';\r\nexport * from './validation/state-validation-result';\r\nexport * from './validation/validation-result';\r\n","/*\r\n * Public API Surface of angular-auth-oidc-client\r\n */\r\n\r\nexport * from './lib';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.AbstractLoggerService","i1.LoggerService","i2.AbstractSecurityStorage","i1.BrowserStorageService","i1.StoragePersistenceService","i1.CryptoService","i2.LoggerService","i2.RandomService","i3.LoggerService","i2.FlowsDataService","i3.FlowHelper","i4.StoragePersistenceService","i5.JwtWindowCryptoService","i1.TokenHelperService","i3.JwkExtractor","i4.JwkWindowCryptoService","i1.HttpBaseService","i1.UrlService","i3.TokenValidationService","i4.FlowsDataService","i5.StoragePersistenceService","i6.DataService","i3.PublicEventsService","i4.TokenValidationService","i1.DataService","i2.StoragePersistenceService","i4.LoggerService","i5.TokenHelperService","i6.FlowHelper","i1.AuthStateService","i3.UserService","i3.DataService","i2.AuthStateService","i3.FlowsDataService","i4.UserService","i5.ResetAuthDataService","i2.TokenValidationService","i3.TokenHelperService","i5.EqualityService","i1.CodeFlowCallbackHandlerService","i2.ImplicitFlowCallbackHandlerService","i3.HistoryJwtKeysCallbackHandlerService","i4.UserCallbackHandlerService","i5.StateValidationCallbackHandlerService","i6.RefreshSessionCallbackHandlerService","i7.RefreshTokenCallbackHandlerService","i1.FlowsService","i4.IntervalService","i1.IFrameService","i2.FlowsService","i3.ResetAuthDataService","i5.AuthStateService","i6.LoggerService","i7.FlowHelper","i8.ImplicitFlowCallbackService","i9.IntervalService","i3.IntervalService","i4","i2.FlowHelper","i3.ImplicitFlowCallbackService","i4.CodeFlowCallbackService","i1.AuthWellKnownDataService","i2.PublicEventsService","i3.StoragePersistenceService","i2.UrlService","i3.SilentRenewService","i2.ResetAuthDataService","i3.FlowsService","i1.FlowHelper","i4.SilentRenewService","i6.AuthWellKnownService","i7.RefreshSessionIframeService","i8.StoragePersistenceService","i9.RefreshSessionRefreshTokenService","i10.UserService","i4.ConfigValidationService","i5.PlatformProvider","i7.StsConfigLoader","i1.ResetAuthDataService","i5.UserService","i6.AuthStateService","i8.RefreshSessionRefreshTokenService","i10.StoragePersistenceService","i11.PublicEventsService","i12.ConfigurationService","i1.CheckSessionService","i2.CurrentUrlService","i5.LoggerService","i7.CallbackService","i8.RefreshSessionService","i9.PeriodicallyTokenCheckService","i10.PopUpService","i11.AutoLoginService","i12.StoragePersistenceService","i13.PublicEventsService","i2.ResponseTypeValidationService","i3.UrlService","i4.RedirectService","i5.AuthWellKnownService","i6.PopUpService","i7.CheckAuthService","i8.ParService","i4.AuthWellKnownService","i5.PopUpService","i6.CheckAuthService","i6.FlowsDataService","i1.ParLoginService","i2.PopUpLoginService","i3.StandardLoginService","checkAuth","i1.AutoLoginService","i2.CheckAuthService","i3.LoginService","i4.ConfigurationService","i5","i2.ConfigurationService","i4.ClosestMatchingRouteService","i4.UrlService","i5.CheckSessionService","i6.ResetAuthDataService","i7.RedirectService","i4.TokenHelperService","i5.ConfigurationService","i7.FlowsDataService","i8.CallbackService","i9.LogoffRevocationService","i10.LoginService","i11.RefreshSessionService","i12.UrlService","i13.AuthWellKnownService"],"mappings":"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"}