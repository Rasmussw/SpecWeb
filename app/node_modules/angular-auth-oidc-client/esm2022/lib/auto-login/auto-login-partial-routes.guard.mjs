import { Injectable, inject } from '@angular/core';
import { Router, } from '@angular/router';
import { map } from 'rxjs/operators';
import { AuthStateService } from '../auth-state/auth-state.service';
import { ConfigurationService } from '../config/config.service';
import { LoginService } from '../login/login.service';
import { AutoLoginService } from './auto-login.service';
import * as i0 from "@angular/core";
import * as i1 from "./auto-login.service";
import * as i2 from "../auth-state/auth-state.service";
import * as i3 from "../login/login.service";
import * as i4 from "../config/config.service";
import * as i5 from "@angular/router";
class AutoLoginPartialRoutesGuard {
    constructor(autoLoginService, authStateService, loginService, configurationService, router) {
        this.autoLoginService = autoLoginService;
        this.authStateService = authStateService;
        this.loginService = loginService;
        this.configurationService = configurationService;
        this.router = router;
    }
    canLoad() {
        const url = this.router
            .getCurrentNavigation()
            ?.extractedUrl.toString()
            .substring(1) ?? '';
        return checkAuth(url, this.configurationService, this.authStateService, this.autoLoginService, this.loginService);
    }
    canActivate(route, state) {
        const authOptions = route?.data
            ? { customParams: route.data }
            : undefined;
        return checkAuth(state.url, this.configurationService, this.authStateService, this.autoLoginService, this.loginService, authOptions);
    }
    canActivateChild(route, state) {
        const authOptions = route?.data
            ? { customParams: route.data }
            : undefined;
        return checkAuth(state.url, this.configurationService, this.authStateService, this.autoLoginService, this.loginService, authOptions);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: AutoLoginPartialRoutesGuard, deps: [{ token: i1.AutoLoginService }, { token: i2.AuthStateService }, { token: i3.LoginService }, { token: i4.ConfigurationService }, { token: i5.Router }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: AutoLoginPartialRoutesGuard, providedIn: 'root' }); }
}
export { AutoLoginPartialRoutesGuard };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: AutoLoginPartialRoutesGuard, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.AutoLoginService }, { type: i2.AuthStateService }, { type: i3.LoginService }, { type: i4.ConfigurationService }, { type: i5.Router }]; } });
export function autoLoginPartialRoutesGuard() {
    const configurationService = inject(ConfigurationService);
    const authStateService = inject(AuthStateService);
    const loginService = inject(LoginService);
    const autoLoginService = inject(AutoLoginService);
    const router = inject(Router);
    const url = router.getCurrentNavigation()?.extractedUrl.toString().substring(1) ?? '';
    return checkAuth(url, configurationService, authStateService, autoLoginService, loginService);
}
function checkAuth(url, configurationService, authStateService, autoLoginService, loginService, authOptions) {
    return configurationService.getOpenIDConfiguration().pipe(map((configuration) => {
        const isAuthenticated = authStateService.areAuthStorageTokensValid(configuration);
        if (isAuthenticated) {
            autoLoginService.checkSavedRedirectRouteAndNavigate(configuration);
        }
        if (!isAuthenticated) {
            autoLoginService.saveRedirectRoute(configuration, url);
            if (authOptions) {
                loginService.login(configuration, authOptions);
            }
            else {
                loginService.login(configuration);
            }
        }
        return isAuthenticated;
    }));
}
//# sourceMappingURL=data:application/json;base64,