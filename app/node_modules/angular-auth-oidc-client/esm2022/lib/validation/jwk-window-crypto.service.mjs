import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../utils/crypto/crypto.service";
class JwkWindowCryptoService {
    constructor(cryptoService) {
        this.cryptoService = cryptoService;
    }
    importVerificationKey(key, algorithm) {
        return this.cryptoService
            .getCrypto()
            .subtle.importKey('jwk', key, algorithm, false, ['verify']);
    }
    verifyKey(verifyAlgorithm, cryptoKey, signature, signingInput) {
        return this.cryptoService
            .getCrypto()
            .subtle.verify(verifyAlgorithm, cryptoKey, signature, new TextEncoder().encode(signingInput));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: JwkWindowCryptoService, deps: [{ token: i1.CryptoService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: JwkWindowCryptoService, providedIn: 'root' }); }
}
export { JwkWindowCryptoService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: JwkWindowCryptoService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.CryptoService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiandrLXdpbmRvdy1jcnlwdG8uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYXV0aC1vaWRjLWNsaWVudC9zcmMvbGliL3ZhbGlkYXRpb24vandrLXdpbmRvdy1jcnlwdG8uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7QUFHM0MsTUFDYSxzQkFBc0I7SUFDakMsWUFBNkIsYUFBNEI7UUFBNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7SUFBRyxDQUFDO0lBRTdELHFCQUFxQixDQUNuQixHQUFlLEVBQ2YsU0FLbUI7UUFFbkIsT0FBTyxJQUFJLENBQUMsYUFBYTthQUN0QixTQUFTLEVBQUU7YUFDWCxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELFNBQVMsQ0FDUCxlQUFpRSxFQUNqRSxTQUFvQixFQUNwQixTQUF1QixFQUN2QixZQUFvQjtRQUVwQixPQUFPLElBQUksQ0FBQyxhQUFhO2FBQ3RCLFNBQVMsRUFBRTthQUNYLE1BQU0sQ0FBQyxNQUFNLENBQ1osZUFBZSxFQUNmLFNBQVMsRUFDVCxTQUFTLEVBQ1QsSUFBSSxXQUFXLEVBQUUsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQ3ZDLENBQUM7SUFDTixDQUFDOzhHQS9CVSxzQkFBc0I7a0hBQXRCLHNCQUFzQixjQURULE1BQU07O1NBQ25CLHNCQUFzQjsyRkFBdEIsc0JBQXNCO2tCQURsQyxVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ3J5cHRvU2VydmljZSB9IGZyb20gJy4uL3V0aWxzL2NyeXB0by9jcnlwdG8uc2VydmljZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxyXG5leHBvcnQgY2xhc3MgSndrV2luZG93Q3J5cHRvU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBjcnlwdG9TZXJ2aWNlOiBDcnlwdG9TZXJ2aWNlKSB7fVxyXG5cclxuICBpbXBvcnRWZXJpZmljYXRpb25LZXkoXHJcbiAgICBrZXk6IEpzb25XZWJLZXksXHJcbiAgICBhbGdvcml0aG06XHJcbiAgICAgIHwgQWxnb3JpdGhtSWRlbnRpZmllclxyXG4gICAgICB8IFJzYUhhc2hlZEltcG9ydFBhcmFtc1xyXG4gICAgICB8IEVjS2V5SW1wb3J0UGFyYW1zXHJcbiAgICAgIHwgSG1hY0ltcG9ydFBhcmFtc1xyXG4gICAgICB8IEFlc0tleUFsZ29yaXRobVxyXG4gICk6IFByb21pc2U8Q3J5cHRvS2V5PiB7XHJcbiAgICByZXR1cm4gdGhpcy5jcnlwdG9TZXJ2aWNlXHJcbiAgICAgIC5nZXRDcnlwdG8oKVxyXG4gICAgICAuc3VidGxlLmltcG9ydEtleSgnandrJywga2V5LCBhbGdvcml0aG0sIGZhbHNlLCBbJ3ZlcmlmeSddKTtcclxuICB9XHJcblxyXG4gIHZlcmlmeUtleShcclxuICAgIHZlcmlmeUFsZ29yaXRobTogQWxnb3JpdGhtSWRlbnRpZmllciB8IFJzYVBzc1BhcmFtcyB8IEVjZHNhUGFyYW1zLFxyXG4gICAgY3J5cHRvS2V5OiBDcnlwdG9LZXksXHJcbiAgICBzaWduYXR1cmU6IEJ1ZmZlclNvdXJjZSxcclxuICAgIHNpZ25pbmdJbnB1dDogc3RyaW5nXHJcbiAgKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICByZXR1cm4gdGhpcy5jcnlwdG9TZXJ2aWNlXHJcbiAgICAgIC5nZXRDcnlwdG8oKVxyXG4gICAgICAuc3VidGxlLnZlcmlmeShcclxuICAgICAgICB2ZXJpZnlBbGdvcml0aG0sXHJcbiAgICAgICAgY3J5cHRvS2V5LFxyXG4gICAgICAgIHNpZ25hdHVyZSxcclxuICAgICAgICBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc2lnbmluZ0lucHV0KVxyXG4gICAgICApO1xyXG4gIH1cclxufVxyXG4iXX0=