import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
import { EventTypes } from '../public-events/event-types';
import * as i0 from "@angular/core";
import * as i1 from "../storage/storage-persistence.service";
import * as i2 from "../logging/logger.service";
import * as i3 from "../public-events/public-events.service";
import * as i4 from "../validation/token-validation.service";
const DEFAULT_AUTHRESULT = {
    isAuthenticated: false,
    allConfigsAuthenticated: [],
};
class AuthStateService {
    get authenticated$() {
        return this.authenticatedInternal$
            .asObservable()
            .pipe(distinctUntilChanged());
    }
    constructor(storagePersistenceService, loggerService, publicEventsService, tokenValidationService) {
        this.storagePersistenceService = storagePersistenceService;
        this.loggerService = loggerService;
        this.publicEventsService = publicEventsService;
        this.tokenValidationService = tokenValidationService;
        this.authenticatedInternal$ = new BehaviorSubject(DEFAULT_AUTHRESULT);
    }
    setAuthenticatedAndFireEvent(allConfigs) {
        const result = this.composeAuthenticatedResult(allConfigs);
        this.authenticatedInternal$.next(result);
    }
    setUnauthenticatedAndFireEvent(currentConfig, allConfigs) {
        this.storagePersistenceService.resetAuthStateInStorage(currentConfig);
        const result = this.composeUnAuthenticatedResult(allConfigs);
        this.authenticatedInternal$.next(result);
    }
    updateAndPublishAuthState(authenticationResult) {
        this.publicEventsService.fireEvent(EventTypes.NewAuthenticationResult, authenticationResult);
    }
    setAuthorizationData(accessToken, authResult, currentConfig, allConfigs) {
        this.loggerService.logDebug(currentConfig, `storing the accessToken '${accessToken}'`);
        this.storagePersistenceService.write('authzData', accessToken, currentConfig);
        this.persistAccessTokenExpirationTime(authResult, currentConfig);
        this.setAuthenticatedAndFireEvent(allConfigs);
    }
    getAccessToken(configuration) {
        if (!this.isAuthenticated(configuration)) {
            return null;
        }
        const token = this.storagePersistenceService.getAccessToken(configuration);
        return this.decodeURIComponentSafely(token);
    }
    getIdToken(configuration) {
        if (!this.isAuthenticated(configuration)) {
            return null;
        }
        const token = this.storagePersistenceService.getIdToken(configuration);
        return this.decodeURIComponentSafely(token);
    }
    getRefreshToken(configuration) {
        if (!this.isAuthenticated(configuration)) {
            return null;
        }
        const token = this.storagePersistenceService.getRefreshToken(configuration);
        return this.decodeURIComponentSafely(token);
    }
    getAuthenticationResult(configuration) {
        if (!this.isAuthenticated(configuration)) {
            return null;
        }
        return this.storagePersistenceService.getAuthenticationResult(configuration);
    }
    areAuthStorageTokensValid(configuration) {
        if (!this.isAuthenticated(configuration)) {
            return false;
        }
        if (this.hasIdTokenExpiredAndRenewCheckIsEnabled(configuration)) {
            this.loggerService.logDebug(configuration, 'persisted idToken is expired');
            return false;
        }
        if (this.hasAccessTokenExpiredIfExpiryExists(configuration)) {
            this.loggerService.logDebug(configuration, 'persisted accessToken is expired');
            return false;
        }
        this.loggerService.logDebug(configuration, 'persisted idToken and accessToken are valid');
        return true;
    }
    hasIdTokenExpiredAndRenewCheckIsEnabled(configuration) {
        const { renewTimeBeforeTokenExpiresInSeconds, triggerRefreshWhenIdTokenExpired, disableIdTokenValidation, } = configuration;
        if (!triggerRefreshWhenIdTokenExpired || disableIdTokenValidation) {
            return false;
        }
        const tokenToCheck = this.storagePersistenceService.getIdToken(configuration);
        const idTokenExpired = this.tokenValidationService.hasIdTokenExpired(tokenToCheck, configuration, renewTimeBeforeTokenExpiresInSeconds);
        if (idTokenExpired) {
            this.publicEventsService.fireEvent(EventTypes.IdTokenExpired, idTokenExpired);
        }
        return idTokenExpired;
    }
    hasAccessTokenExpiredIfExpiryExists(configuration) {
        const { renewTimeBeforeTokenExpiresInSeconds } = configuration;
        const accessTokenExpiresIn = this.storagePersistenceService.read('access_token_expires_at', configuration);
        const accessTokenHasNotExpired = this.tokenValidationService.validateAccessTokenNotExpired(accessTokenExpiresIn, configuration, renewTimeBeforeTokenExpiresInSeconds);
        const hasExpired = !accessTokenHasNotExpired;
        if (hasExpired) {
            this.publicEventsService.fireEvent(EventTypes.TokenExpired, hasExpired);
        }
        return hasExpired;
    }
    isAuthenticated(configuration) {
        const hasAccessToken = !!this.storagePersistenceService.getAccessToken(configuration);
        const hasIdToken = !!this.storagePersistenceService.getIdToken(configuration);
        return hasAccessToken && hasIdToken;
    }
    decodeURIComponentSafely(token) {
        if (token) {
            return decodeURIComponent(token);
        }
        else {
            return '';
        }
    }
    persistAccessTokenExpirationTime(authResult, configuration) {
        if (authResult?.expires_in) {
            const accessTokenExpiryTime = new Date(new Date().toUTCString()).valueOf() +
                authResult.expires_in * 1000;
            this.storagePersistenceService.write('access_token_expires_at', accessTokenExpiryTime, configuration);
        }
    }
    composeAuthenticatedResult(allConfigs) {
        if (allConfigs.length === 1) {
            const { configId } = allConfigs[0];
            return {
                isAuthenticated: true,
                allConfigsAuthenticated: [{ configId, isAuthenticated: true }],
            };
        }
        return this.checkAllConfigsIfTheyAreAuthenticated(allConfigs);
    }
    composeUnAuthenticatedResult(allConfigs) {
        if (allConfigs.length === 1) {
            const { configId } = allConfigs[0];
            return {
                isAuthenticated: false,
                allConfigsAuthenticated: [{ configId, isAuthenticated: false }],
            };
        }
        return this.checkAllConfigsIfTheyAreAuthenticated(allConfigs);
    }
    checkAllConfigsIfTheyAreAuthenticated(allConfigs) {
        const allConfigsAuthenticated = allConfigs.map((config) => ({
            configId: config.configId,
            isAuthenticated: this.isAuthenticated(config),
        }));
        const isAuthenticated = allConfigsAuthenticated.every((x) => !!x.isAuthenticated);
        return { allConfigsAuthenticated, isAuthenticated };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: AuthStateService, deps: [{ token: i1.StoragePersistenceService }, { token: i2.LoggerService }, { token: i3.PublicEventsService }, { token: i4.TokenValidationService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: AuthStateService, providedIn: 'root' }); }
}
export { AuthStateService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: AuthStateService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.StoragePersistenceService }, { type: i2.LoggerService }, { type: i3.PublicEventsService }, { type: i4.TokenValidationService }]; } });
//# sourceMappingURL=data:application/json;base64,