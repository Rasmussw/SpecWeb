import { Injectable } from '@angular/core';
import { forkJoin, of, throwError } from 'rxjs';
import { catchError, map, switchMap, tap } from 'rxjs/operators';
import { EventTypes } from '../public-events/event-types';
import * as i0 from "@angular/core";
import * as i1 from "../iframe/check-session.service";
import * as i2 from "../utils/url/current-url.service";
import * as i3 from "../iframe/silent-renew.service";
import * as i4 from "../user-data/user.service";
import * as i5 from "../logging/logger.service";
import * as i6 from "./auth-state.service";
import * as i7 from "../callback/callback.service";
import * as i8 from "../callback/refresh-session.service";
import * as i9 from "../callback/periodically-token-check.service";
import * as i10 from "../login/popup/popup.service";
import * as i11 from "../auto-login/auto-login.service";
import * as i12 from "../storage/storage-persistence.service";
import * as i13 from "../public-events/public-events.service";
class CheckAuthService {
    constructor(checkSessionService, currentUrlService, silentRenewService, userService, loggerService, authStateService, callbackService, refreshSessionService, periodicallyTokenCheckService, popupService, autoLoginService, storagePersistenceService, publicEventsService) {
        this.checkSessionService = checkSessionService;
        this.currentUrlService = currentUrlService;
        this.silentRenewService = silentRenewService;
        this.userService = userService;
        this.loggerService = loggerService;
        this.authStateService = authStateService;
        this.callbackService = callbackService;
        this.refreshSessionService = refreshSessionService;
        this.periodicallyTokenCheckService = periodicallyTokenCheckService;
        this.popupService = popupService;
        this.autoLoginService = autoLoginService;
        this.storagePersistenceService = storagePersistenceService;
        this.publicEventsService = publicEventsService;
    }
    checkAuth(configuration, allConfigs, url) {
        this.publicEventsService.fireEvent(EventTypes.CheckingAuth);
        const stateParamFromUrl = this.currentUrlService.getStateParamFromCurrentUrl(url);
        if (!!stateParamFromUrl) {
            configuration = this.getConfigurationWithUrlState([configuration], stateParamFromUrl);
            if (!configuration) {
                return throwError(() => new Error(`could not find matching config for state ${stateParamFromUrl}`));
            }
        }
        return this.checkAuthWithConfig(configuration, allConfigs, url);
    }
    checkAuthMultiple(allConfigs, url) {
        const stateParamFromUrl = this.currentUrlService.getStateParamFromCurrentUrl(url);
        if (stateParamFromUrl) {
            const config = this.getConfigurationWithUrlState(allConfigs, stateParamFromUrl);
            if (!config) {
                return throwError(() => new Error(`could not find matching config for state ${stateParamFromUrl}`));
            }
            return this.composeMultipleLoginResults(allConfigs, config, url);
        }
        const configs = allConfigs;
        const allChecks$ = configs.map((x) => this.checkAuthWithConfig(x, configs, url));
        return forkJoin(allChecks$);
    }
    checkAuthIncludingServer(configuration, allConfigs) {
        return this.checkAuthWithConfig(configuration, allConfigs).pipe(switchMap((loginResponse) => {
            const { isAuthenticated } = loginResponse;
            if (isAuthenticated) {
                return of(loginResponse);
            }
            return this.refreshSessionService
                .forceRefreshSession(configuration, allConfigs)
                .pipe(tap((loginResponseAfterRefreshSession) => {
                if (loginResponseAfterRefreshSession?.isAuthenticated) {
                    this.startCheckSessionAndValidation(configuration, allConfigs);
                }
            }));
        }));
    }
    checkAuthWithConfig(config, allConfigs, url) {
        if (!config) {
            const errorMessage = 'Please provide at least one configuration before setting up the module';
            this.loggerService.logError(config, errorMessage);
            return of({
                isAuthenticated: false,
                errorMessage,
                userData: null,
                idToken: '',
                accessToken: '',
                configId: null,
            });
        }
        const currentUrl = url || this.currentUrlService.getCurrentUrl();
        const { configId, authority } = config;
        this.loggerService.logDebug(config, `Working with config '${configId}' using ${authority}`);
        if (this.popupService.isCurrentlyInPopup(config)) {
            this.popupService.sendMessageToMainWindow(currentUrl);
            return of({
                isAuthenticated: false,
                errorMessage: '',
                userData: null,
                idToken: '',
                accessToken: '',
            });
        }
        const isCallback = this.callbackService.isCallback(currentUrl);
        this.loggerService.logDebug(config, 'currentUrl to check auth with: ', currentUrl);
        const callback$ = isCallback
            ? this.callbackService.handleCallbackAndFireEvents(currentUrl, config, allConfigs)
            : of(null);
        return callback$.pipe(map(() => {
            const isAuthenticated = this.authStateService.areAuthStorageTokensValid(config);
            if (isAuthenticated) {
                this.startCheckSessionAndValidation(config, allConfigs);
                if (!isCallback) {
                    this.authStateService.setAuthenticatedAndFireEvent(allConfigs);
                    this.userService.publishUserDataIfExists(config, allConfigs);
                }
            }
            this.loggerService.logDebug(config, 'checkAuth completed - firing events now. isAuthenticated: ' +
                isAuthenticated);
            return {
                isAuthenticated,
                userData: this.userService.getUserDataFromStore(config),
                accessToken: this.authStateService.getAccessToken(config),
                idToken: this.authStateService.getIdToken(config),
                configId,
            };
        }), tap(({ isAuthenticated }) => {
            this.publicEventsService.fireEvent(EventTypes.CheckingAuthFinished);
            if (isAuthenticated) {
                this.autoLoginService.checkSavedRedirectRouteAndNavigate(config);
            }
        }), catchError(({ message }) => {
            this.loggerService.logError(config, message);
            this.publicEventsService.fireEvent(EventTypes.CheckingAuthFinishedWithError, message);
            return of({
                isAuthenticated: false,
                errorMessage: message,
                userData: null,
                idToken: '',
                accessToken: '',
                configId,
            });
        }));
    }
    startCheckSessionAndValidation(config, allConfigs) {
        if (this.checkSessionService.isCheckSessionConfigured(config)) {
            this.checkSessionService.start(config);
        }
        this.periodicallyTokenCheckService.startTokenValidationPeriodically(allConfigs, config);
        if (this.silentRenewService.isSilentRenewConfigured(config)) {
            this.silentRenewService.getOrCreateIframe(config);
        }
    }
    getConfigurationWithUrlState(configurations, stateFromUrl) {
        for (const config of configurations) {
            const storedState = this.storagePersistenceService.read('authStateControl', config);
            if (storedState === stateFromUrl) {
                return config;
            }
        }
        return null;
    }
    composeMultipleLoginResults(configurations, activeConfig, url) {
        const allOtherConfigs = configurations.filter((x) => x.configId !== activeConfig.configId);
        const currentConfigResult = this.checkAuthWithConfig(activeConfig, configurations, url);
        const allOtherConfigResults = allOtherConfigs.map((config) => {
            const { redirectUrl } = config;
            return this.checkAuthWithConfig(config, configurations, redirectUrl);
        });
        return forkJoin([currentConfigResult, ...allOtherConfigResults]);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: CheckAuthService, deps: [{ token: i1.CheckSessionService }, { token: i2.CurrentUrlService }, { token: i3.SilentRenewService }, { token: i4.UserService }, { token: i5.LoggerService }, { token: i6.AuthStateService }, { token: i7.CallbackService }, { token: i8.RefreshSessionService }, { token: i9.PeriodicallyTokenCheckService }, { token: i10.PopUpService }, { token: i11.AutoLoginService }, { token: i12.StoragePersistenceService }, { token: i13.PublicEventsService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: CheckAuthService, providedIn: 'root' }); }
}
export { CheckAuthService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: CheckAuthService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.CheckSessionService }, { type: i2.CurrentUrlService }, { type: i3.SilentRenewService }, { type: i4.UserService }, { type: i5.LoggerService }, { type: i6.AuthStateService }, { type: i7.CallbackService }, { type: i8.RefreshSessionService }, { type: i9.PeriodicallyTokenCheckService }, { type: i10.PopUpService }, { type: i11.AutoLoginService }, { type: i12.StoragePersistenceService }, { type: i13.PublicEventsService }]; } });
//# sourceMappingURL=data:application/json;base64,