import { HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { of, throwError } from 'rxjs';
import { catchError, concatMap, retry, switchMap } from 'rxjs/operators';
import { removeNullAndUndefinedValues } from '../utils/object/object.helper';
import * as i0 from "@angular/core";
import * as i1 from "../api/data.service";
import * as i2 from "../storage/storage-persistence.service";
import * as i3 from "../logging/logger.service";
import * as i4 from "../utils/url/url.service";
import * as i5 from "../iframe/check-session.service";
import * as i6 from "../flows/reset-auth-data.service";
import * as i7 from "../utils/redirect/redirect.service";
class LogoffRevocationService {
    constructor(dataService, storagePersistenceService, loggerService, urlService, checkSessionService, resetAuthDataService, redirectService) {
        this.dataService = dataService;
        this.storagePersistenceService = storagePersistenceService;
        this.loggerService = loggerService;
        this.urlService = urlService;
        this.checkSessionService = checkSessionService;
        this.resetAuthDataService = resetAuthDataService;
        this.redirectService = redirectService;
    }
    // Logs out on the server and the local client.
    // If the server state has changed, check session, then only a local logout.
    logoff(config, allConfigs, logoutAuthOptions) {
        this.loggerService.logDebug(config, 'logoff, remove auth', logoutAuthOptions);
        const { urlHandler, customParams } = logoutAuthOptions || {};
        const endSessionUrl = this.urlService.getEndSessionUrl(config, customParams);
        if (!endSessionUrl) {
            this.loggerService.logDebug(config, 'No endsessionUrl present. Logoff was only locally. Returning.');
            return of(null);
        }
        if (this.checkSessionService.serverStateChanged(config)) {
            this.loggerService.logDebug(config, 'Server State changed. Logoff was only locally. Returning.');
            return of(null);
        }
        if (urlHandler) {
            this.loggerService.logDebug(config, `Custom UrlHandler found. Using this to handle logoff with url '${endSessionUrl}'`);
            urlHandler(endSessionUrl);
            this.resetAuthDataService.resetAuthorizationData(config, allConfigs);
            return of(null);
        }
        return this.logoffInternal(logoutAuthOptions, endSessionUrl, config, allConfigs);
    }
    logoffLocal(config, allConfigs) {
        this.resetAuthDataService.resetAuthorizationData(config, allConfigs);
        this.checkSessionService.stop();
    }
    logoffLocalMultiple(allConfigs) {
        allConfigs.forEach((configuration) => this.logoffLocal(configuration, allConfigs));
    }
    // The refresh token and and the access token are revoked on the server. If the refresh token does not exist
    // only the access token is revoked. Then the logout run.
    logoffAndRevokeTokens(config, allConfigs, logoutAuthOptions) {
        const { revocationEndpoint } = this.storagePersistenceService.read('authWellKnownEndPoints', config) ||
            {};
        if (!revocationEndpoint) {
            this.loggerService.logDebug(config, 'revocation endpoint not supported');
            return this.logoff(config, allConfigs, logoutAuthOptions);
        }
        if (this.storagePersistenceService.getRefreshToken(config)) {
            return this.revokeRefreshToken(config).pipe(switchMap((_) => this.revokeAccessToken(config)), catchError((error) => {
                const errorMessage = `revoke token failed`;
                this.loggerService.logError(config, errorMessage, error);
                return throwError(() => new Error(errorMessage));
            }), concatMap(() => this.logoff(config, allConfigs, logoutAuthOptions)));
        }
        else {
            return this.revokeAccessToken(config).pipe(catchError((error) => {
                const errorMessage = `revoke accessToken failed`;
                this.loggerService.logError(config, errorMessage, error);
                return throwError(() => new Error(errorMessage));
            }), concatMap(() => this.logoff(config, allConfigs, logoutAuthOptions)));
        }
    }
    // https://tools.ietf.org/html/rfc7009
    // revokes an access token on the STS. If no token is provided, then the token from
    // the storage is revoked. You can pass any token to revoke. This makes it possible to
    // manage your own tokens. The is a public API.
    revokeAccessToken(configuration, accessToken) {
        const accessTok = accessToken ||
            this.storagePersistenceService.getAccessToken(configuration);
        const body = this.urlService.createRevocationEndpointBodyAccessToken(accessTok, configuration);
        return this.sendRevokeRequest(configuration, body);
    }
    // https://tools.ietf.org/html/rfc7009
    // revokes an refresh token on the STS. This is only required in the code flow with refresh tokens.
    // If no token is provided, then the token from the storage is revoked. You can pass any token to revoke.
    // This makes it possible to manage your own tokens.
    revokeRefreshToken(configuration, refreshToken) {
        const refreshTok = refreshToken ||
            this.storagePersistenceService.getRefreshToken(configuration);
        const body = this.urlService.createRevocationEndpointBodyRefreshToken(refreshTok, configuration);
        return this.sendRevokeRequest(configuration, body);
    }
    logoffInternal(logoutAuthOptions, endSessionUrl, config, allConfigs) {
        const { logoffMethod, customParams } = logoutAuthOptions || {};
        if (!logoffMethod || logoffMethod === 'GET') {
            this.redirectService.redirectTo(endSessionUrl);
            this.resetAuthDataService.resetAuthorizationData(config, allConfigs);
            return of(null);
        }
        const { state, logout_hint, ui_locales } = customParams || {};
        const { clientId } = config;
        const idToken = this.storagePersistenceService.getIdToken(config);
        const postLogoutRedirectUrl = this.urlService.getPostLogoutRedirectUrl(config);
        const headers = this.getHeaders();
        const { url } = this.urlService.getEndSessionEndpoint(config);
        const body = {
            id_token_hint: idToken,
            client_id: clientId,
            post_logout_redirect_uri: postLogoutRedirectUrl,
            state,
            logout_hint,
            ui_locales,
        };
        const bodyWithoutNullOrUndefined = removeNullAndUndefinedValues(body);
        this.resetAuthDataService.resetAuthorizationData(config, allConfigs);
        return this.dataService.post(url, bodyWithoutNullOrUndefined, config, headers);
    }
    sendRevokeRequest(configuration, body) {
        const url = this.urlService.getRevocationEndpointUrl(configuration);
        const headers = this.getHeaders();
        return this.dataService.post(url, body, configuration, headers).pipe(retry(2), switchMap((response) => {
            this.loggerService.logDebug(configuration, 'revocation endpoint post response: ', response);
            return of(response);
        }), catchError((error) => {
            const errorMessage = `Revocation request failed`;
            this.loggerService.logError(configuration, errorMessage, error);
            return throwError(() => new Error(errorMessage));
        }));
    }
    getHeaders() {
        let headers = new HttpHeaders();
        headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');
        return headers;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: LogoffRevocationService, deps: [{ token: i1.DataService }, { token: i2.StoragePersistenceService }, { token: i3.LoggerService }, { token: i4.UrlService }, { token: i5.CheckSessionService }, { token: i6.ResetAuthDataService }, { token: i7.RedirectService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: LogoffRevocationService, providedIn: 'root' }); }
}
export { LogoffRevocationService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: LogoffRevocationService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.DataService }, { type: i2.StoragePersistenceService }, { type: i3.LoggerService }, { type: i4.UrlService }, { type: i5.CheckSessionService }, { type: i6.ResetAuthDataService }, { type: i7.RedirectService }]; } });
//# sourceMappingURL=data:application/json;base64,