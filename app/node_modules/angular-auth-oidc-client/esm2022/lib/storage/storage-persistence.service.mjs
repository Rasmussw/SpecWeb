import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./browser-storage.service";
class StoragePersistenceService {
    constructor(browserStorageService) {
        this.browserStorageService = browserStorageService;
    }
    read(key, config) {
        const storedConfig = this.browserStorageService.read(key, config) || {};
        return storedConfig[key];
    }
    write(key, value, config) {
        const storedConfig = this.browserStorageService.read(key, config) || {};
        storedConfig[key] = value;
        return this.browserStorageService.write(storedConfig, config);
    }
    remove(key, config) {
        const storedConfig = this.browserStorageService.read(key, config) || {};
        delete storedConfig[key];
        this.browserStorageService.write(storedConfig, config);
    }
    clear(config) {
        this.browserStorageService.clear(config);
    }
    resetStorageFlowData(config) {
        this.remove('session_state', config);
        this.remove('storageSilentRenewRunning', config);
        this.remove('storageCodeFlowInProgress', config);
        this.remove('codeVerifier', config);
        this.remove('userData', config);
        this.remove('storageCustomParamsAuthRequest', config);
        this.remove('access_token_expires_at', config);
        this.remove('storageCustomParamsRefresh', config);
        this.remove('storageCustomParamsEndSession', config);
        this.remove('reusable_refresh_token', config);
    }
    resetAuthStateInStorage(config) {
        this.remove('authzData', config);
        this.remove('reusable_refresh_token', config);
        this.remove('authnResult', config);
    }
    getAccessToken(config) {
        return this.read('authzData', config);
    }
    getIdToken(config) {
        return this.read('authnResult', config)?.id_token;
    }
    getRefreshToken(config) {
        const refreshToken = this.read('authnResult', config)?.refresh_token;
        if (!refreshToken && config.allowUnsafeReuseRefreshToken) {
            return this.read('reusable_refresh_token', config);
        }
        return refreshToken;
    }
    getAuthenticationResult(config) {
        return this.read('authnResult', config);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: StoragePersistenceService, deps: [{ token: i1.BrowserStorageService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: StoragePersistenceService, providedIn: 'root' }); }
}
export { StoragePersistenceService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: StoragePersistenceService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.BrowserStorageService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS1wZXJzaXN0ZW5jZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1hdXRoLW9pZGMtY2xpZW50L3NyYy9saWIvc3RvcmFnZS9zdG9yYWdlLXBlcnNpc3RlbmNlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBeUIzQyxNQUNhLHlCQUF5QjtJQUNwQyxZQUE2QixxQkFBNEM7UUFBNUMsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtJQUFHLENBQUM7SUFFN0UsSUFBSSxDQUFDLEdBQWdCLEVBQUUsTUFBMkI7UUFDaEQsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO1FBRXhFLE9BQU8sWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFRCxLQUFLLENBQUMsR0FBZ0IsRUFBRSxLQUFVLEVBQUUsTUFBMkI7UUFDN0QsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO1FBRXhFLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7UUFFMUIsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQWdCLEVBQUUsTUFBMkI7UUFDbEQsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO1FBRXhFLE9BQU8sWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXpCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxLQUFLLENBQUMsTUFBMkI7UUFDL0IsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsb0JBQW9CLENBQUMsTUFBMkI7UUFDOUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBMkIsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsTUFBTSxDQUFDLDJCQUEyQixFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxNQUFNLENBQUMsZ0NBQWdDLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyx5QkFBeUIsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsTUFBTSxDQUFDLDRCQUE0QixFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxNQUFNLENBQUMsK0JBQStCLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLE1BQU0sQ0FBQyx3QkFBd0IsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsdUJBQXVCLENBQUMsTUFBMkI7UUFDakQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLE1BQU0sQ0FBQyx3QkFBd0IsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsY0FBYyxDQUFDLE1BQTJCO1FBQ3hDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELFVBQVUsQ0FBQyxNQUEyQjtRQUNwQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxFQUFFLFFBQVEsQ0FBQztJQUNwRCxDQUFDO0lBRUQsZUFBZSxDQUFDLE1BQTJCO1FBQ3pDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxFQUFFLGFBQWEsQ0FBQztRQUVyRSxJQUFJLENBQUMsWUFBWSxJQUFJLE1BQU0sQ0FBQyw0QkFBNEIsRUFBRTtZQUN4RCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDcEQ7UUFFRCxPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBRUQsdUJBQXVCLENBQUMsTUFBMkI7UUFDakQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMxQyxDQUFDOzhHQXBFVSx5QkFBeUI7a0hBQXpCLHlCQUF5QixjQURaLE1BQU07O1NBQ25CLHlCQUF5QjsyRkFBekIseUJBQXlCO2tCQURyQyxVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT3BlbklkQ29uZmlndXJhdGlvbiB9IGZyb20gJy4vLi4vY29uZmlnL29wZW5pZC1jb25maWd1cmF0aW9uJztcclxuaW1wb3J0IHsgQnJvd3NlclN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9icm93c2VyLXN0b3JhZ2Uuc2VydmljZSc7XHJcblxyXG5leHBvcnQgdHlwZSBTdG9yYWdlS2V5cyA9XHJcbiAgfCAnYXV0aG5SZXN1bHQnXHJcbiAgfCAnYXV0aHpEYXRhJ1xyXG4gIHwgJ2FjY2Vzc190b2tlbl9leHBpcmVzX2F0J1xyXG4gIHwgJ2F1dGhXZWxsS25vd25FbmRQb2ludHMnXHJcbiAgfCAndXNlckRhdGEnXHJcbiAgfCAnYXV0aE5vbmNlJ1xyXG4gIHwgJ2NvZGVWZXJpZmllcidcclxuICB8ICdhdXRoU3RhdGVDb250cm9sJ1xyXG4gIHwgJ3JldXNhYmxlX3JlZnJlc2hfdG9rZW4nXHJcbiAgfCAnc2Vzc2lvbl9zdGF0ZSdcclxuICB8ICdzdG9yYWdlU2lsZW50UmVuZXdSdW5uaW5nJ1xyXG4gIHwgJ3N0b3JhZ2VDb2RlRmxvd0luUHJvZ3Jlc3MnXHJcbiAgfCAnc3RvcmFnZUN1c3RvbVBhcmFtc0F1dGhSZXF1ZXN0J1xyXG4gIHwgJ3N0b3JhZ2VDdXN0b21QYXJhbXNSZWZyZXNoJ1xyXG4gIHwgJ3N0b3JhZ2VDdXN0b21QYXJhbXNFbmRTZXNzaW9uJ1xyXG4gIHwgJ3JlZGlyZWN0J1xyXG4gIHwgJ2NvbmZpZ0lkcydcclxuICB8ICdqd3RLZXlzJ1xyXG4gIHwgJ3BvcHVwYXV0aCc7XHJcblxyXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxyXG5leHBvcnQgY2xhc3MgU3RvcmFnZVBlcnNpc3RlbmNlU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBicm93c2VyU3RvcmFnZVNlcnZpY2U6IEJyb3dzZXJTdG9yYWdlU2VydmljZSkge31cclxuXHJcbiAgcmVhZChrZXk6IFN0b3JhZ2VLZXlzLCBjb25maWc6IE9wZW5JZENvbmZpZ3VyYXRpb24pOiBhbnkge1xyXG4gICAgY29uc3Qgc3RvcmVkQ29uZmlnID0gdGhpcy5icm93c2VyU3RvcmFnZVNlcnZpY2UucmVhZChrZXksIGNvbmZpZykgfHwge307XHJcblxyXG4gICAgcmV0dXJuIHN0b3JlZENvbmZpZ1trZXldO1xyXG4gIH1cclxuXHJcbiAgd3JpdGUoa2V5OiBTdG9yYWdlS2V5cywgdmFsdWU6IGFueSwgY29uZmlnOiBPcGVuSWRDb25maWd1cmF0aW9uKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBzdG9yZWRDb25maWcgPSB0aGlzLmJyb3dzZXJTdG9yYWdlU2VydmljZS5yZWFkKGtleSwgY29uZmlnKSB8fCB7fTtcclxuXHJcbiAgICBzdG9yZWRDb25maWdba2V5XSA9IHZhbHVlO1xyXG5cclxuICAgIHJldHVybiB0aGlzLmJyb3dzZXJTdG9yYWdlU2VydmljZS53cml0ZShzdG9yZWRDb25maWcsIGNvbmZpZyk7XHJcbiAgfVxyXG5cclxuICByZW1vdmUoa2V5OiBTdG9yYWdlS2V5cywgY29uZmlnOiBPcGVuSWRDb25maWd1cmF0aW9uKTogdm9pZCB7XHJcbiAgICBjb25zdCBzdG9yZWRDb25maWcgPSB0aGlzLmJyb3dzZXJTdG9yYWdlU2VydmljZS5yZWFkKGtleSwgY29uZmlnKSB8fCB7fTtcclxuXHJcbiAgICBkZWxldGUgc3RvcmVkQ29uZmlnW2tleV07XHJcblxyXG4gICAgdGhpcy5icm93c2VyU3RvcmFnZVNlcnZpY2Uud3JpdGUoc3RvcmVkQ29uZmlnLCBjb25maWcpO1xyXG4gIH1cclxuXHJcbiAgY2xlYXIoY29uZmlnOiBPcGVuSWRDb25maWd1cmF0aW9uKTogdm9pZCB7XHJcbiAgICB0aGlzLmJyb3dzZXJTdG9yYWdlU2VydmljZS5jbGVhcihjb25maWcpO1xyXG4gIH1cclxuXHJcbiAgcmVzZXRTdG9yYWdlRmxvd0RhdGEoY29uZmlnOiBPcGVuSWRDb25maWd1cmF0aW9uKTogdm9pZCB7XHJcbiAgICB0aGlzLnJlbW92ZSgnc2Vzc2lvbl9zdGF0ZScsIGNvbmZpZyk7XHJcbiAgICB0aGlzLnJlbW92ZSgnc3RvcmFnZVNpbGVudFJlbmV3UnVubmluZycsIGNvbmZpZyk7XHJcbiAgICB0aGlzLnJlbW92ZSgnc3RvcmFnZUNvZGVGbG93SW5Qcm9ncmVzcycsIGNvbmZpZyk7XHJcbiAgICB0aGlzLnJlbW92ZSgnY29kZVZlcmlmaWVyJywgY29uZmlnKTtcclxuICAgIHRoaXMucmVtb3ZlKCd1c2VyRGF0YScsIGNvbmZpZyk7XHJcbiAgICB0aGlzLnJlbW92ZSgnc3RvcmFnZUN1c3RvbVBhcmFtc0F1dGhSZXF1ZXN0JywgY29uZmlnKTtcclxuICAgIHRoaXMucmVtb3ZlKCdhY2Nlc3NfdG9rZW5fZXhwaXJlc19hdCcsIGNvbmZpZyk7XHJcbiAgICB0aGlzLnJlbW92ZSgnc3RvcmFnZUN1c3RvbVBhcmFtc1JlZnJlc2gnLCBjb25maWcpO1xyXG4gICAgdGhpcy5yZW1vdmUoJ3N0b3JhZ2VDdXN0b21QYXJhbXNFbmRTZXNzaW9uJywgY29uZmlnKTtcclxuICAgIHRoaXMucmVtb3ZlKCdyZXVzYWJsZV9yZWZyZXNoX3Rva2VuJywgY29uZmlnKTtcclxuICB9XHJcblxyXG4gIHJlc2V0QXV0aFN0YXRlSW5TdG9yYWdlKGNvbmZpZzogT3BlbklkQ29uZmlndXJhdGlvbik6IHZvaWQge1xyXG4gICAgdGhpcy5yZW1vdmUoJ2F1dGh6RGF0YScsIGNvbmZpZyk7XHJcbiAgICB0aGlzLnJlbW92ZSgncmV1c2FibGVfcmVmcmVzaF90b2tlbicsIGNvbmZpZyk7XHJcbiAgICB0aGlzLnJlbW92ZSgnYXV0aG5SZXN1bHQnLCBjb25maWcpO1xyXG4gIH1cclxuXHJcbiAgZ2V0QWNjZXNzVG9rZW4oY29uZmlnOiBPcGVuSWRDb25maWd1cmF0aW9uKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLnJlYWQoJ2F1dGh6RGF0YScsIGNvbmZpZyk7XHJcbiAgfVxyXG5cclxuICBnZXRJZFRva2VuKGNvbmZpZzogT3BlbklkQ29uZmlndXJhdGlvbik6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5yZWFkKCdhdXRoblJlc3VsdCcsIGNvbmZpZyk/LmlkX3Rva2VuO1xyXG4gIH1cclxuXHJcbiAgZ2V0UmVmcmVzaFRva2VuKGNvbmZpZzogT3BlbklkQ29uZmlndXJhdGlvbik6IHN0cmluZyB7XHJcbiAgICBjb25zdCByZWZyZXNoVG9rZW4gPSB0aGlzLnJlYWQoJ2F1dGhuUmVzdWx0JywgY29uZmlnKT8ucmVmcmVzaF90b2tlbjtcclxuXHJcbiAgICBpZiAoIXJlZnJlc2hUb2tlbiAmJiBjb25maWcuYWxsb3dVbnNhZmVSZXVzZVJlZnJlc2hUb2tlbikge1xyXG4gICAgICByZXR1cm4gdGhpcy5yZWFkKCdyZXVzYWJsZV9yZWZyZXNoX3Rva2VuJywgY29uZmlnKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVmcmVzaFRva2VuO1xyXG4gIH1cclxuXHJcbiAgZ2V0QXV0aGVudGljYXRpb25SZXN1bHQoY29uZmlnOiBPcGVuSWRDb25maWd1cmF0aW9uKTogYW55IHtcclxuICAgIHJldHVybiB0aGlzLnJlYWQoJ2F1dGhuUmVzdWx0JywgY29uZmlnKTtcclxuICB9XHJcbn1cclxuIl19