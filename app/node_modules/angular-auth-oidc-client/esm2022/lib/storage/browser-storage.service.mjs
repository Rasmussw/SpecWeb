import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../logging/logger.service";
import * as i2 from "./abstract-security-storage";
class BrowserStorageService {
    constructor(loggerService, abstractSecurityStorage) {
        this.loggerService = loggerService;
        this.abstractSecurityStorage = abstractSecurityStorage;
    }
    read(key, configuration) {
        const { configId } = configuration;
        if (!this.hasStorage()) {
            this.loggerService.logDebug(configuration, `Wanted to read '${key}' but Storage was undefined`);
            return null;
        }
        const storedConfig = this.abstractSecurityStorage.read(configId);
        if (!storedConfig) {
            return null;
        }
        return JSON.parse(storedConfig);
    }
    write(value, configuration) {
        const { configId } = configuration;
        if (!this.hasStorage()) {
            this.loggerService.logDebug(configuration, `Wanted to write '${value}' but Storage was falsy`);
            return false;
        }
        value = value || null;
        this.abstractSecurityStorage.write(configId, JSON.stringify(value));
        return true;
    }
    remove(key, configuration) {
        if (!this.hasStorage()) {
            this.loggerService.logDebug(configuration, `Wanted to remove '${key}' but Storage was falsy`);
            return false;
        }
        // const storage = this.getStorage(configuration);
        // if (!storage) {
        //   this.loggerService.logDebug(configuration, `Wanted to write '${key}' but Storage was falsy`);
        //   return false;
        // }
        this.abstractSecurityStorage.remove(key);
        return true;
    }
    // TODO THIS STORAGE WANTS AN ID BUT CLEARS EVERYTHING
    clear(configuration) {
        if (!this.hasStorage()) {
            this.loggerService.logDebug(configuration, `Wanted to clear storage but Storage was falsy`);
            return false;
        }
        // const storage = this.getStorage(configuration);
        // if (!storage) {
        //   this.loggerService.logDebug(configuration, `Wanted to clear storage but Storage was falsy`);
        //   return false;
        // }
        this.abstractSecurityStorage.clear();
        return true;
    }
    hasStorage() {
        return typeof Storage !== 'undefined';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: BrowserStorageService, deps: [{ token: i1.LoggerService }, { token: i2.AbstractSecurityStorage }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: BrowserStorageService, providedIn: 'root' }); }
}
export { BrowserStorageService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: BrowserStorageService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.LoggerService }, { type: i2.AbstractSecurityStorage }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3Nlci1zdG9yYWdlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLWF1dGgtb2lkYy1jbGllbnQvc3JjL2xpYi9zdG9yYWdlL2Jyb3dzZXItc3RvcmFnZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7QUFLM0MsTUFDYSxxQkFBcUI7SUFDaEMsWUFDbUIsYUFBNEIsRUFDNUIsdUJBQWdEO1FBRGhELGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzVCLDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7SUFDaEUsQ0FBQztJQUVKLElBQUksQ0FBQyxHQUFXLEVBQUUsYUFBa0M7UUFDbEQsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLGFBQWEsQ0FBQztRQUVuQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUN6QixhQUFhLEVBQ2IsbUJBQW1CLEdBQUcsNkJBQTZCLENBQ3BELENBQUM7WUFFRixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVqRSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ2pCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFVLEVBQUUsYUFBa0M7UUFDbEQsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLGFBQWEsQ0FBQztRQUVuQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUN6QixhQUFhLEVBQ2Isb0JBQW9CLEtBQUsseUJBQXlCLENBQ25ELENBQUM7WUFFRixPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsS0FBSyxHQUFHLEtBQUssSUFBSSxJQUFJLENBQUM7UUFFdEIsSUFBSSxDQUFDLHVCQUF1QixDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRXBFLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFXLEVBQUUsYUFBa0M7UUFDcEQsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUN0QixJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FDekIsYUFBYSxFQUNiLHFCQUFxQixHQUFHLHlCQUF5QixDQUNsRCxDQUFDO1lBRUYsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELGtEQUFrRDtRQUNsRCxrQkFBa0I7UUFDbEIsa0dBQWtHO1FBRWxHLGtCQUFrQjtRQUNsQixJQUFJO1FBRUosSUFBSSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV6QyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxzREFBc0Q7SUFDdEQsS0FBSyxDQUFDLGFBQWtDO1FBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFDdEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQ3pCLGFBQWEsRUFDYiwrQ0FBK0MsQ0FDaEQsQ0FBQztZQUVGLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRCxrREFBa0Q7UUFDbEQsa0JBQWtCO1FBQ2xCLGlHQUFpRztRQUVqRyxrQkFBa0I7UUFDbEIsSUFBSTtRQUVKLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUVyQyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTyxVQUFVO1FBQ2hCLE9BQU8sT0FBTyxPQUFPLEtBQUssV0FBVyxDQUFDO0lBQ3hDLENBQUM7OEdBN0ZVLHFCQUFxQjtrSEFBckIscUJBQXFCLGNBRFIsTUFBTTs7U0FDbkIscUJBQXFCOzJGQUFyQixxQkFBcUI7a0JBRGpDLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPcGVuSWRDb25maWd1cmF0aW9uIH0gZnJvbSAnLi4vY29uZmlnL29wZW5pZC1jb25maWd1cmF0aW9uJztcclxuaW1wb3J0IHsgTG9nZ2VyU2VydmljZSB9IGZyb20gJy4uL2xvZ2dpbmcvbG9nZ2VyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBBYnN0cmFjdFNlY3VyaXR5U3RvcmFnZSB9IGZyb20gJy4vYWJzdHJhY3Qtc2VjdXJpdHktc3RvcmFnZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxyXG5leHBvcnQgY2xhc3MgQnJvd3NlclN0b3JhZ2VTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgbG9nZ2VyU2VydmljZTogTG9nZ2VyU2VydmljZSxcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgYWJzdHJhY3RTZWN1cml0eVN0b3JhZ2U6IEFic3RyYWN0U2VjdXJpdHlTdG9yYWdlXHJcbiAgKSB7fVxyXG5cclxuICByZWFkKGtleTogc3RyaW5nLCBjb25maWd1cmF0aW9uOiBPcGVuSWRDb25maWd1cmF0aW9uKTogYW55IHtcclxuICAgIGNvbnN0IHsgY29uZmlnSWQgfSA9IGNvbmZpZ3VyYXRpb247XHJcblxyXG4gICAgaWYgKCF0aGlzLmhhc1N0b3JhZ2UoKSkge1xyXG4gICAgICB0aGlzLmxvZ2dlclNlcnZpY2UubG9nRGVidWcoXHJcbiAgICAgICAgY29uZmlndXJhdGlvbixcclxuICAgICAgICBgV2FudGVkIHRvIHJlYWQgJyR7a2V5fScgYnV0IFN0b3JhZ2Ugd2FzIHVuZGVmaW5lZGBcclxuICAgICAgKTtcclxuXHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHN0b3JlZENvbmZpZyA9IHRoaXMuYWJzdHJhY3RTZWN1cml0eVN0b3JhZ2UucmVhZChjb25maWdJZCk7XHJcblxyXG4gICAgaWYgKCFzdG9yZWRDb25maWcpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RvcmVkQ29uZmlnKTtcclxuICB9XHJcblxyXG4gIHdyaXRlKHZhbHVlOiBhbnksIGNvbmZpZ3VyYXRpb246IE9wZW5JZENvbmZpZ3VyYXRpb24pOiBib29sZWFuIHtcclxuICAgIGNvbnN0IHsgY29uZmlnSWQgfSA9IGNvbmZpZ3VyYXRpb247XHJcblxyXG4gICAgaWYgKCF0aGlzLmhhc1N0b3JhZ2UoKSkge1xyXG4gICAgICB0aGlzLmxvZ2dlclNlcnZpY2UubG9nRGVidWcoXHJcbiAgICAgICAgY29uZmlndXJhdGlvbixcclxuICAgICAgICBgV2FudGVkIHRvIHdyaXRlICcke3ZhbHVlfScgYnV0IFN0b3JhZ2Ugd2FzIGZhbHN5YFxyXG4gICAgICApO1xyXG5cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHZhbHVlID0gdmFsdWUgfHwgbnVsbDtcclxuXHJcbiAgICB0aGlzLmFic3RyYWN0U2VjdXJpdHlTdG9yYWdlLndyaXRlKGNvbmZpZ0lkLCBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlKGtleTogc3RyaW5nLCBjb25maWd1cmF0aW9uOiBPcGVuSWRDb25maWd1cmF0aW9uKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoIXRoaXMuaGFzU3RvcmFnZSgpKSB7XHJcbiAgICAgIHRoaXMubG9nZ2VyU2VydmljZS5sb2dEZWJ1ZyhcclxuICAgICAgICBjb25maWd1cmF0aW9uLFxyXG4gICAgICAgIGBXYW50ZWQgdG8gcmVtb3ZlICcke2tleX0nIGJ1dCBTdG9yYWdlIHdhcyBmYWxzeWBcclxuICAgICAgKTtcclxuXHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjb25zdCBzdG9yYWdlID0gdGhpcy5nZXRTdG9yYWdlKGNvbmZpZ3VyYXRpb24pO1xyXG4gICAgLy8gaWYgKCFzdG9yYWdlKSB7XHJcbiAgICAvLyAgIHRoaXMubG9nZ2VyU2VydmljZS5sb2dEZWJ1Zyhjb25maWd1cmF0aW9uLCBgV2FudGVkIHRvIHdyaXRlICcke2tleX0nIGJ1dCBTdG9yYWdlIHdhcyBmYWxzeWApO1xyXG5cclxuICAgIC8vICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIHRoaXMuYWJzdHJhY3RTZWN1cml0eVN0b3JhZ2UucmVtb3ZlKGtleSk7XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICAvLyBUT0RPIFRISVMgU1RPUkFHRSBXQU5UUyBBTiBJRCBCVVQgQ0xFQVJTIEVWRVJZVEhJTkdcclxuICBjbGVhcihjb25maWd1cmF0aW9uOiBPcGVuSWRDb25maWd1cmF0aW9uKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoIXRoaXMuaGFzU3RvcmFnZSgpKSB7XHJcbiAgICAgIHRoaXMubG9nZ2VyU2VydmljZS5sb2dEZWJ1ZyhcclxuICAgICAgICBjb25maWd1cmF0aW9uLFxyXG4gICAgICAgIGBXYW50ZWQgdG8gY2xlYXIgc3RvcmFnZSBidXQgU3RvcmFnZSB3YXMgZmFsc3lgXHJcbiAgICAgICk7XHJcblxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY29uc3Qgc3RvcmFnZSA9IHRoaXMuZ2V0U3RvcmFnZShjb25maWd1cmF0aW9uKTtcclxuICAgIC8vIGlmICghc3RvcmFnZSkge1xyXG4gICAgLy8gICB0aGlzLmxvZ2dlclNlcnZpY2UubG9nRGVidWcoY29uZmlndXJhdGlvbiwgYFdhbnRlZCB0byBjbGVhciBzdG9yYWdlIGJ1dCBTdG9yYWdlIHdhcyBmYWxzeWApO1xyXG5cclxuICAgIC8vICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIHRoaXMuYWJzdHJhY3RTZWN1cml0eVN0b3JhZ2UuY2xlYXIoKTtcclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaGFzU3RvcmFnZSgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0eXBlb2YgU3RvcmFnZSAhPT0gJ3VuZGVmaW5lZCc7XHJcbiAgfVxyXG59XHJcbiJdfQ==