import { POSITIVE_VALIDATION_RESULT } from '../rule';
const createIdentifierToCheck = (passedConfig) => {
    if (!passedConfig) {
        return null;
    }
    const { authority, clientId, scope } = passedConfig;
    return `${authority}${clientId}${scope}`;
};
const arrayHasDuplicates = (array) => new Set(array).size !== array.length;
export const ensureNoDuplicatedConfigsRule = (passedConfigs) => {
    const allIdentifiers = passedConfigs.map((x) => createIdentifierToCheck(x));
    const someAreNull = allIdentifiers.some((x) => x === null);
    if (someAreNull) {
        return {
            result: false,
            messages: [
                `Please make sure you add an object with a 'config' property: ....({ config }) instead of ...(config)`,
            ],
            level: 'error',
        };
    }
    const hasDuplicates = arrayHasDuplicates(allIdentifiers);
    if (hasDuplicates) {
        return {
            result: false,
            messages: [
                'You added multiple configs with the same authority, clientId and scope',
            ],
            level: 'warning',
        };
    }
    return POSITIVE_VALIDATION_RESULT;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5zdXJlLW5vLWR1cGxpY2F0ZWQtY29uZmlncy5ydWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1hdXRoLW9pZGMtY2xpZW50L3NyYy9saWIvY29uZmlnL3ZhbGlkYXRpb24vcnVsZXMvZW5zdXJlLW5vLWR1cGxpY2F0ZWQtY29uZmlncy5ydWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSwwQkFBMEIsRUFBd0IsTUFBTSxTQUFTLENBQUM7QUFFM0UsTUFBTSx1QkFBdUIsR0FBRyxDQUFDLFlBQWlDLEVBQVUsRUFBRTtJQUM1RSxJQUFJLENBQUMsWUFBWSxFQUFFO1FBQ2pCLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCxNQUFNLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsR0FBRyxZQUFZLENBQUM7SUFFcEQsT0FBTyxHQUFHLFNBQVMsR0FBRyxRQUFRLEdBQUcsS0FBSyxFQUFFLENBQUM7QUFDM0MsQ0FBQyxDQUFDO0FBRUYsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEtBQWUsRUFBVyxFQUFFLENBQ3RELElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksS0FBSyxLQUFLLENBQUMsTUFBTSxDQUFDO0FBRXZDLE1BQU0sQ0FBQyxNQUFNLDZCQUE2QixHQUFHLENBQzNDLGFBQW9DLEVBQ2QsRUFBRTtJQUN4QixNQUFNLGNBQWMsR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTVFLE1BQU0sV0FBVyxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQztJQUUzRCxJQUFJLFdBQVcsRUFBRTtRQUNmLE9BQU87WUFDTCxNQUFNLEVBQUUsS0FBSztZQUNiLFFBQVEsRUFBRTtnQkFDUixzR0FBc0c7YUFDdkc7WUFDRCxLQUFLLEVBQUUsT0FBTztTQUNmLENBQUM7S0FDSDtJQUVELE1BQU0sYUFBYSxHQUFHLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRXpELElBQUksYUFBYSxFQUFFO1FBQ2pCLE9BQU87WUFDTCxNQUFNLEVBQUUsS0FBSztZQUNiLFFBQVEsRUFBRTtnQkFDUix3RUFBd0U7YUFDekU7WUFDRCxLQUFLLEVBQUUsU0FBUztTQUNqQixDQUFDO0tBQ0g7SUFFRCxPQUFPLDBCQUEwQixDQUFDO0FBQ3BDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9wZW5JZENvbmZpZ3VyYXRpb24gfSBmcm9tICcuLi8uLi9vcGVuaWQtY29uZmlndXJhdGlvbic7XHJcbmltcG9ydCB7IFBPU0lUSVZFX1ZBTElEQVRJT05fUkVTVUxULCBSdWxlVmFsaWRhdGlvblJlc3VsdCB9IGZyb20gJy4uL3J1bGUnO1xyXG5cclxuY29uc3QgY3JlYXRlSWRlbnRpZmllclRvQ2hlY2sgPSAocGFzc2VkQ29uZmlnOiBPcGVuSWRDb25maWd1cmF0aW9uKTogc3RyaW5nID0+IHtcclxuICBpZiAoIXBhc3NlZENvbmZpZykge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICBjb25zdCB7IGF1dGhvcml0eSwgY2xpZW50SWQsIHNjb3BlIH0gPSBwYXNzZWRDb25maWc7XHJcblxyXG4gIHJldHVybiBgJHthdXRob3JpdHl9JHtjbGllbnRJZH0ke3Njb3BlfWA7XHJcbn07XHJcblxyXG5jb25zdCBhcnJheUhhc0R1cGxpY2F0ZXMgPSAoYXJyYXk6IHN0cmluZ1tdKTogYm9vbGVhbiA9PlxyXG4gIG5ldyBTZXQoYXJyYXkpLnNpemUgIT09IGFycmF5Lmxlbmd0aDtcclxuXHJcbmV4cG9ydCBjb25zdCBlbnN1cmVOb0R1cGxpY2F0ZWRDb25maWdzUnVsZSA9IChcclxuICBwYXNzZWRDb25maWdzOiBPcGVuSWRDb25maWd1cmF0aW9uW11cclxuKTogUnVsZVZhbGlkYXRpb25SZXN1bHQgPT4ge1xyXG4gIGNvbnN0IGFsbElkZW50aWZpZXJzID0gcGFzc2VkQ29uZmlncy5tYXAoKHgpID0+IGNyZWF0ZUlkZW50aWZpZXJUb0NoZWNrKHgpKTtcclxuXHJcbiAgY29uc3Qgc29tZUFyZU51bGwgPSBhbGxJZGVudGlmaWVycy5zb21lKCh4KSA9PiB4ID09PSBudWxsKTtcclxuXHJcbiAgaWYgKHNvbWVBcmVOdWxsKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByZXN1bHQ6IGZhbHNlLFxyXG4gICAgICBtZXNzYWdlczogW1xyXG4gICAgICAgIGBQbGVhc2UgbWFrZSBzdXJlIHlvdSBhZGQgYW4gb2JqZWN0IHdpdGggYSAnY29uZmlnJyBwcm9wZXJ0eTogLi4uLih7IGNvbmZpZyB9KSBpbnN0ZWFkIG9mIC4uLihjb25maWcpYCxcclxuICAgICAgXSxcclxuICAgICAgbGV2ZWw6ICdlcnJvcicsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY29uc3QgaGFzRHVwbGljYXRlcyA9IGFycmF5SGFzRHVwbGljYXRlcyhhbGxJZGVudGlmaWVycyk7XHJcblxyXG4gIGlmIChoYXNEdXBsaWNhdGVzKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByZXN1bHQ6IGZhbHNlLFxyXG4gICAgICBtZXNzYWdlczogW1xyXG4gICAgICAgICdZb3UgYWRkZWQgbXVsdGlwbGUgY29uZmlncyB3aXRoIHRoZSBzYW1lIGF1dGhvcml0eSwgY2xpZW50SWQgYW5kIHNjb3BlJyxcclxuICAgICAgXSxcclxuICAgICAgbGV2ZWw6ICd3YXJuaW5nJyxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICByZXR1cm4gUE9TSVRJVkVfVkFMSURBVElPTl9SRVNVTFQ7XHJcbn07XHJcbiJdfQ==