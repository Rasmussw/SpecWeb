import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
class FlowHelper {
    isCurrentFlowCodeFlow(configuration) {
        return this.currentFlowIs('code', configuration);
    }
    isCurrentFlowAnyImplicitFlow(configuration) {
        return (this.isCurrentFlowImplicitFlowWithAccessToken(configuration) ||
            this.isCurrentFlowImplicitFlowWithoutAccessToken(configuration));
    }
    isCurrentFlowCodeFlowWithRefreshTokens(configuration) {
        const { useRefreshToken } = configuration;
        return this.isCurrentFlowCodeFlow(configuration) && useRefreshToken;
    }
    isCurrentFlowImplicitFlowWithAccessToken(configuration) {
        return this.currentFlowIs('id_token token', configuration);
    }
    currentFlowIs(flowTypes, configuration) {
        const { responseType } = configuration;
        if (Array.isArray(flowTypes)) {
            return flowTypes.some((x) => responseType === x);
        }
        return responseType === flowTypes;
    }
    isCurrentFlowImplicitFlowWithoutAccessToken(configuration) {
        return this.currentFlowIs('id_token', configuration);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: FlowHelper, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: FlowHelper, providedIn: 'root' }); }
}
export { FlowHelper };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: FlowHelper, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxvdy1oZWxwZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYXV0aC1vaWRjLWNsaWVudC9zcmMvbGliL3V0aWxzL2Zsb3dIZWxwZXIvZmxvdy1oZWxwZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUczQyxNQUNhLFVBQVU7SUFDckIscUJBQXFCLENBQUMsYUFBa0M7UUFDdEQsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQsNEJBQTRCLENBQUMsYUFBa0M7UUFDN0QsT0FBTyxDQUNMLElBQUksQ0FBQyx3Q0FBd0MsQ0FBQyxhQUFhLENBQUM7WUFDNUQsSUFBSSxDQUFDLDJDQUEyQyxDQUFDLGFBQWEsQ0FBQyxDQUNoRSxDQUFDO0lBQ0osQ0FBQztJQUVELHNDQUFzQyxDQUNwQyxhQUFrQztRQUVsQyxNQUFNLEVBQUUsZUFBZSxFQUFFLEdBQUcsYUFBYSxDQUFDO1FBRTFDLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDLGFBQWEsQ0FBQyxJQUFJLGVBQWUsQ0FBQztJQUN0RSxDQUFDO0lBRUQsd0NBQXdDLENBQ3RDLGFBQWtDO1FBRWxDLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsYUFBYSxDQUNYLFNBQTRCLEVBQzVCLGFBQWtDO1FBRWxDLE1BQU0sRUFBRSxZQUFZLEVBQUUsR0FBRyxhQUFhLENBQUM7UUFFdkMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQzVCLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ2xEO1FBRUQsT0FBTyxZQUFZLEtBQUssU0FBUyxDQUFDO0lBQ3BDLENBQUM7SUFFTywyQ0FBMkMsQ0FDakQsYUFBa0M7UUFFbEMsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUN2RCxDQUFDOzhHQTNDVSxVQUFVO2tIQUFWLFVBQVUsY0FERyxNQUFNOztTQUNuQixVQUFVOzJGQUFWLFVBQVU7a0JBRHRCLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPcGVuSWRDb25maWd1cmF0aW9uIH0gZnJvbSAnLi4vLi4vY29uZmlnL29wZW5pZC1jb25maWd1cmF0aW9uJztcclxuXHJcbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXHJcbmV4cG9ydCBjbGFzcyBGbG93SGVscGVyIHtcclxuICBpc0N1cnJlbnRGbG93Q29kZUZsb3coY29uZmlndXJhdGlvbjogT3BlbklkQ29uZmlndXJhdGlvbik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY3VycmVudEZsb3dJcygnY29kZScsIGNvbmZpZ3VyYXRpb24pO1xyXG4gIH1cclxuXHJcbiAgaXNDdXJyZW50Rmxvd0FueUltcGxpY2l0Rmxvdyhjb25maWd1cmF0aW9uOiBPcGVuSWRDb25maWd1cmF0aW9uKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICB0aGlzLmlzQ3VycmVudEZsb3dJbXBsaWNpdEZsb3dXaXRoQWNjZXNzVG9rZW4oY29uZmlndXJhdGlvbikgfHxcclxuICAgICAgdGhpcy5pc0N1cnJlbnRGbG93SW1wbGljaXRGbG93V2l0aG91dEFjY2Vzc1Rva2VuKGNvbmZpZ3VyYXRpb24pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgaXNDdXJyZW50Rmxvd0NvZGVGbG93V2l0aFJlZnJlc2hUb2tlbnMoXHJcbiAgICBjb25maWd1cmF0aW9uOiBPcGVuSWRDb25maWd1cmF0aW9uXHJcbiAgKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCB7IHVzZVJlZnJlc2hUb2tlbiB9ID0gY29uZmlndXJhdGlvbjtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5pc0N1cnJlbnRGbG93Q29kZUZsb3coY29uZmlndXJhdGlvbikgJiYgdXNlUmVmcmVzaFRva2VuO1xyXG4gIH1cclxuXHJcbiAgaXNDdXJyZW50Rmxvd0ltcGxpY2l0Rmxvd1dpdGhBY2Nlc3NUb2tlbihcclxuICAgIGNvbmZpZ3VyYXRpb246IE9wZW5JZENvbmZpZ3VyYXRpb25cclxuICApOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmN1cnJlbnRGbG93SXMoJ2lkX3Rva2VuIHRva2VuJywgY29uZmlndXJhdGlvbik7XHJcbiAgfVxyXG5cclxuICBjdXJyZW50Rmxvd0lzKFxyXG4gICAgZmxvd1R5cGVzOiBzdHJpbmdbXSB8IHN0cmluZyxcclxuICAgIGNvbmZpZ3VyYXRpb246IE9wZW5JZENvbmZpZ3VyYXRpb25cclxuICApOiBib29sZWFuIHtcclxuICAgIGNvbnN0IHsgcmVzcG9uc2VUeXBlIH0gPSBjb25maWd1cmF0aW9uO1xyXG5cclxuICAgIGlmIChBcnJheS5pc0FycmF5KGZsb3dUeXBlcykpIHtcclxuICAgICAgcmV0dXJuIGZsb3dUeXBlcy5zb21lKCh4KSA9PiByZXNwb25zZVR5cGUgPT09IHgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXNwb25zZVR5cGUgPT09IGZsb3dUeXBlcztcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaXNDdXJyZW50Rmxvd0ltcGxpY2l0Rmxvd1dpdGhvdXRBY2Nlc3NUb2tlbihcclxuICAgIGNvbmZpZ3VyYXRpb246IE9wZW5JZENvbmZpZ3VyYXRpb25cclxuICApOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmN1cnJlbnRGbG93SXMoJ2lkX3Rva2VuJywgY29uZmlndXJhdGlvbik7XHJcbiAgfVxyXG59XHJcbiJdfQ==