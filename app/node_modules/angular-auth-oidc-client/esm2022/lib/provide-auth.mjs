import { makeEnvironmentProviders, } from '@angular/core';
import { createStaticLoader, PASSED_CONFIG, } from './auth-config';
import { StsConfigLoader } from './config/loader/config-loader';
import { AbstractLoggerService } from './logging/abstract-logger.service';
import { ConsoleLoggerService } from './logging/console-logger.service';
import { AbstractSecurityStorage } from './storage/abstract-security-storage';
import { DefaultSessionStorageService } from './storage/default-sessionstorage.service';
export function provideAuth(passedConfig) {
    return makeEnvironmentProviders([..._provideAuth(passedConfig)]);
}
export function _provideAuth(passedConfig) {
    return [
        // Make the PASSED_CONFIG available through injection
        { provide: PASSED_CONFIG, useValue: passedConfig },
        // Create the loader: Either the one getting passed or a static one
        passedConfig?.loader || {
            provide: StsConfigLoader,
            useFactory: createStaticLoader,
            deps: [PASSED_CONFIG],
        },
        {
            provide: AbstractSecurityStorage,
            useClass: DefaultSessionStorageService,
        },
        { provide: AbstractLoggerService, useClass: ConsoleLoggerService },
    ];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZS1hdXRoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1hdXRoLW9pZGMtY2xpZW50L3NyYy9saWIvcHJvdmlkZS1hdXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCx3QkFBd0IsR0FFekIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUNMLGtCQUFrQixFQUNsQixhQUFhLEdBRWQsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBRXhGLE1BQU0sVUFBVSxXQUFXLENBQ3pCLFlBQWlDO0lBRWpDLE9BQU8sd0JBQXdCLENBQUMsQ0FBQyxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkUsQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZLENBQUMsWUFBaUM7SUFDNUQsT0FBTztRQUNMLHFEQUFxRDtRQUNyRCxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRTtRQUVsRCxtRUFBbUU7UUFDbkUsWUFBWSxFQUFFLE1BQU0sSUFBSTtZQUN0QixPQUFPLEVBQUUsZUFBZTtZQUN4QixVQUFVLEVBQUUsa0JBQWtCO1lBQzlCLElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQztTQUN0QjtRQUNEO1lBQ0UsT0FBTyxFQUFFLHVCQUF1QjtZQUNoQyxRQUFRLEVBQUUsNEJBQTRCO1NBQ3ZDO1FBQ0QsRUFBRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsUUFBUSxFQUFFLG9CQUFvQixFQUFFO0tBQ25FLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBFbnZpcm9ubWVudFByb3ZpZGVycyxcclxuICBtYWtlRW52aXJvbm1lbnRQcm92aWRlcnMsXHJcbiAgUHJvdmlkZXIsXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7XHJcbiAgY3JlYXRlU3RhdGljTG9hZGVyLFxyXG4gIFBBU1NFRF9DT05GSUcsXHJcbiAgUGFzc2VkSW5pdGlhbENvbmZpZyxcclxufSBmcm9tICcuL2F1dGgtY29uZmlnJztcclxuaW1wb3J0IHsgU3RzQ29uZmlnTG9hZGVyIH0gZnJvbSAnLi9jb25maWcvbG9hZGVyL2NvbmZpZy1sb2FkZXInO1xyXG5pbXBvcnQgeyBBYnN0cmFjdExvZ2dlclNlcnZpY2UgfSBmcm9tICcuL2xvZ2dpbmcvYWJzdHJhY3QtbG9nZ2VyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDb25zb2xlTG9nZ2VyU2VydmljZSB9IGZyb20gJy4vbG9nZ2luZy9jb25zb2xlLWxvZ2dlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQWJzdHJhY3RTZWN1cml0eVN0b3JhZ2UgfSBmcm9tICcuL3N0b3JhZ2UvYWJzdHJhY3Qtc2VjdXJpdHktc3RvcmFnZSc7XHJcbmltcG9ydCB7IERlZmF1bHRTZXNzaW9uU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuL3N0b3JhZ2UvZGVmYXVsdC1zZXNzaW9uc3RvcmFnZS5zZXJ2aWNlJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlQXV0aChcclxuICBwYXNzZWRDb25maWc6IFBhc3NlZEluaXRpYWxDb25maWdcclxuKTogRW52aXJvbm1lbnRQcm92aWRlcnMge1xyXG4gIHJldHVybiBtYWtlRW52aXJvbm1lbnRQcm92aWRlcnMoWy4uLl9wcm92aWRlQXV0aChwYXNzZWRDb25maWcpXSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfcHJvdmlkZUF1dGgocGFzc2VkQ29uZmlnOiBQYXNzZWRJbml0aWFsQ29uZmlnKTogUHJvdmlkZXJbXSB7XHJcbiAgcmV0dXJuIFtcclxuICAgIC8vIE1ha2UgdGhlIFBBU1NFRF9DT05GSUcgYXZhaWxhYmxlIHRocm91Z2ggaW5qZWN0aW9uXHJcbiAgICB7IHByb3ZpZGU6IFBBU1NFRF9DT05GSUcsIHVzZVZhbHVlOiBwYXNzZWRDb25maWcgfSxcclxuXHJcbiAgICAvLyBDcmVhdGUgdGhlIGxvYWRlcjogRWl0aGVyIHRoZSBvbmUgZ2V0dGluZyBwYXNzZWQgb3IgYSBzdGF0aWMgb25lXHJcbiAgICBwYXNzZWRDb25maWc/LmxvYWRlciB8fCB7XHJcbiAgICAgIHByb3ZpZGU6IFN0c0NvbmZpZ0xvYWRlcixcclxuICAgICAgdXNlRmFjdG9yeTogY3JlYXRlU3RhdGljTG9hZGVyLFxyXG4gICAgICBkZXBzOiBbUEFTU0VEX0NPTkZJR10sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBwcm92aWRlOiBBYnN0cmFjdFNlY3VyaXR5U3RvcmFnZSxcclxuICAgICAgdXNlQ2xhc3M6IERlZmF1bHRTZXNzaW9uU3RvcmFnZVNlcnZpY2UsXHJcbiAgICB9LFxyXG4gICAgeyBwcm92aWRlOiBBYnN0cmFjdExvZ2dlclNlcnZpY2UsIHVzZUNsYXNzOiBDb25zb2xlTG9nZ2VyU2VydmljZSB9LFxyXG4gIF07XHJcbn1cclxuIl19