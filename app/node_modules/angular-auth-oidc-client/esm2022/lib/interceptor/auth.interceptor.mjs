import { Injectable, inject } from '@angular/core';
import { AuthStateService } from '../auth-state/auth-state.service';
import { ConfigurationService } from '../config/config.service';
import { LoggerService } from '../logging/logger.service';
import { ClosestMatchingRouteService } from './closest-matching-route.service';
import * as i0 from "@angular/core";
import * as i1 from "../auth-state/auth-state.service";
import * as i2 from "../config/config.service";
import * as i3 from "../logging/logger.service";
import * as i4 from "./closest-matching-route.service";
class AuthInterceptor {
    constructor(authStateService, configurationService, loggerService, closestMatchingRouteService) {
        this.authStateService = authStateService;
        this.configurationService = configurationService;
        this.loggerService = loggerService;
        this.closestMatchingRouteService = closestMatchingRouteService;
    }
    intercept(req, next) {
        return interceptRequest(req, next.handle, {
            configurationService: this.configurationService,
            authStateService: this.authStateService,
            closestMatchingRouteService: this.closestMatchingRouteService,
            loggerService: this.loggerService,
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: AuthInterceptor, deps: [{ token: i1.AuthStateService }, { token: i2.ConfigurationService }, { token: i3.LoggerService }, { token: i4.ClosestMatchingRouteService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: AuthInterceptor }); }
}
export { AuthInterceptor };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: AuthInterceptor, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.AuthStateService }, { type: i2.ConfigurationService }, { type: i3.LoggerService }, { type: i4.ClosestMatchingRouteService }]; } });
export function authInterceptor() {
    return (req, next) => {
        return interceptRequest(req, next, {
            configurationService: inject(ConfigurationService),
            authStateService: inject(AuthStateService),
            closestMatchingRouteService: inject(ClosestMatchingRouteService),
            loggerService: inject(LoggerService),
        });
    };
}
function interceptRequest(req, next, deps) {
    if (!deps.configurationService.hasAtLeastOneConfig()) {
        return next(req);
    }
    const allConfigurations = deps.configurationService.getAllConfigurations();
    const allRoutesConfigured = allConfigurations.map((x) => x.secureRoutes || []);
    const allRoutesConfiguredFlat = [].concat(...allRoutesConfigured);
    if (allRoutesConfiguredFlat.length === 0) {
        deps.loggerService.logDebug(allConfigurations[0], `No routes to check configured`);
        return next(req);
    }
    const { matchingConfig, matchingRoute } = deps.closestMatchingRouteService.getConfigIdForClosestMatchingRoute(req.url, allConfigurations);
    if (!matchingConfig) {
        deps.loggerService.logDebug(allConfigurations[0], `Did not find any configured route for route ${req.url}`);
        return next(req);
    }
    deps.loggerService.logDebug(matchingConfig, `'${req.url}' matches configured route '${matchingRoute}'`);
    const token = deps.authStateService.getAccessToken(matchingConfig);
    if (!token) {
        deps.loggerService.logDebug(matchingConfig, `Wanted to add token to ${req.url} but found no token: '${token}'`);
        return next(req);
    }
    deps.loggerService.logDebug(matchingConfig, `'${req.url}' matches configured route '${matchingRoute}', adding token`);
    req = req.clone({
        headers: req.headers.set('Authorization', 'Bearer ' + token),
    });
    return next(req);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYXV0aC1vaWRjLWNsaWVudC9zcmMvbGliL2ludGVyY2VwdG9yL2F1dGguaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDcEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzFELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDOzs7Ozs7QUFFL0UsTUFDYSxlQUFlO0lBQzFCLFlBQ21CLGdCQUFrQyxFQUNsQyxvQkFBMEMsRUFDMUMsYUFBNEIsRUFDNUIsMkJBQXdEO1FBSHhELHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQUMxQyxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUM1QixnQ0FBMkIsR0FBM0IsMkJBQTJCLENBQTZCO0lBQ3hFLENBQUM7SUFFSixTQUFTLENBQ1AsR0FBcUIsRUFDckIsSUFBaUI7UUFFakIsT0FBTyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUN4QyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsb0JBQW9CO1lBQy9DLGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0I7WUFDdkMsMkJBQTJCLEVBQUUsSUFBSSxDQUFDLDJCQUEyQjtZQUM3RCxhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWE7U0FDbEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs4R0FsQlUsZUFBZTtrSEFBZixlQUFlOztTQUFm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XG4gIEh0dHBIYW5kbGVyLFxyXG4gIEh0dHBIYW5kbGVyRm4sXHJcbiAgSHR0cEludGVyY2VwdG9yLFxyXG4gIEh0dHBJbnRlcmNlcHRvckZuLFxyXG4gIEh0dHBSZXF1ZXN0LFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgaW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgQXV0aFN0YXRlU2VydmljZSB9IGZyb20gJy4uL2F1dGgtc3RhdGUvYXV0aC1zdGF0ZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ29uZmlndXJhdGlvblNlcnZpY2UgfSBmcm9tICcuLi9jb25maWcvY29uZmlnLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBMb2dnZXJTZXJ2aWNlIH0gZnJvbSAnLi4vbG9nZ2luZy9sb2dnZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IENsb3Nlc3RNYXRjaGluZ1JvdXRlU2VydmljZSB9IGZyb20gJy4vY2xvc2VzdC1tYXRjaGluZy1yb3V0ZS5zZXJ2aWNlJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEF1dGhJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGF1dGhTdGF0ZVNlcnZpY2U6IEF1dGhTdGF0ZVNlcnZpY2UsXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbmZpZ3VyYXRpb25TZXJ2aWNlOiBDb25maWd1cmF0aW9uU2VydmljZSxcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgbG9nZ2VyU2VydmljZTogTG9nZ2VyU2VydmljZSxcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2xvc2VzdE1hdGNoaW5nUm91dGVTZXJ2aWNlOiBDbG9zZXN0TWF0Y2hpbmdSb3V0ZVNlcnZpY2VcclxuICApIHt9XHJcblxyXG4gIGludGVyY2VwdChcclxuICAgIHJlcTogSHR0cFJlcXVlc3Q8YW55PixcclxuICAgIG5leHQ6IEh0dHBIYW5kbGVyXHJcbiAgKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xyXG4gICAgcmV0dXJuIGludGVyY2VwdFJlcXVlc3QocmVxLCBuZXh0LmhhbmRsZSwge1xyXG4gICAgICBjb25maWd1cmF0aW9uU2VydmljZTogdGhpcy5jb25maWd1cmF0aW9uU2VydmljZSxcclxuICAgICAgYXV0aFN0YXRlU2VydmljZTogdGhpcy5hdXRoU3RhdGVTZXJ2aWNlLFxyXG4gICAgICBjbG9zZXN0TWF0Y2hpbmdSb3V0ZVNlcnZpY2U6IHRoaXMuY2xvc2VzdE1hdGNoaW5nUm91dGVTZXJ2aWNlLFxyXG4gICAgICBsb2dnZXJTZXJ2aWNlOiB0aGlzLmxvZ2dlclNlcnZpY2UsXHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhdXRoSW50ZXJjZXB0b3IoKTogSHR0cEludGVyY2VwdG9yRm4ge1xyXG4gIHJldHVybiAocmVxLCBuZXh0KSA9PiB7XHJcbiAgICByZXR1cm4gaW50ZXJjZXB0UmVxdWVzdChyZXEsIG5leHQsIHtcclxuICAgICAgY29uZmlndXJhdGlvblNlcnZpY2U6IGluamVjdChDb25maWd1cmF0aW9uU2VydmljZSksXHJcbiAgICAgIGF1dGhTdGF0ZVNlcnZpY2U6IGluamVjdChBdXRoU3RhdGVTZXJ2aWNlKSxcclxuICAgICAgY2xvc2VzdE1hdGNoaW5nUm91dGVTZXJ2aWNlOiBpbmplY3QoQ2xvc2VzdE1hdGNoaW5nUm91dGVTZXJ2aWNlKSxcclxuICAgICAgbG9nZ2VyU2VydmljZTogaW5qZWN0KExvZ2dlclNlcnZpY2UpLFxyXG4gICAgfSk7XHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gaW50ZXJjZXB0UmVxdWVzdChcclxuICByZXE6IEh0dHBSZXF1ZXN0PGFueT4sXHJcbiAgbmV4dDogSHR0cEhhbmRsZXJGbixcclxuICBkZXBzOiB7XHJcbiAgICBhdXRoU3RhdGVTZXJ2aWNlOiBBdXRoU3RhdGVTZXJ2aWNlO1xyXG4gICAgY29uZmlndXJhdGlvblNlcnZpY2U6IENvbmZpZ3VyYXRpb25TZXJ2aWNlO1xyXG4gICAgbG9nZ2VyU2VydmljZTogTG9nZ2VyU2VydmljZTtcclxuICAgIGNsb3Nlc3RNYXRjaGluZ1JvdXRlU2VydmljZTogQ2xvc2VzdE1hdGNoaW5nUm91dGVTZXJ2aWNlO1xyXG4gIH1cclxuKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8dW5rbm93bj4+IHtcclxuICBpZiAoIWRlcHMuY29uZmlndXJhdGlvblNlcnZpY2UuaGFzQXRMZWFzdE9uZUNvbmZpZygpKSB7XHJcbiAgICByZXR1cm4gbmV4dChyZXEpO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgYWxsQ29uZmlndXJhdGlvbnMgPSBkZXBzLmNvbmZpZ3VyYXRpb25TZXJ2aWNlLmdldEFsbENvbmZpZ3VyYXRpb25zKCk7XHJcbiAgY29uc3QgYWxsUm91dGVzQ29uZmlndXJlZCA9IGFsbENvbmZpZ3VyYXRpb25zLm1hcChcclxuICAgICh4KSA9PiB4LnNlY3VyZVJvdXRlcyB8fCBbXVxyXG4gICk7XHJcbiAgY29uc3QgYWxsUm91dGVzQ29uZmlndXJlZEZsYXQgPSBbXS5jb25jYXQoLi4uYWxsUm91dGVzQ29uZmlndXJlZCkgYXMgc3RyaW5nW107XHJcblxyXG4gIGlmIChhbGxSb3V0ZXNDb25maWd1cmVkRmxhdC5sZW5ndGggPT09IDApIHtcclxuICAgIGRlcHMubG9nZ2VyU2VydmljZS5sb2dEZWJ1ZyhcclxuICAgICAgYWxsQ29uZmlndXJhdGlvbnNbMF0sXHJcbiAgICAgIGBObyByb3V0ZXMgdG8gY2hlY2sgY29uZmlndXJlZGBcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuIG5leHQocmVxKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHsgbWF0Y2hpbmdDb25maWcsIG1hdGNoaW5nUm91dGUgfSA9XHJcbiAgICBkZXBzLmNsb3Nlc3RNYXRjaGluZ1JvdXRlU2VydmljZS5nZXRDb25maWdJZEZvckNsb3Nlc3RNYXRjaGluZ1JvdXRlKFxyXG4gICAgICByZXEudXJsLFxyXG4gICAgICBhbGxDb25maWd1cmF0aW9uc1xyXG4gICAgKTtcclxuXHJcbiAgaWYgKCFtYXRjaGluZ0NvbmZpZykge1xyXG4gICAgZGVwcy5sb2dnZXJTZXJ2aWNlLmxvZ0RlYnVnKFxyXG4gICAgICBhbGxDb25maWd1cmF0aW9uc1swXSxcclxuICAgICAgYERpZCBub3QgZmluZCBhbnkgY29uZmlndXJlZCByb3V0ZSBmb3Igcm91dGUgJHtyZXEudXJsfWBcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuIG5leHQocmVxKTtcclxuICB9XHJcblxyXG4gIGRlcHMubG9nZ2VyU2VydmljZS5sb2dEZWJ1ZyhcclxuICAgIG1hdGNoaW5nQ29uZmlnLFxyXG4gICAgYCcke3JlcS51cmx9JyBtYXRjaGVzIGNvbmZpZ3VyZWQgcm91dGUgJyR7bWF0Y2hpbmdSb3V0ZX0nYFxyXG4gICk7XHJcbiAgY29uc3QgdG9rZW4gPSBkZXBzLmF1dGhTdGF0ZVNlcnZpY2UuZ2V0QWNjZXNzVG9rZW4obWF0Y2hpbmdDb25maWcpO1xyXG5cclxuICBpZiAoIXRva2VuKSB7XHJcbiAgICBkZXBzLmxvZ2dlclNlcnZpY2UubG9nRGVidWcoXHJcbiAgICAgIG1hdGNoaW5nQ29uZmlnLFxyXG4gICAgICBgV2FudGVkIHRvIGFkZCB0b2tlbiB0byAke3JlcS51cmx9IGJ1dCBmb3VuZCBubyB0b2tlbjogJyR7dG9rZW59J2BcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuIG5leHQocmVxKTtcclxuICB9XHJcblxyXG4gIGRlcHMubG9nZ2VyU2VydmljZS5sb2dEZWJ1ZyhcclxuICAgIG1hdGNoaW5nQ29uZmlnLFxyXG4gICAgYCcke3JlcS51cmx9JyBtYXRjaGVzIGNvbmZpZ3VyZWQgcm91dGUgJyR7bWF0Y2hpbmdSb3V0ZX0nLCBhZGRpbmcgdG9rZW5gXHJcbiAgKTtcclxuICByZXEgPSByZXEuY2xvbmUoe1xyXG4gICAgaGVhZGVyczogcmVxLmhlYWRlcnMuc2V0KCdBdXRob3JpemF0aW9uJywgJ0JlYXJlciAnICsgdG9rZW4pLFxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gbmV4dChyZXEpO1xyXG59XHJcbiJdfQ==