import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./par/par-login.service";
import * as i2 from "./popup/popup-login.service";
import * as i3 from "./standard/standard-login.service";
import * as i4 from "../storage/storage-persistence.service";
import * as i5 from "./popup/popup.service";
class LoginService {
    constructor(parLoginService, popUpLoginService, standardLoginService, storagePersistenceService, popupService) {
        this.parLoginService = parLoginService;
        this.popUpLoginService = popUpLoginService;
        this.standardLoginService = standardLoginService;
        this.storagePersistenceService = storagePersistenceService;
        this.popupService = popupService;
    }
    login(configuration, authOptions) {
        const { usePushedAuthorisationRequests } = configuration;
        if (authOptions?.customParams) {
            this.storagePersistenceService.write('storageCustomParamsAuthRequest', authOptions.customParams, configuration);
        }
        if (usePushedAuthorisationRequests) {
            return this.parLoginService.loginPar(configuration, authOptions);
        }
        else {
            return this.standardLoginService.loginStandard(configuration, authOptions);
        }
    }
    loginWithPopUp(configuration, allConfigs, authOptions, popupOptions) {
        const isAlreadyInPopUp = this.popupService.isCurrentlyInPopup(configuration);
        if (isAlreadyInPopUp) {
            return of({
                errorMessage: 'There is already a popup open.',
            });
        }
        const { usePushedAuthorisationRequests } = configuration;
        if (authOptions?.customParams) {
            this.storagePersistenceService.write('storageCustomParamsAuthRequest', authOptions.customParams, configuration);
        }
        if (usePushedAuthorisationRequests) {
            return this.parLoginService.loginWithPopUpPar(configuration, allConfigs, authOptions, popupOptions);
        }
        return this.popUpLoginService.loginWithPopUpStandard(configuration, allConfigs, authOptions, popupOptions);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: LoginService, deps: [{ token: i1.ParLoginService }, { token: i2.PopUpLoginService }, { token: i3.StandardLoginService }, { token: i4.StoragePersistenceService }, { token: i5.PopUpService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: LoginService, providedIn: 'root' }); }
}
export { LoginService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: LoginService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.ParLoginService }, { type: i2.PopUpLoginService }, { type: i3.StandardLoginService }, { type: i4.StoragePersistenceService }, { type: i5.PopUpService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItYXV0aC1vaWRjLWNsaWVudC9zcmMvbGliL2xvZ2luL2xvZ2luLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7Ozs7O0FBV3RDLE1BQ2EsWUFBWTtJQUN2QixZQUNtQixlQUFnQyxFQUNoQyxpQkFBb0MsRUFDcEMsb0JBQTBDLEVBQzFDLHlCQUFvRCxFQUNwRCxZQUEwQjtRQUoxQixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUNwQyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBQzFDLDhCQUF5QixHQUF6Qix5QkFBeUIsQ0FBMkI7UUFDcEQsaUJBQVksR0FBWixZQUFZLENBQWM7SUFDMUMsQ0FBQztJQUVKLEtBQUssQ0FBQyxhQUFrQyxFQUFFLFdBQXlCO1FBQ2pFLE1BQU0sRUFBRSw4QkFBOEIsRUFBRSxHQUFHLGFBQWEsQ0FBQztRQUV6RCxJQUFJLFdBQVcsRUFBRSxZQUFZLEVBQUU7WUFDN0IsSUFBSSxDQUFDLHlCQUF5QixDQUFDLEtBQUssQ0FDbEMsZ0NBQWdDLEVBQ2hDLFdBQVcsQ0FBQyxZQUFZLEVBQ3hCLGFBQWEsQ0FDZCxDQUFDO1NBQ0g7UUFFRCxJQUFJLDhCQUE4QixFQUFFO1lBQ2xDLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQ2xFO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLENBQzVDLGFBQWEsRUFDYixXQUFXLENBQ1osQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVELGNBQWMsQ0FDWixhQUFrQyxFQUNsQyxVQUFpQyxFQUNqQyxXQUF5QixFQUN6QixZQUEyQjtRQUUzQixNQUFNLGdCQUFnQixHQUNwQixJQUFJLENBQUMsWUFBWSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRXRELElBQUksZ0JBQWdCLEVBQUU7WUFDcEIsT0FBTyxFQUFFLENBQUM7Z0JBQ1IsWUFBWSxFQUFFLGdDQUFnQzthQUM5QixDQUFDLENBQUM7U0FDckI7UUFFRCxNQUFNLEVBQUUsOEJBQThCLEVBQUUsR0FBRyxhQUFhLENBQUM7UUFFekQsSUFBSSxXQUFXLEVBQUUsWUFBWSxFQUFFO1lBQzdCLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxLQUFLLENBQ2xDLGdDQUFnQyxFQUNoQyxXQUFXLENBQUMsWUFBWSxFQUN4QixhQUFhLENBQ2QsQ0FBQztTQUNIO1FBRUQsSUFBSSw4QkFBOEIsRUFBRTtZQUNsQyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsaUJBQWlCLENBQzNDLGFBQWEsRUFDYixVQUFVLEVBQ1YsV0FBVyxFQUNYLFlBQVksQ0FDYixDQUFDO1NBQ0g7UUFFRCxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxzQkFBc0IsQ0FDbEQsYUFBYSxFQUNiLFVBQVUsRUFDVixXQUFXLEVBQ1gsWUFBWSxDQUNiLENBQUM7SUFDSixDQUFDOzhHQXRFVSxZQUFZO2tIQUFaLFlBQVksY0FEQyxNQUFNOztTQUNuQixZQUFZOzJGQUFaLFlBQVk7a0JBRHhCLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBBdXRoT3B0aW9ucyB9IGZyb20gJy4uL2F1dGgtb3B0aW9ucyc7XHJcbmltcG9ydCB7IE9wZW5JZENvbmZpZ3VyYXRpb24gfSBmcm9tICcuLi9jb25maWcvb3BlbmlkLWNvbmZpZ3VyYXRpb24nO1xyXG5pbXBvcnQgeyBTdG9yYWdlUGVyc2lzdGVuY2VTZXJ2aWNlIH0gZnJvbSAnLi4vc3RvcmFnZS9zdG9yYWdlLXBlcnNpc3RlbmNlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBMb2dpblJlc3BvbnNlIH0gZnJvbSAnLi9sb2dpbi1yZXNwb25zZSc7XHJcbmltcG9ydCB7IFBhckxvZ2luU2VydmljZSB9IGZyb20gJy4vcGFyL3Bhci1sb2dpbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUG9wVXBMb2dpblNlcnZpY2UgfSBmcm9tICcuL3BvcHVwL3BvcHVwLWxvZ2luLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBQb3B1cE9wdGlvbnMgfSBmcm9tICcuL3BvcHVwL3BvcHVwLW9wdGlvbnMnO1xyXG5pbXBvcnQgeyBQb3BVcFNlcnZpY2UgfSBmcm9tICcuL3BvcHVwL3BvcHVwLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTdGFuZGFyZExvZ2luU2VydmljZSB9IGZyb20gJy4vc3RhbmRhcmQvc3RhbmRhcmQtbG9naW4uc2VydmljZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxyXG5leHBvcnQgY2xhc3MgTG9naW5TZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGFyTG9naW5TZXJ2aWNlOiBQYXJMb2dpblNlcnZpY2UsXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBvcFVwTG9naW5TZXJ2aWNlOiBQb3BVcExvZ2luU2VydmljZSxcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgc3RhbmRhcmRMb2dpblNlcnZpY2U6IFN0YW5kYXJkTG9naW5TZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBzdG9yYWdlUGVyc2lzdGVuY2VTZXJ2aWNlOiBTdG9yYWdlUGVyc2lzdGVuY2VTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBwb3B1cFNlcnZpY2U6IFBvcFVwU2VydmljZVxyXG4gICkge31cclxuXHJcbiAgbG9naW4oY29uZmlndXJhdGlvbjogT3BlbklkQ29uZmlndXJhdGlvbiwgYXV0aE9wdGlvbnM/OiBBdXRoT3B0aW9ucyk6IHZvaWQge1xyXG4gICAgY29uc3QgeyB1c2VQdXNoZWRBdXRob3Jpc2F0aW9uUmVxdWVzdHMgfSA9IGNvbmZpZ3VyYXRpb247XHJcblxyXG4gICAgaWYgKGF1dGhPcHRpb25zPy5jdXN0b21QYXJhbXMpIHtcclxuICAgICAgdGhpcy5zdG9yYWdlUGVyc2lzdGVuY2VTZXJ2aWNlLndyaXRlKFxyXG4gICAgICAgICdzdG9yYWdlQ3VzdG9tUGFyYW1zQXV0aFJlcXVlc3QnLFxyXG4gICAgICAgIGF1dGhPcHRpb25zLmN1c3RvbVBhcmFtcyxcclxuICAgICAgICBjb25maWd1cmF0aW9uXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHVzZVB1c2hlZEF1dGhvcmlzYXRpb25SZXF1ZXN0cykge1xyXG4gICAgICByZXR1cm4gdGhpcy5wYXJMb2dpblNlcnZpY2UubG9naW5QYXIoY29uZmlndXJhdGlvbiwgYXV0aE9wdGlvbnMpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHRoaXMuc3RhbmRhcmRMb2dpblNlcnZpY2UubG9naW5TdGFuZGFyZChcclxuICAgICAgICBjb25maWd1cmF0aW9uLFxyXG4gICAgICAgIGF1dGhPcHRpb25zXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBsb2dpbldpdGhQb3BVcChcclxuICAgIGNvbmZpZ3VyYXRpb246IE9wZW5JZENvbmZpZ3VyYXRpb24sXHJcbiAgICBhbGxDb25maWdzOiBPcGVuSWRDb25maWd1cmF0aW9uW10sXHJcbiAgICBhdXRoT3B0aW9ucz86IEF1dGhPcHRpb25zLFxyXG4gICAgcG9wdXBPcHRpb25zPzogUG9wdXBPcHRpb25zXHJcbiAgKTogT2JzZXJ2YWJsZTxMb2dpblJlc3BvbnNlPiB7XHJcbiAgICBjb25zdCBpc0FscmVhZHlJblBvcFVwID1cclxuICAgICAgdGhpcy5wb3B1cFNlcnZpY2UuaXNDdXJyZW50bHlJblBvcHVwKGNvbmZpZ3VyYXRpb24pO1xyXG5cclxuICAgIGlmIChpc0FscmVhZHlJblBvcFVwKSB7XHJcbiAgICAgIHJldHVybiBvZih7XHJcbiAgICAgICAgZXJyb3JNZXNzYWdlOiAnVGhlcmUgaXMgYWxyZWFkeSBhIHBvcHVwIG9wZW4uJyxcclxuICAgICAgfSBhcyBMb2dpblJlc3BvbnNlKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB7IHVzZVB1c2hlZEF1dGhvcmlzYXRpb25SZXF1ZXN0cyB9ID0gY29uZmlndXJhdGlvbjtcclxuXHJcbiAgICBpZiAoYXV0aE9wdGlvbnM/LmN1c3RvbVBhcmFtcykge1xyXG4gICAgICB0aGlzLnN0b3JhZ2VQZXJzaXN0ZW5jZVNlcnZpY2Uud3JpdGUoXHJcbiAgICAgICAgJ3N0b3JhZ2VDdXN0b21QYXJhbXNBdXRoUmVxdWVzdCcsXHJcbiAgICAgICAgYXV0aE9wdGlvbnMuY3VzdG9tUGFyYW1zLFxyXG4gICAgICAgIGNvbmZpZ3VyYXRpb25cclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodXNlUHVzaGVkQXV0aG9yaXNhdGlvblJlcXVlc3RzKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnBhckxvZ2luU2VydmljZS5sb2dpbldpdGhQb3BVcFBhcihcclxuICAgICAgICBjb25maWd1cmF0aW9uLFxyXG4gICAgICAgIGFsbENvbmZpZ3MsXHJcbiAgICAgICAgYXV0aE9wdGlvbnMsXHJcbiAgICAgICAgcG9wdXBPcHRpb25zXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMucG9wVXBMb2dpblNlcnZpY2UubG9naW5XaXRoUG9wVXBTdGFuZGFyZChcclxuICAgICAgY29uZmlndXJhdGlvbixcclxuICAgICAgYWxsQ29uZmlncyxcclxuICAgICAgYXV0aE9wdGlvbnMsXHJcbiAgICAgIHBvcHVwT3B0aW9uc1xyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIl19