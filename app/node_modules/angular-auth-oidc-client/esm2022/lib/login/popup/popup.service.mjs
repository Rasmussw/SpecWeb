import { DOCUMENT } from '@angular/common';
import { Inject, Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../../logging/logger.service";
import * as i2 from "../../storage/storage-persistence.service";
class PopUpService {
    get result$() {
        return this.resultInternal$.asObservable();
    }
    get windowInternal() {
        return this.document.defaultView;
    }
    constructor(document, loggerService, storagePersistenceService) {
        this.document = document;
        this.loggerService = loggerService;
        this.storagePersistenceService = storagePersistenceService;
        this.STORAGE_IDENTIFIER = 'popupauth';
        this.resultInternal$ = new Subject();
    }
    isCurrentlyInPopup(config) {
        if (this.canAccessSessionStorage()) {
            const popup = this.storagePersistenceService.read(this.STORAGE_IDENTIFIER, config);
            return (!!this.windowInternal.opener &&
                this.windowInternal.opener !== this.windowInternal &&
                !!popup);
        }
        return false;
    }
    openPopUp(url, popupOptions, config) {
        const optionsToPass = this.getOptions(popupOptions);
        this.storagePersistenceService.write(this.STORAGE_IDENTIFIER, 'true', config);
        this.popUp = this.windowInternal.open(url, '_blank', optionsToPass);
        if (!this.popUp) {
            this.storagePersistenceService.remove(this.STORAGE_IDENTIFIER, config);
            this.loggerService.logError(config, 'Could not open popup');
            return;
        }
        this.loggerService.logDebug(config, 'Opened popup with url ' + url);
        const listener = (event) => {
            if (!event?.data || typeof event.data !== 'string') {
                this.cleanUp(listener, config);
                return;
            }
            this.loggerService.logDebug(config, 'Received message from popup with url ' + event.data);
            this.resultInternal$.next({ userClosed: false, receivedUrl: event.data });
            this.cleanUp(listener, config);
        };
        this.windowInternal.addEventListener('message', listener, false);
        this.handle = this.windowInternal.setInterval(() => {
            if (this.popUp?.closed) {
                this.resultInternal$.next({ userClosed: true });
                this.cleanUp(listener, config);
            }
        }, 200);
    }
    sendMessageToMainWindow(url) {
        if (this.windowInternal.opener) {
            const href = this.windowInternal.location.href;
            this.sendMessage(url, href);
        }
    }
    cleanUp(listener, config) {
        this.windowInternal.removeEventListener('message', listener, false);
        this.windowInternal.clearInterval(this.handle);
        if (this.popUp) {
            this.storagePersistenceService.remove(this.STORAGE_IDENTIFIER, config);
            this.popUp.close();
            this.popUp = null;
        }
    }
    sendMessage(url, href) {
        this.windowInternal.opener.postMessage(url, href);
    }
    getOptions(popupOptions) {
        const popupDefaultOptions = {
            width: 500,
            height: 500,
            left: 50,
            top: 50,
        };
        const options = {
            ...popupDefaultOptions,
            ...(popupOptions || {}),
        };
        const left = this.windowInternal.screenLeft +
            (this.windowInternal.outerWidth - options.width) / 2;
        const top = this.windowInternal.screenTop +
            (this.windowInternal.outerHeight - options.height) / 2;
        options.left = left;
        options.top = top;
        return Object.entries(options)
            .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)
            .join(',');
    }
    canAccessSessionStorage() {
        return (typeof navigator !== 'undefined' &&
            navigator.cookieEnabled &&
            typeof Storage !== 'undefined');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: PopUpService, deps: [{ token: DOCUMENT }, { token: i1.LoggerService }, { token: i2.StoragePersistenceService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: PopUpService, providedIn: 'root' }); }
}
export { PopUpService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: PopUpService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i1.LoggerService }, { type: i2.StoragePersistenceService }]; } });
//# sourceMappingURL=data:application/json;base64,