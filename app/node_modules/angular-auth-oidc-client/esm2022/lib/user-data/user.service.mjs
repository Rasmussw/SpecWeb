import { Injectable } from '@angular/core';
import { BehaviorSubject, of, throwError } from 'rxjs';
import { map, retry, switchMap } from 'rxjs/operators';
import { EventTypes } from '../public-events/event-types';
import * as i0 from "@angular/core";
import * as i1 from "../api/data.service";
import * as i2 from "../storage/storage-persistence.service";
import * as i3 from "../public-events/public-events.service";
import * as i4 from "../logging/logger.service";
import * as i5 from "../utils/tokenHelper/token-helper.service";
import * as i6 from "../utils/flowHelper/flow-helper.service";
const DEFAULT_USERRESULT = { userData: null, allUserData: [] };
class UserService {
    get userData$() {
        return this.userDataInternal$.asObservable();
    }
    constructor(oidcDataService, storagePersistenceService, eventService, loggerService, tokenHelperService, flowHelper) {
        this.oidcDataService = oidcDataService;
        this.storagePersistenceService = storagePersistenceService;
        this.eventService = eventService;
        this.loggerService = loggerService;
        this.tokenHelperService = tokenHelperService;
        this.flowHelper = flowHelper;
        this.userDataInternal$ = new BehaviorSubject(DEFAULT_USERRESULT);
    }
    getAndPersistUserDataInStore(currentConfiguration, allConfigs, isRenewProcess = false, idToken, decodedIdToken) {
        idToken =
            idToken ||
                this.storagePersistenceService.getIdToken(currentConfiguration);
        decodedIdToken =
            decodedIdToken ||
                this.tokenHelperService.getPayloadFromToken(idToken, false, currentConfiguration);
        const existingUserDataFromStorage = this.getUserDataFromStore(currentConfiguration);
        const haveUserData = !!existingUserDataFromStorage;
        const isCurrentFlowImplicitFlowWithAccessToken = this.flowHelper.isCurrentFlowImplicitFlowWithAccessToken(currentConfiguration);
        const isCurrentFlowCodeFlow = this.flowHelper.isCurrentFlowCodeFlow(currentConfiguration);
        const accessToken = this.storagePersistenceService.getAccessToken(currentConfiguration);
        if (!(isCurrentFlowImplicitFlowWithAccessToken || isCurrentFlowCodeFlow)) {
            this.loggerService.logDebug(currentConfiguration, `authCallback idToken flow with accessToken ${accessToken}`);
            this.setUserDataToStore(decodedIdToken, currentConfiguration, allConfigs);
            return of(decodedIdToken);
        }
        const { renewUserInfoAfterTokenRenew } = currentConfiguration;
        if (!isRenewProcess || renewUserInfoAfterTokenRenew || !haveUserData) {
            return this.getUserDataOidcFlowAndSave(decodedIdToken.sub, currentConfiguration, allConfigs).pipe(switchMap((userData) => {
                this.loggerService.logDebug(currentConfiguration, 'Received user data: ', userData);
                if (!!userData) {
                    this.loggerService.logDebug(currentConfiguration, 'accessToken: ', accessToken);
                    return of(userData);
                }
                else {
                    return throwError(() => new Error('Received no user data, request failed'));
                }
            }));
        }
        return of(existingUserDataFromStorage);
    }
    getUserDataFromStore(currentConfiguration) {
        return (this.storagePersistenceService.read('userData', currentConfiguration) ||
            null);
    }
    publishUserDataIfExists(currentConfiguration, allConfigs) {
        const userData = this.getUserDataFromStore(currentConfiguration);
        if (userData) {
            this.fireUserDataEvent(currentConfiguration, allConfigs, userData);
        }
    }
    setUserDataToStore(userData, currentConfiguration, allConfigs) {
        this.storagePersistenceService.write('userData', userData, currentConfiguration);
        this.fireUserDataEvent(currentConfiguration, allConfigs, userData);
    }
    resetUserDataInStore(currentConfiguration, allConfigs) {
        this.storagePersistenceService.remove('userData', currentConfiguration);
        this.fireUserDataEvent(currentConfiguration, allConfigs, null);
    }
    getUserDataOidcFlowAndSave(idTokenSub, currentConfiguration, allConfigs) {
        return this.getIdentityUserData(currentConfiguration).pipe(map((data) => {
            if (this.validateUserDataSubIdToken(currentConfiguration, idTokenSub, data?.sub)) {
                this.setUserDataToStore(data, currentConfiguration, allConfigs);
                return data;
            }
            else {
                // something went wrong, user data sub does not match that from id_token
                this.loggerService.logWarning(currentConfiguration, `User data sub does not match sub in id_token, resetting`);
                this.resetUserDataInStore(currentConfiguration, allConfigs);
                return null;
            }
        }));
    }
    getIdentityUserData(currentConfiguration) {
        const token = this.storagePersistenceService.getAccessToken(currentConfiguration);
        const authWellKnownEndPoints = this.storagePersistenceService.read('authWellKnownEndPoints', currentConfiguration);
        if (!authWellKnownEndPoints) {
            this.loggerService.logWarning(currentConfiguration, 'init check session: authWellKnownEndpoints is undefined');
            return throwError(() => new Error('authWellKnownEndpoints is undefined'));
        }
        const userInfoEndpoint = authWellKnownEndPoints.userInfoEndpoint;
        if (!userInfoEndpoint) {
            this.loggerService.logError(currentConfiguration, 'init check session: authWellKnownEndpoints.userinfo_endpoint is undefined; set auto_userinfo = false in config');
            return throwError(() => new Error('authWellKnownEndpoints.userinfo_endpoint is undefined'));
        }
        return this.oidcDataService
            .get(userInfoEndpoint, currentConfiguration, token)
            .pipe(retry(2));
    }
    validateUserDataSubIdToken(currentConfiguration, idTokenSub, userDataSub) {
        if (!idTokenSub) {
            return false;
        }
        if (!userDataSub) {
            return false;
        }
        if (idTokenSub.toString() !== userDataSub.toString()) {
            this.loggerService.logDebug(currentConfiguration, 'validateUserDataSubIdToken failed', idTokenSub, userDataSub);
            return false;
        }
        return true;
    }
    fireUserDataEvent(currentConfiguration, allConfigs, passedUserData) {
        const userData = this.composeSingleOrMultipleUserDataObject(currentConfiguration, allConfigs, passedUserData);
        this.userDataInternal$.next(userData);
        const { configId } = currentConfiguration;
        this.eventService.fireEvent(EventTypes.UserDataChanged, {
            configId,
            userData: passedUserData,
        });
    }
    composeSingleOrMultipleUserDataObject(currentConfiguration, allConfigs, passedUserData) {
        const hasManyConfigs = allConfigs.length > 1;
        if (!hasManyConfigs) {
            const { configId } = currentConfiguration;
            return this.composeSingleUserDataResult(configId, passedUserData);
        }
        const allUserData = allConfigs.map((config) => {
            const { configId } = currentConfiguration;
            if (this.currentConfigIsToUpdate(configId, config)) {
                return { configId: config.configId, userData: passedUserData };
            }
            const alreadySavedUserData = this.storagePersistenceService.read('userData', config) || null;
            return { configId: config.configId, userData: alreadySavedUserData };
        });
        return {
            userData: null,
            allUserData,
        };
    }
    composeSingleUserDataResult(configId, userData) {
        return {
            userData,
            allUserData: [{ configId, userData }],
        };
    }
    currentConfigIsToUpdate(configId, config) {
        return config.configId === configId;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: UserService, deps: [{ token: i1.DataService }, { token: i2.StoragePersistenceService }, { token: i3.PublicEventsService }, { token: i4.LoggerService }, { token: i5.TokenHelperService }, { token: i6.FlowHelper }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: UserService, providedIn: 'root' }); }
}
export { UserService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: UserService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.DataService }, { type: i2.StoragePersistenceService }, { type: i3.PublicEventsService }, { type: i4.LoggerService }, { type: i5.TokenHelperService }, { type: i6.FlowHelper }]; } });
//# sourceMappingURL=data:application/json;base64,