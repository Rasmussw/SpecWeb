import { Injectable } from '@angular/core';
import { concatMap, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./iframe/check-session.service";
import * as i2 from "./auth-state/check-auth.service";
import * as i3 from "./user-data/user.service";
import * as i4 from "./utils/tokenHelper/token-helper.service";
import * as i5 from "./config/config.service";
import * as i6 from "./auth-state/auth-state.service";
import * as i7 from "./flows/flows-data.service";
import * as i8 from "./callback/callback.service";
import * as i9 from "./logoff-revoke/logoff-revocation.service";
import * as i10 from "./login/login.service";
import * as i11 from "./callback/refresh-session.service";
import * as i12 from "./utils/url/url.service";
import * as i13 from "./config/auth-well-known/auth-well-known.service";
class OidcSecurityService {
    /**
     * Provides information about the user after they have logged in.
     *
     * @returns Returns an object containing either the user data directly (single config) or
     * the user data per config in case you are running with multiple configs
     */
    get userData$() {
        return this.userService.userData$;
    }
    /**
     * Emits each time an authorization event occurs.
     *
     * @returns Returns an object containing if you are authenticated or not.
     * Single Config: true if config is authenticated, false if not.
     * Multiple Configs: true is all configs are authenticated, false if only one of them is not
     *
     * The `allConfigsAuthenticated` property contains the auth information _per config_.
     */
    get isAuthenticated$() {
        return this.authStateService.authenticated$;
    }
    /**
     * Emits each time the server sends a CheckSession event and the value changed. This property will always return
     * true.
     */
    get checkSessionChanged$() {
        return this.checkSessionService.checkSessionChanged$;
    }
    /**
     * Emits on a Security Token Service callback. The observable will never contain a value.
     */
    get stsCallback$() {
        return this.callbackService.stsCallback$;
    }
    constructor(checkSessionService, checkAuthService, userService, tokenHelperService, configurationService, authStateService, flowsDataService, callbackService, logoffRevocationService, loginService, refreshSessionService, urlService, authWellKnownService) {
        this.checkSessionService = checkSessionService;
        this.checkAuthService = checkAuthService;
        this.userService = userService;
        this.tokenHelperService = tokenHelperService;
        this.configurationService = configurationService;
        this.authStateService = authStateService;
        this.flowsDataService = flowsDataService;
        this.callbackService = callbackService;
        this.logoffRevocationService = logoffRevocationService;
        this.loginService = loginService;
        this.refreshSessionService = refreshSessionService;
        this.urlService = urlService;
        this.authWellKnownService = authWellKnownService;
    }
    preloadAuthWellKnownDocument(configId) {
        return this.configurationService
            .getOpenIDConfiguration(configId)
            .pipe(concatMap((config) => this.authWellKnownService.queryAndStoreAuthWellKnownEndPoints(config)));
    }
    /**
     * Returns the currently active OpenID configurations.
     *
     * @returns an array of OpenIdConfigurations.
     */
    getConfigurations() {
        return this.configurationService.getAllConfigurations();
    }
    /**
     * Returns a single active OpenIdConfiguration.
     *
     * @param configId The configId to identify the config. If not passed, the first one is being returned
     */
    getConfiguration(configId) {
        return this.configurationService.getOpenIDConfiguration(configId);
    }
    /**
     * Returns the userData for a configuration
     *
     * @param configId The configId to identify the config. If not passed, the first one is being used
     */
    getUserData(configId) {
        return this.configurationService
            .getOpenIDConfiguration(configId)
            .pipe(map((config) => this.userService.getUserDataFromStore(config)));
    }
    /**
     * Starts the complete setup flow for one configuration. Calling will start the entire authentication flow, and the returned observable
     * will denote whether the user was successfully authenticated including the user data, the access token, the configId and
     * an error message in case an error happened
     *
     * @param url The URL to perform the authorization on the behalf of.
     * @param configId The configId to perform the authorization on the behalf of. If not passed, the first configs will be taken
     *
     * @returns An object `LoginResponse` containing all information about the login
     */
    checkAuth(url, configId) {
        return this.configurationService
            .getOpenIDConfigurations(configId)
            .pipe(concatMap(({ allConfigs, currentConfig }) => this.checkAuthService.checkAuth(currentConfig, allConfigs, url)));
    }
    /**
     * Starts the complete setup flow for multiple configurations.
     * Calling will start the entire authentication flow, and the returned observable
     * will denote whether the user was successfully authenticated including the user data, the access token, the configId and
     * an error message in case an error happened in an array for each config which was provided
     *
     * @param url The URL to perform the authorization on the behalf of.
     *
     * @returns An array of `LoginResponse` objects containing all information about the logins
     */
    checkAuthMultiple(url) {
        return this.configurationService
            .getOpenIDConfigurations()
            .pipe(concatMap(({ allConfigs }) => this.checkAuthService.checkAuthMultiple(allConfigs, url)));
    }
    /**
     * Provides information about the current authenticated state
     *
     * @param configId The configId to check the information for. If not passed, the first configs will be taken
     *
     * @returns A boolean whether the config is authenticated or not.
     */
    isAuthenticated(configId) {
        return this.configurationService
            .getOpenIDConfiguration(configId)
            .pipe(map((config) => this.authStateService.isAuthenticated(config)));
    }
    /**
     * Checks the server for an authenticated session using the iframe silent renew if not locally authenticated.
     */
    checkAuthIncludingServer(configId) {
        return this.configurationService
            .getOpenIDConfigurations(configId)
            .pipe(concatMap(({ allConfigs, currentConfig }) => this.checkAuthService.checkAuthIncludingServer(currentConfig, allConfigs)));
    }
    /**
     * Returns the access token for the login scenario.
     *
     * @param configId The configId to check the information for. If not passed, the first configs will be taken
     *
     * @returns A string with the access token.
     */
    getAccessToken(configId) {
        return this.configurationService
            .getOpenIDConfiguration(configId)
            .pipe(map((config) => this.authStateService.getAccessToken(config)));
    }
    /**
     * Returns the ID token for the sign-in.
     *
     * @param configId The configId to check the information for. If not passed, the first configs will be taken
     *
     * @returns A string with the id token.
     */
    getIdToken(configId) {
        return this.configurationService
            .getOpenIDConfiguration(configId)
            .pipe(map((config) => this.authStateService.getIdToken(config)));
    }
    /**
     * Returns the refresh token, if present, for the sign-in.
     *
     * @param configId The configId to check the information for. If not passed, the first configs will be taken
     *
     * @returns A string with the refresh token.
     */
    getRefreshToken(configId) {
        return this.configurationService
            .getOpenIDConfiguration(configId)
            .pipe(map((config) => this.authStateService.getRefreshToken(config)));
    }
    /**
     * Returns the authentication result, if present, for the sign-in.
     *
     * @param configId The configId to check the information for. If not passed, the first configs will be taken
     *
     * @returns A object with the authentication result
     */
    getAuthenticationResult(configId) {
        return this.configurationService
            .getOpenIDConfiguration(configId)
            .pipe(map((config) => this.authStateService.getAuthenticationResult(config)));
    }
    /**
     * Returns the payload from the ID token.
     *
     * @param encode Set to true if the payload is base64 encoded
     * @param configId The configId to check the information for. If not passed, the first configs will be taken
     *
     * @returns The payload from the id token.
     */
    getPayloadFromIdToken(encode = false, configId) {
        return this.configurationService.getOpenIDConfiguration(configId).pipe(map((config) => {
            const token = this.authStateService.getIdToken(config);
            return this.tokenHelperService.getPayloadFromToken(token, encode, config);
        }));
    }
    /**
     * Returns the payload from the access token.
     *
     * @param encode Set to true if the payload is base64 encoded
     * @param configId The configId to check the information for. If not passed, the first configs will be taken
     *
     * @returns The payload from the access token.
     */
    getPayloadFromAccessToken(encode = false, configId) {
        return this.configurationService.getOpenIDConfiguration(configId).pipe(map((config) => {
            const token = this.authStateService.getAccessToken(config);
            return this.tokenHelperService.getPayloadFromToken(token, encode, config);
        }));
    }
    /**
     * Sets a custom state for the authorize request.
     *
     * @param state The state to set.
     * @param configId The configId to check the information for. If not passed, the first configs will be taken
     */
    setState(state, configId) {
        return this.configurationService
            .getOpenIDConfiguration(configId)
            .pipe(map((config) => this.flowsDataService.setAuthStateControl(state, config)));
    }
    /**
     * Gets the state value used for the authorize request.
     *
     * @param configId The configId to check the information for. If not passed, the first configs will be taken
     *
     * @returns The state value used for the authorize request.
     */
    getState(configId) {
        return this.configurationService
            .getOpenIDConfiguration(configId)
            .pipe(map((config) => this.flowsDataService.getAuthStateControl(config)));
    }
    /**
     * Redirects the user to the Security Token Service to begin the authentication process.
     *
     * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken
     * @param authOptions The custom options for the the authentication request.
     */
    authorize(configId, authOptions) {
        this.configurationService
            .getOpenIDConfiguration(configId)
            .subscribe((config) => this.loginService.login(config, authOptions));
    }
    /**
     * Opens the Security Token Service in a new window to begin the authentication process.
     *
     * @param authOptions The custom options for the authentication request.
     * @param popupOptions The configuration for the popup window.
     * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken
     *
     * @returns An `Observable<LoginResponse>` containing all information about the login
     */
    authorizeWithPopUp(authOptions, popupOptions, configId) {
        return this.configurationService
            .getOpenIDConfigurations(configId)
            .pipe(concatMap(({ allConfigs, currentConfig }) => this.loginService.loginWithPopUp(currentConfig, allConfigs, authOptions, popupOptions)));
    }
    /**
     * Manually refreshes the session.
     *
     * @param customParams Custom parameters to pass to the refresh request.
     * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken
     *
     * @returns An `Observable<LoginResponse>` containing all information about the login
     */
    forceRefreshSession(customParams, configId) {
        return this.configurationService
            .getOpenIDConfigurations(configId)
            .pipe(concatMap(({ allConfigs, currentConfig }) => this.refreshSessionService.userForceRefreshSession(currentConfig, allConfigs, customParams)));
    }
    /**
     * Revokes the refresh token (if present) and the access token on the server and then performs the logoff operation.
     * The refresh token and and the access token are revoked on the server. If the refresh token does not exist
     * only the access token is revoked. Then the logout run.
     *
     * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken
     * @param logoutAuthOptions The custom options for the request.
     *
     * @returns An observable when the action is finished
     */
    logoffAndRevokeTokens(configId, logoutAuthOptions) {
        return this.configurationService
            .getOpenIDConfigurations(configId)
            .pipe(concatMap(({ allConfigs, currentConfig }) => this.logoffRevocationService.logoffAndRevokeTokens(currentConfig, allConfigs, logoutAuthOptions)));
    }
    /**
     * Logs out on the server and the local client. If the server state has changed, confirmed via check session,
     * then only a local logout is performed.
     *
     * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken
     * @param logoutAuthOptions with custom parameters and/or an custom url handler
     */
    logoff(configId, logoutAuthOptions) {
        return this.configurationService
            .getOpenIDConfigurations(configId)
            .pipe(concatMap(({ allConfigs, currentConfig }) => this.logoffRevocationService.logoff(currentConfig, allConfigs, logoutAuthOptions)));
    }
    /**
     * Logs the user out of the application without logging them out of the server.
     * Use this method if you have _one_ config enabled.
     *
     * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken
     */
    logoffLocal(configId) {
        this.configurationService
            .getOpenIDConfigurations(configId)
            .subscribe(({ allConfigs, currentConfig }) => this.logoffRevocationService.logoffLocal(currentConfig, allConfigs));
    }
    /**
     * Logs the user out of the application for all configs without logging them out of the server.
     * Use this method if you have _multiple_ configs enabled.
     */
    logoffLocalMultiple() {
        this.configurationService
            .getOpenIDConfigurations()
            .subscribe(({ allConfigs }) => this.logoffRevocationService.logoffLocalMultiple(allConfigs));
    }
    /**
     * Revokes an access token on the Security Token Service. This is only required in the code flow with refresh tokens. If no token is
     * provided, then the token from the storage is revoked. You can pass any token to revoke.
     * https://tools.ietf.org/html/rfc7009
     *
     * @param accessToken The access token to revoke.
     * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken
     *
     * @returns An observable when the action is finished
     */
    revokeAccessToken(accessToken, configId) {
        return this.configurationService
            .getOpenIDConfiguration(configId)
            .pipe(concatMap((config) => this.logoffRevocationService.revokeAccessToken(config, accessToken)));
    }
    /**
     * Revokes a refresh token on the Security Token Service. This is only required in the code flow with refresh tokens. If no token is
     * provided, then the token from the storage is revoked. You can pass any token to revoke.
     * https://tools.ietf.org/html/rfc7009
     *
     * @param refreshToken The access token to revoke.
     * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken
     *
     * @returns An observable when the action is finished
     */
    revokeRefreshToken(refreshToken, configId) {
        return this.configurationService
            .getOpenIDConfiguration(configId)
            .pipe(concatMap((config) => this.logoffRevocationService.revokeRefreshToken(config, refreshToken)));
    }
    /**
     * Creates the end session URL which can be used to implement an alternate server logout.
     *
     * @param customParams
     * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken
     *
     * @returns A string with the end session url or null
     */
    getEndSessionUrl(customParams, configId) {
        return this.configurationService
            .getOpenIDConfiguration(configId)
            .pipe(map((config) => this.urlService.getEndSessionUrl(config, customParams)));
    }
    /**
     * Creates the authorize URL based on your flow
     *
     * @param customParams
     * @param configId The configId to perform the action in behalf of. If not passed, the first configs will be taken
     *
     * @returns A string with the authorize URL or null
     */
    getAuthorizeUrl(customParams, configId) {
        return this.configurationService
            .getOpenIDConfiguration(configId)
            .pipe(concatMap((config) => this.urlService.getAuthorizeUrl(config, customParams ? { customParams } : undefined)));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: OidcSecurityService, deps: [{ token: i1.CheckSessionService }, { token: i2.CheckAuthService }, { token: i3.UserService }, { token: i4.TokenHelperService }, { token: i5.ConfigurationService }, { token: i6.AuthStateService }, { token: i7.FlowsDataService }, { token: i8.CallbackService }, { token: i9.LogoffRevocationService }, { token: i10.LoginService }, { token: i11.RefreshSessionService }, { token: i12.UrlService }, { token: i13.AuthWellKnownService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: OidcSecurityService, providedIn: 'root' }); }
}
export { OidcSecurityService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: OidcSecurityService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.CheckSessionService }, { type: i2.CheckAuthService }, { type: i3.UserService }, { type: i4.TokenHelperService }, { type: i5.ConfigurationService }, { type: i6.AuthStateService }, { type: i7.FlowsDataService }, { type: i8.CallbackService }, { type: i9.LogoffRevocationService }, { type: i10.LoginService }, { type: i11.RefreshSessionService }, { type: i12.UrlService }, { type: i13.AuthWellKnownService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2lkYy5zZWN1cml0eS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1hdXRoLW9pZGMtY2xpZW50L3NyYy9saWIvb2lkYy5zZWN1cml0eS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7O0FBc0JoRCxNQUNhLG1CQUFtQjtJQUM5Qjs7Ozs7T0FLRztJQUNILElBQUksU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUM7SUFDcEMsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0gsSUFBSSxnQkFBZ0I7UUFDbEIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDO0lBQzlDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJLG9CQUFvQjtRQUN0QixPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxvQkFBb0IsQ0FBQztJQUN2RCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJLFlBQVk7UUFDZCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDO0lBQzNDLENBQUM7SUFFRCxZQUNtQixtQkFBd0MsRUFDeEMsZ0JBQWtDLEVBQ2xDLFdBQXdCLEVBQ3hCLGtCQUFzQyxFQUN0QyxvQkFBMEMsRUFDMUMsZ0JBQWtDLEVBQ2xDLGdCQUFrQyxFQUNsQyxlQUFnQyxFQUNoQyx1QkFBZ0QsRUFDaEQsWUFBMEIsRUFDMUIscUJBQTRDLEVBQzVDLFVBQXNCLEVBQ3RCLG9CQUEwQztRQVoxQyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBQ3hDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFD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QUNiLFlBQXlELEVBQ3pELFFBQWlCO1FBRWpCLE9BQU8sSUFBSSxDQUFDLG9CQUFvQjthQUM3QixzQkFBc0IsQ0FBQyxRQUFRLENBQUM7YUFDaEMsSUFBSSxDQUNILFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQ25CLElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUM3QixNQUFNLEVBQ04sWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQzVDLENBQ0YsQ0FDRixDQUFDO0lBQ04sQ0FBQzs4R0F0Z0JVLG1CQUFtQjtrSEFBbkIsbUJBQW1CLGNBRE4sTUFBTTs7U0FDbkIsbUJBQW1COzJGQUFuQixtQkFBbUI7a0JBRC9CLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGNvbmNhdE1hcCwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBBdXRoT3B0aW9ucywgTG9nb3V0QXV0aE9wdGlvbnMgfSBmcm9tICcuL2F1dGgtb3B0aW9ucyc7XHJcbmltcG9ydCB7IEF1dGhlbnRpY2F0ZWRSZXN1bHQgfSBmcm9tICcuL2F1dGgtc3RhdGUvYXV0aC1yZXN1bHQnO1xyXG5pbXBvcnQgeyBBdXRoU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi9hdXRoLXN0YXRlL2F1dGgtc3RhdGUuc2VydmljZSc7XHJcbmltcG9ydCB7IENoZWNrQXV0aFNlcnZpY2UgfSBmcm9tICcuL2F1dGgtc3RhdGUvY2hlY2stYXV0aC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ2FsbGJhY2tTZXJ2aWNlIH0gZnJvbSAnLi9jYWxsYmFjay9jYWxsYmFjay5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUmVmcmVzaFNlc3Npb25TZXJ2aWNlIH0gZnJvbSAnLi9jYWxsYmFjay9yZWZyZXNoLXNlc3Npb24uc2VydmljZSc7XHJcbmltcG9ydCB7IEF1dGhXZWxsS25vd25FbmRwb2ludHMgfSBmcm9tICcuL2NvbmZpZy9hdXRoLXdlbGwta25vd24vYXV0aC13ZWxsLWtub3duLWVuZHBvaW50cyc7XHJcbmltcG9ydCB7IEF1dGhXZWxsS25vd25TZXJ2aWNlIH0gZnJvbSAnLi9jb25maWcvYXV0aC13ZWxsLWtub3duL2F1dGgtd2VsbC1rbm93bi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ29uZmlndXJhdGlvblNlcnZpY2UgfSBmcm9tICcuL2NvbmZpZy9jb25maWcuc2VydmljZSc7XHJcbmltcG9ydCB7IE9wZW5JZENvbmZpZ3VyYXRpb24gfSBmcm9tICcuL2NvbmZpZy9vcGVuaWQtY29uZmlndXJhdGlvbic7XHJcbmltcG9ydCB7IEZsb3dzRGF0YVNlcnZpY2UgfSBmcm9tICcuL2Zsb3dzL2Zsb3dzLWRhdGEuc2VydmljZSc7XHJcbmltcG9ydCB7IENoZWNrU2Vzc2lvblNlcnZpY2UgfSBmcm9tICcuL2lmcmFtZS9jaGVjay1zZXNzaW9uLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBMb2dpblJlc3BvbnNlIH0gZnJvbSAnLi9sb2dpbi9sb2dpbi1yZXNwb25zZSc7XHJcbmltcG9ydCB7IExvZ2luU2VydmljZSB9IGZyb20gJy4vbG9naW4vbG9naW4uc2VydmljZSc7XHJcbmltcG9ydCB7IFBvcHVwT3B0aW9ucyB9IGZyb20gJy4vbG9naW4vcG9wdXAvcG9wdXAtb3B0aW9ucyc7XHJcbmltcG9ydCB7IExvZ29mZlJldm9jYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9sb2dvZmYtcmV2b2tlL2xvZ29mZi1yZXZvY2F0aW9uLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBVc2VyU2VydmljZSB9IGZyb20gJy4vdXNlci1kYXRhL3VzZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IFVzZXJEYXRhUmVzdWx0IH0gZnJvbSAnLi91c2VyLWRhdGEvdXNlcmRhdGEtcmVzdWx0JztcclxuaW1wb3J0IHsgVG9rZW5IZWxwZXJTZXJ2aWNlIH0gZnJvbSAnLi91dGlscy90b2tlbkhlbHBlci90b2tlbi1oZWxwZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IFVybFNlcnZpY2UgfSBmcm9tICcuL3V0aWxzL3VybC91cmwuc2VydmljZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxyXG5leHBvcnQgY2xhc3MgT2lkY1NlY3VyaXR5U2VydmljZSB7XHJcbiAgLyoqXHJcbiAgICogUHJvdmlkZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHVzZXIgYWZ0ZXIgdGhleSBoYXZlIGxvZ2dlZCBpbi5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIFJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgZWl0aGVyIHRoZSB1c2VyIGRhdGEgZGlyZWN0bHkgKHNpbmdsZSBjb25maWcpIG9yXHJcbiAgICogdGhlIHVzZXIgZGF0YSBwZXIgY29uZmlnIGluIGNhc2UgeW91IGFyZSBydW5uaW5nIHdpdGggbXVsdGlwbGUgY29uZmlnc1xyXG4gICAqL1xyXG4gIGdldCB1c2VyRGF0YSQoKTogT2JzZXJ2YWJsZTxVc2VyRGF0YVJlc3VsdD4ge1xyXG4gICAgcmV0dXJuIHRoaXMudXNlclNlcnZpY2UudXNlckRhdGEkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRW1pdHMgZWFjaCB0aW1lIGFuIGF1dGhvcml6YXRpb24gZXZlbnQgb2NjdXJzLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMgUmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyBpZiB5b3UgYXJlIGF1dGhlbnRpY2F0ZWQgb3Igbm90LlxyXG4gICAqIFNpbmdsZSBDb25maWc6IHRydWUgaWYgY29uZmlnIGlzIGF1dGhlbnRpY2F0ZWQsIGZhbHNlIGlmIG5vdC5cclxuICAgKiBNdWx0aXBsZSBDb25maWdzOiB0cnVlIGlzIGFsbCBjb25maWdzIGFyZSBhdXRoZW50aWNhdGVkLCBmYWxzZSBpZiBvbmx5IG9uZSBvZiB0aGVtIGlzIG5vdFxyXG4gICAqXHJcbiAgICogVGhlIGBhbGxDb25maWdzQXV0aGVudGljYXRlZGAgcHJvcGVydHkgY29udGFpbnMgdGhlIGF1dGggaW5mb3JtYXRpb24gX3BlciBjb25maWdfLlxyXG4gICAqL1xyXG4gIGdldCBpc0F1dGhlbnRpY2F0ZWQkKCk6IE9ic2VydmFibGU8QXV0aGVudGljYXRlZFJlc3VsdD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuYXV0aFN0YXRlU2VydmljZS5hdXRoZW50aWNhdGVkJDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEVtaXRzIGVhY2ggdGltZSB0aGUgc2VydmVyIHNlbmRzIGEgQ2hlY2tTZXNzaW9uIGV2ZW50IGFuZCB0aGUgdmFsdWUgY2hhbmdlZC4gVGhpcyBwcm9wZXJ0eSB3aWxsIGFsd2F5cyByZXR1cm5cclxuICAgKiB0cnVlLlxyXG4gICAqL1xyXG4gIGdldCBjaGVja1Nlc3Npb25DaGFuZ2VkJCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybiB0aGlzLmNoZWNrU2Vzc2lvblNlcnZpY2UuY2hlY2tTZXNzaW9uQ2hhbmdlZCQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFbWl0cyBvbiBhIFNlY3VyaXR5IFRva2VuIFNlcnZpY2UgY2FsbGJhY2suIFRoZSBvYnNlcnZhYmxlIHdpbGwgbmV2ZXIgY29udGFpbiBhIHZhbHVlLlxyXG4gICAqL1xyXG4gIGdldCBzdHNDYWxsYmFjayQoKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLmNhbGxiYWNrU2VydmljZS5zdHNDYWxsYmFjayQ7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2hlY2tTZXNzaW9uU2VydmljZTogQ2hlY2tTZXNzaW9uU2VydmljZSxcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2hlY2tBdXRoU2VydmljZTogQ2hlY2tBdXRoU2VydmljZSxcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgdXNlclNlcnZpY2U6IFVzZXJTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSB0b2tlbkhlbHBlclNlcnZpY2U6IFRva2VuSGVscGVyU2VydmljZSxcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgY29uZmlndXJhdGlvblNlcnZpY2U6IENvbmZpZ3VyYXRpb25TZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBhdXRoU3RhdGVTZXJ2aWNlOiBBdXRoU3RhdGVTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBmbG93c0RhdGFTZXJ2aWNlOiBGbG93c0RhdGFTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBjYWxsYmFja1NlcnZpY2U6IENhbGxiYWNrU2VydmljZSxcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgbG9nb2ZmUmV2b2NhdGlvblNlcnZpY2U6IExvZ29mZlJldm9jYXRpb25TZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBsb2dpblNlcnZpY2U6IExvZ2luU2VydmljZSxcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgcmVmcmVzaFNlc3Npb25TZXJ2aWNlOiBSZWZyZXNoU2Vzc2lvblNlcnZpY2UsXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHVybFNlcnZpY2U6IFVybFNlcnZpY2UsXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGF1dGhXZWxsS25vd25TZXJ2aWNlOiBBdXRoV2VsbEtub3duU2VydmljZVxyXG4gICkge31cclxuXHJcbiAgcHJlbG9hZEF1dGhXZWxsS25vd25Eb2N1bWVudChcclxuICAgIGNvbmZpZ0lkPzogc3RyaW5nXHJcbiAgKTogT2JzZXJ2YWJsZTxBdXRoV2VsbEtub3duRW5kcG9pbnRzPiB7XHJcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmF0aW9uU2VydmljZVxyXG4gICAgICAuZ2V0T3BlbklEQ29uZmlndXJhdGlvbihjb25maWdJZClcclxuICAgICAgLnBpcGUoXHJcbiAgICAgICAgY29uY2F0TWFwKChjb25maWcpID0+XHJcbiAgICAgICAgICB0aGlzLmF1dGhXZWxsS25vd25TZXJ2aWNlLnF1ZXJ5QW5kU3RvcmVBdXRoV2VsbEtub3duRW5kUG9pbnRzKGNvbmZpZylcclxuICAgICAgICApXHJcbiAgICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50bHkgYWN0aXZlIE9wZW5JRCBjb25maWd1cmF0aW9ucy5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIGFuIGFycmF5IG9mIE9wZW5JZENvbmZpZ3VyYXRpb25zLlxyXG4gICAqL1xyXG4gIGdldENvbmZpZ3VyYXRpb25zKCk6IE9wZW5JZENvbmZpZ3VyYXRpb25bXSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmF0aW9uU2VydmljZS5nZXRBbGxDb25maWd1cmF0aW9ucygpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyBhIHNpbmdsZSBhY3RpdmUgT3BlbklkQ29uZmlndXJhdGlvbi5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBjb25maWdJZCBUaGUgY29uZmlnSWQgdG8gaWRlbnRpZnkgdGhlIGNvbmZpZy4gSWYgbm90IHBhc3NlZCwgdGhlIGZpcnN0IG9uZSBpcyBiZWluZyByZXR1cm5lZFxyXG4gICAqL1xyXG4gIGdldENvbmZpZ3VyYXRpb24oY29uZmlnSWQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPE9wZW5JZENvbmZpZ3VyYXRpb24+IHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyYXRpb25TZXJ2aWNlLmdldE9wZW5JRENvbmZpZ3VyYXRpb24oY29uZmlnSWQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgdXNlckRhdGEgZm9yIGEgY29uZmlndXJhdGlvblxyXG4gICAqXHJcbiAgICogQHBhcmFtIGNvbmZpZ0lkIFRoZSBjb25maWdJZCB0byBpZGVudGlmeSB0aGUgY29uZmlnLiBJZiBub3QgcGFzc2VkLCB0aGUgZmlyc3Qgb25lIGlzIGJlaW5nIHVzZWRcclxuICAgKi9cclxuICBnZXRVc2VyRGF0YShjb25maWdJZD86IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmF0aW9uU2VydmljZVxyXG4gICAgICAuZ2V0T3BlbklEQ29uZmlndXJhdGlvbihjb25maWdJZClcclxuICAgICAgLnBpcGUobWFwKChjb25maWcpID0+IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlckRhdGFGcm9tU3RvcmUoY29uZmlnKSkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RhcnRzIHRoZSBjb21wbGV0ZSBzZXR1cCBmbG93IGZvciBvbmUgY29uZmlndXJhdGlvbi4gQ2FsbGluZyB3aWxsIHN0YXJ0IHRoZSBlbnRpcmUgYXV0aGVudGljYXRpb24gZmxvdywgYW5kIHRoZSByZXR1cm5lZCBvYnNlcnZhYmxlXHJcbiAgICogd2lsbCBkZW5vdGUgd2hldGhlciB0aGUgdXNlciB3YXMgc3VjY2Vzc2Z1bGx5IGF1dGhlbnRpY2F0ZWQgaW5jbHVkaW5nIHRoZSB1c2VyIGRhdGEsIHRoZSBhY2Nlc3MgdG9rZW4sIHRoZSBjb25maWdJZCBhbmRcclxuICAgKiBhbiBlcnJvciBtZXNzYWdlIGluIGNhc2UgYW4gZXJyb3IgaGFwcGVuZWRcclxuICAgKlxyXG4gICAqIEBwYXJhbSB1cmwgVGhlIFVSTCB0byBwZXJmb3JtIHRoZSBhdXRob3JpemF0aW9uIG9uIHRoZSBiZWhhbGYgb2YuXHJcbiAgICogQHBhcmFtIGNvbmZpZ0lkIFRoZSBjb25maWdJZCB0byBwZXJmb3JtIHRoZSBhdXRob3JpemF0aW9uIG9uIHRoZSBiZWhhbGYgb2YuIElmIG5vdCBwYXNzZWQsIHRoZSBmaXJzdCBjb25maWdzIHdpbGwgYmUgdGFrZW5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIEFuIG9iamVjdCBgTG9naW5SZXNwb25zZWAgY29udGFpbmluZyBhbGwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGxvZ2luXHJcbiAgICovXHJcbiAgY2hlY2tBdXRoKHVybD86IHN0cmluZywgY29uZmlnSWQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPExvZ2luUmVzcG9uc2U+IHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyYXRpb25TZXJ2aWNlXHJcbiAgICAgIC5nZXRPcGVuSURDb25maWd1cmF0aW9ucyhjb25maWdJZClcclxuICAgICAgLnBpcGUoXHJcbiAgICAgICAgY29uY2F0TWFwKCh7IGFsbENvbmZpZ3MsIGN1cnJlbnRDb25maWcgfSkgPT5cclxuICAgICAgICAgIHRoaXMuY2hlY2tBdXRoU2VydmljZS5jaGVja0F1dGgoY3VycmVudENvbmZpZywgYWxsQ29uZmlncywgdXJsKVxyXG4gICAgICAgIClcclxuICAgICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0YXJ0cyB0aGUgY29tcGxldGUgc2V0dXAgZmxvdyBmb3IgbXVsdGlwbGUgY29uZmlndXJhdGlvbnMuXHJcbiAgICogQ2FsbGluZyB3aWxsIHN0YXJ0IHRoZSBlbnRpcmUgYXV0aGVudGljYXRpb24gZmxvdywgYW5kIHRoZSByZXR1cm5lZCBvYnNlcnZhYmxlXHJcbiAgICogd2lsbCBkZW5vdGUgd2hldGhlciB0aGUgdXNlciB3YXMgc3VjY2Vzc2Z1bGx5IGF1dGhlbnRpY2F0ZWQgaW5jbHVkaW5nIHRoZSB1c2VyIGRhdGEsIHRoZSBhY2Nlc3MgdG9rZW4sIHRoZSBjb25maWdJZCBhbmRcclxuICAgKiBhbiBlcnJvciBtZXNzYWdlIGluIGNhc2UgYW4gZXJyb3IgaGFwcGVuZWQgaW4gYW4gYXJyYXkgZm9yIGVhY2ggY29uZmlnIHdoaWNoIHdhcyBwcm92aWRlZFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHVybCBUaGUgVVJMIHRvIHBlcmZvcm0gdGhlIGF1dGhvcml6YXRpb24gb24gdGhlIGJlaGFsZiBvZi5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIGBMb2dpblJlc3BvbnNlYCBvYmplY3RzIGNvbnRhaW5pbmcgYWxsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBsb2dpbnNcclxuICAgKi9cclxuICBjaGVja0F1dGhNdWx0aXBsZSh1cmw/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPExvZ2luUmVzcG9uc2VbXT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlndXJhdGlvblNlcnZpY2VcclxuICAgICAgLmdldE9wZW5JRENvbmZpZ3VyYXRpb25zKClcclxuICAgICAgLnBpcGUoXHJcbiAgICAgICAgY29uY2F0TWFwKCh7IGFsbENvbmZpZ3MgfSkgPT5cclxuICAgICAgICAgIHRoaXMuY2hlY2tBdXRoU2VydmljZS5jaGVja0F1dGhNdWx0aXBsZShhbGxDb25maWdzLCB1cmwpXHJcbiAgICAgICAgKVxyXG4gICAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUHJvdmlkZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1cnJlbnQgYXV0aGVudGljYXRlZCBzdGF0ZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIGNvbmZpZ0lkIFRoZSBjb25maWdJZCB0byBjaGVjayB0aGUgaW5mb3JtYXRpb24gZm9yLiBJZiBub3QgcGFzc2VkLCB0aGUgZmlyc3QgY29uZmlncyB3aWxsIGJlIHRha2VuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyBBIGJvb2xlYW4gd2hldGhlciB0aGUgY29uZmlnIGlzIGF1dGhlbnRpY2F0ZWQgb3Igbm90LlxyXG4gICAqL1xyXG4gIGlzQXV0aGVudGljYXRlZChjb25maWdJZD86IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlndXJhdGlvblNlcnZpY2VcclxuICAgICAgLmdldE9wZW5JRENvbmZpZ3VyYXRpb24oY29uZmlnSWQpXHJcbiAgICAgIC5waXBlKG1hcCgoY29uZmlnKSA9PiB0aGlzLmF1dGhTdGF0ZVNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKGNvbmZpZykpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENoZWNrcyB0aGUgc2VydmVyIGZvciBhbiBhdXRoZW50aWNhdGVkIHNlc3Npb24gdXNpbmcgdGhlIGlmcmFtZSBzaWxlbnQgcmVuZXcgaWYgbm90IGxvY2FsbHkgYXV0aGVudGljYXRlZC5cclxuICAgKi9cclxuICBjaGVja0F1dGhJbmNsdWRpbmdTZXJ2ZXIoY29uZmlnSWQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPExvZ2luUmVzcG9uc2U+IHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyYXRpb25TZXJ2aWNlXHJcbiAgICAgIC5nZXRPcGVuSURDb25maWd1cmF0aW9ucyhjb25maWdJZClcclxuICAgICAgLnBpcGUoXHJcbiAgICAgICAgY29uY2F0TWFwKCh7IGFsbENvbmZpZ3MsIGN1cnJlbnRDb25maWcgfSkgPT5cclxuICAgICAgICAgIHRoaXMuY2hlY2tBdXRoU2VydmljZS5jaGVja0F1dGhJbmNsdWRpbmdTZXJ2ZXIoXHJcbiAgICAgICAgICAgIGN1cnJlbnRDb25maWcsXHJcbiAgICAgICAgICAgIGFsbENvbmZpZ3NcclxuICAgICAgICAgIClcclxuICAgICAgICApXHJcbiAgICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRoZSBhY2Nlc3MgdG9rZW4gZm9yIHRoZSBsb2dpbiBzY2VuYXJpby5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBjb25maWdJZCBUaGUgY29uZmlnSWQgdG8gY2hlY2sgdGhlIGluZm9ybWF0aW9uIGZvci4gSWYgbm90IHBhc3NlZCwgdGhlIGZpcnN0IGNvbmZpZ3Mgd2lsbCBiZSB0YWtlblxyXG4gICAqXHJcbiAgICogQHJldHVybnMgQSBzdHJpbmcgd2l0aCB0aGUgYWNjZXNzIHRva2VuLlxyXG4gICAqL1xyXG4gIGdldEFjY2Vzc1Rva2VuKGNvbmZpZ0lkPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyYXRpb25TZXJ2aWNlXHJcbiAgICAgIC5nZXRPcGVuSURDb25maWd1cmF0aW9uKGNvbmZpZ0lkKVxyXG4gICAgICAucGlwZShtYXAoKGNvbmZpZykgPT4gdGhpcy5hdXRoU3RhdGVTZXJ2aWNlLmdldEFjY2Vzc1Rva2VuKGNvbmZpZykpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIElEIHRva2VuIGZvciB0aGUgc2lnbi1pbi5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBjb25maWdJZCBUaGUgY29uZmlnSWQgdG8gY2hlY2sgdGhlIGluZm9ybWF0aW9uIGZvci4gSWYgbm90IHBhc3NlZCwgdGhlIGZpcnN0IGNvbmZpZ3Mgd2lsbCBiZSB0YWtlblxyXG4gICAqXHJcbiAgICogQHJldHVybnMgQSBzdHJpbmcgd2l0aCB0aGUgaWQgdG9rZW4uXHJcbiAgICovXHJcbiAgZ2V0SWRUb2tlbihjb25maWdJZD86IHN0cmluZyk6IE9ic2VydmFibGU8c3RyaW5nPiB7XHJcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmF0aW9uU2VydmljZVxyXG4gICAgICAuZ2V0T3BlbklEQ29uZmlndXJhdGlvbihjb25maWdJZClcclxuICAgICAgLnBpcGUobWFwKChjb25maWcpID0+IHRoaXMuYXV0aFN0YXRlU2VydmljZS5nZXRJZFRva2VuKGNvbmZpZykpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIHJlZnJlc2ggdG9rZW4sIGlmIHByZXNlbnQsIGZvciB0aGUgc2lnbi1pbi5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBjb25maWdJZCBUaGUgY29uZmlnSWQgdG8gY2hlY2sgdGhlIGluZm9ybWF0aW9uIGZvci4gSWYgbm90IHBhc3NlZCwgdGhlIGZpcnN0IGNvbmZpZ3Mgd2lsbCBiZSB0YWtlblxyXG4gICAqXHJcbiAgICogQHJldHVybnMgQSBzdHJpbmcgd2l0aCB0aGUgcmVmcmVzaCB0b2tlbi5cclxuICAgKi9cclxuICBnZXRSZWZyZXNoVG9rZW4oY29uZmlnSWQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlndXJhdGlvblNlcnZpY2VcclxuICAgICAgLmdldE9wZW5JRENvbmZpZ3VyYXRpb24oY29uZmlnSWQpXHJcbiAgICAgIC5waXBlKG1hcCgoY29uZmlnKSA9PiB0aGlzLmF1dGhTdGF0ZVNlcnZpY2UuZ2V0UmVmcmVzaFRva2VuKGNvbmZpZykpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIGF1dGhlbnRpY2F0aW9uIHJlc3VsdCwgaWYgcHJlc2VudCwgZm9yIHRoZSBzaWduLWluLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGNvbmZpZ0lkIFRoZSBjb25maWdJZCB0byBjaGVjayB0aGUgaW5mb3JtYXRpb24gZm9yLiBJZiBub3QgcGFzc2VkLCB0aGUgZmlyc3QgY29uZmlncyB3aWxsIGJlIHRha2VuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyBBIG9iamVjdCB3aXRoIHRoZSBhdXRoZW50aWNhdGlvbiByZXN1bHRcclxuICAgKi9cclxuICBnZXRBdXRoZW50aWNhdGlvblJlc3VsdChjb25maWdJZD86IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmF0aW9uU2VydmljZVxyXG4gICAgICAuZ2V0T3BlbklEQ29uZmlndXJhdGlvbihjb25maWdJZClcclxuICAgICAgLnBpcGUoXHJcbiAgICAgICAgbWFwKChjb25maWcpID0+IHRoaXMuYXV0aFN0YXRlU2VydmljZS5nZXRBdXRoZW50aWNhdGlvblJlc3VsdChjb25maWcpKVxyXG4gICAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgcGF5bG9hZCBmcm9tIHRoZSBJRCB0b2tlbi5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBlbmNvZGUgU2V0IHRvIHRydWUgaWYgdGhlIHBheWxvYWQgaXMgYmFzZTY0IGVuY29kZWRcclxuICAgKiBAcGFyYW0gY29uZmlnSWQgVGhlIGNvbmZpZ0lkIHRvIGNoZWNrIHRoZSBpbmZvcm1hdGlvbiBmb3IuIElmIG5vdCBwYXNzZWQsIHRoZSBmaXJzdCBjb25maWdzIHdpbGwgYmUgdGFrZW5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIFRoZSBwYXlsb2FkIGZyb20gdGhlIGlkIHRva2VuLlxyXG4gICAqL1xyXG4gIGdldFBheWxvYWRGcm9tSWRUb2tlbihlbmNvZGUgPSBmYWxzZSwgY29uZmlnSWQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlndXJhdGlvblNlcnZpY2UuZ2V0T3BlbklEQ29uZmlndXJhdGlvbihjb25maWdJZCkucGlwZShcclxuICAgICAgbWFwKChjb25maWcpID0+IHtcclxuICAgICAgICBjb25zdCB0b2tlbiA9IHRoaXMuYXV0aFN0YXRlU2VydmljZS5nZXRJZFRva2VuKGNvbmZpZyk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnRva2VuSGVscGVyU2VydmljZS5nZXRQYXlsb2FkRnJvbVRva2VuKFxyXG4gICAgICAgICAgdG9rZW4sXHJcbiAgICAgICAgICBlbmNvZGUsXHJcbiAgICAgICAgICBjb25maWdcclxuICAgICAgICApO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIHBheWxvYWQgZnJvbSB0aGUgYWNjZXNzIHRva2VuLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGVuY29kZSBTZXQgdG8gdHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBiYXNlNjQgZW5jb2RlZFxyXG4gICAqIEBwYXJhbSBjb25maWdJZCBUaGUgY29uZmlnSWQgdG8gY2hlY2sgdGhlIGluZm9ybWF0aW9uIGZvci4gSWYgbm90IHBhc3NlZCwgdGhlIGZpcnN0IGNvbmZpZ3Mgd2lsbCBiZSB0YWtlblxyXG4gICAqXHJcbiAgICogQHJldHVybnMgVGhlIHBheWxvYWQgZnJvbSB0aGUgYWNjZXNzIHRva2VuLlxyXG4gICAqL1xyXG4gIGdldFBheWxvYWRGcm9tQWNjZXNzVG9rZW4oXHJcbiAgICBlbmNvZGUgPSBmYWxzZSxcclxuICAgIGNvbmZpZ0lkPzogc3RyaW5nXHJcbiAgKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyYXRpb25TZXJ2aWNlLmdldE9wZW5JRENvbmZpZ3VyYXRpb24oY29uZmlnSWQpLnBpcGUoXHJcbiAgICAgIG1hcCgoY29uZmlnKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdG9rZW4gPSB0aGlzLmF1dGhTdGF0ZVNlcnZpY2UuZ2V0QWNjZXNzVG9rZW4oY29uZmlnKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMudG9rZW5IZWxwZXJTZXJ2aWNlLmdldFBheWxvYWRGcm9tVG9rZW4oXHJcbiAgICAgICAgICB0b2tlbixcclxuICAgICAgICAgIGVuY29kZSxcclxuICAgICAgICAgIGNvbmZpZ1xyXG4gICAgICAgICk7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0cyBhIGN1c3RvbSBzdGF0ZSBmb3IgdGhlIGF1dGhvcml6ZSByZXF1ZXN0LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHN0YXRlIFRoZSBzdGF0ZSB0byBzZXQuXHJcbiAgICogQHBhcmFtIGNvbmZpZ0lkIFRoZSBjb25maWdJZCB0byBjaGVjayB0aGUgaW5mb3JtYXRpb24gZm9yLiBJZiBub3QgcGFzc2VkLCB0aGUgZmlyc3QgY29uZmlncyB3aWxsIGJlIHRha2VuXHJcbiAgICovXHJcbiAgc2V0U3RhdGUoc3RhdGU6IHN0cmluZywgY29uZmlnSWQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyYXRpb25TZXJ2aWNlXHJcbiAgICAgIC5nZXRPcGVuSURDb25maWd1cmF0aW9uKGNvbmZpZ0lkKVxyXG4gICAgICAucGlwZShcclxuICAgICAgICBtYXAoKGNvbmZpZykgPT5cclxuICAgICAgICAgIHRoaXMuZmxvd3NEYXRhU2VydmljZS5zZXRBdXRoU3RhdGVDb250cm9sKHN0YXRlLCBjb25maWcpXHJcbiAgICAgICAgKVxyXG4gICAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyB0aGUgc3RhdGUgdmFsdWUgdXNlZCBmb3IgdGhlIGF1dGhvcml6ZSByZXF1ZXN0LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGNvbmZpZ0lkIFRoZSBjb25maWdJZCB0byBjaGVjayB0aGUgaW5mb3JtYXRpb24gZm9yLiBJZiBub3QgcGFzc2VkLCB0aGUgZmlyc3QgY29uZmlncyB3aWxsIGJlIHRha2VuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyBUaGUgc3RhdGUgdmFsdWUgdXNlZCBmb3IgdGhlIGF1dGhvcml6ZSByZXF1ZXN0LlxyXG4gICAqL1xyXG4gIGdldFN0YXRlKGNvbmZpZ0lkPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyYXRpb25TZXJ2aWNlXHJcbiAgICAgIC5nZXRPcGVuSURDb25maWd1cmF0aW9uKGNvbmZpZ0lkKVxyXG4gICAgICAucGlwZShtYXAoKGNvbmZpZykgPT4gdGhpcy5mbG93c0RhdGFTZXJ2aWNlLmdldEF1dGhTdGF0ZUNvbnRyb2woY29uZmlnKSkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVkaXJlY3RzIHRoZSB1c2VyIHRvIHRoZSBTZWN1cml0eSBUb2tlbiBTZXJ2aWNlIHRvIGJlZ2luIHRoZSBhdXRoZW50aWNhdGlvbiBwcm9jZXNzLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGNvbmZpZ0lkIFRoZSBjb25maWdJZCB0byBwZXJmb3JtIHRoZSBhY3Rpb24gaW4gYmVoYWxmIG9mLiBJZiBub3QgcGFzc2VkLCB0aGUgZmlyc3QgY29uZmlncyB3aWxsIGJlIHRha2VuXHJcbiAgICogQHBhcmFtIGF1dGhPcHRpb25zIFRoZSBjdXN0b20gb3B0aW9ucyBmb3IgdGhlIHRoZSBhdXRoZW50aWNhdGlvbiByZXF1ZXN0LlxyXG4gICAqL1xyXG4gIGF1dGhvcml6ZShjb25maWdJZD86IHN0cmluZywgYXV0aE9wdGlvbnM/OiBBdXRoT3B0aW9ucyk6IHZvaWQge1xyXG4gICAgdGhpcy5jb25maWd1cmF0aW9uU2VydmljZVxyXG4gICAgICAuZ2V0T3BlbklEQ29uZmlndXJhdGlvbihjb25maWdJZClcclxuICAgICAgLnN1YnNjcmliZSgoY29uZmlnKSA9PiB0aGlzLmxvZ2luU2VydmljZS5sb2dpbihjb25maWcsIGF1dGhPcHRpb25zKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPcGVucyB0aGUgU2VjdXJpdHkgVG9rZW4gU2VydmljZSBpbiBhIG5ldyB3aW5kb3cgdG8gYmVnaW4gdGhlIGF1dGhlbnRpY2F0aW9uIHByb2Nlc3MuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gYXV0aE9wdGlvbnMgVGhlIGN1c3RvbSBvcHRpb25zIGZvciB0aGUgYXV0aGVudGljYXRpb24gcmVxdWVzdC5cclxuICAgKiBAcGFyYW0gcG9wdXBPcHRpb25zIFRoZSBjb25maWd1cmF0aW9uIGZvciB0aGUgcG9wdXAgd2luZG93LlxyXG4gICAqIEBwYXJhbSBjb25maWdJZCBUaGUgY29uZmlnSWQgdG8gcGVyZm9ybSB0aGUgYWN0aW9uIGluIGJlaGFsZiBvZi4gSWYgbm90IHBhc3NlZCwgdGhlIGZpcnN0IGNvbmZpZ3Mgd2lsbCBiZSB0YWtlblxyXG4gICAqXHJcbiAgICogQHJldHVybnMgQW4gYE9ic2VydmFibGU8TG9naW5SZXNwb25zZT5gIGNvbnRhaW5pbmcgYWxsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBsb2dpblxyXG4gICAqL1xyXG4gIGF1dGhvcml6ZVdpdGhQb3BVcChcclxuICAgIGF1dGhPcHRpb25zPzogQXV0aE9wdGlvbnMsXHJcbiAgICBwb3B1cE9wdGlvbnM/OiBQb3B1cE9wdGlvbnMsXHJcbiAgICBjb25maWdJZD86IHN0cmluZ1xyXG4gICk6IE9ic2VydmFibGU8TG9naW5SZXNwb25zZT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlndXJhdGlvblNlcnZpY2VcclxuICAgICAgLmdldE9wZW5JRENvbmZpZ3VyYXRpb25zKGNvbmZpZ0lkKVxyXG4gICAgICAucGlwZShcclxuICAgICAgICBjb25jYXRNYXAoKHsgYWxsQ29uZmlncywgY3VycmVudENvbmZpZyB9KSA9PlxyXG4gICAgICAgICAgdGhpcy5sb2dpblNlcnZpY2UubG9naW5XaXRoUG9wVXAoXHJcbiAgICAgICAgICAgIGN1cnJlbnRDb25maWcsXHJcbiAgICAgICAgICAgIGFsbENvbmZpZ3MsXHJcbiAgICAgICAgICAgIGF1dGhPcHRpb25zLFxyXG4gICAgICAgICAgICBwb3B1cE9wdGlvbnNcclxuICAgICAgICAgIClcclxuICAgICAgICApXHJcbiAgICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNYW51YWxseSByZWZyZXNoZXMgdGhlIHNlc3Npb24uXHJcbiAgICpcclxuICAgKiBAcGFyYW0gY3VzdG9tUGFyYW1zIEN1c3RvbSBwYXJhbWV0ZXJzIHRvIHBhc3MgdG8gdGhlIHJlZnJlc2ggcmVxdWVzdC5cclxuICAgKiBAcGFyYW0gY29uZmlnSWQgVGhlIGNvbmZpZ0lkIHRvIHBlcmZvcm0gdGhlIGFjdGlvbiBpbiBiZWhhbGYgb2YuIElmIG5vdCBwYXNzZWQsIHRoZSBmaXJzdCBjb25maWdzIHdpbGwgYmUgdGFrZW5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIEFuIGBPYnNlcnZhYmxlPExvZ2luUmVzcG9uc2U+YCBjb250YWluaW5nIGFsbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbG9naW5cclxuICAgKi9cclxuICBmb3JjZVJlZnJlc2hTZXNzaW9uKFxyXG4gICAgY3VzdG9tUGFyYW1zPzogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIH0sXHJcbiAgICBjb25maWdJZD86IHN0cmluZ1xyXG4gICk6IE9ic2VydmFibGU8TG9naW5SZXNwb25zZT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlndXJhdGlvblNlcnZpY2VcclxuICAgICAgLmdldE9wZW5JRENvbmZpZ3VyYXRpb25zKGNvbmZpZ0lkKVxyXG4gICAgICAucGlwZShcclxuICAgICAgICBjb25jYXRNYXAoKHsgYWxsQ29uZmlncywgY3VycmVudENvbmZpZyB9KSA9PlxyXG4gICAgICAgICAgdGhpcy5yZWZyZXNoU2Vzc2lvblNlcnZpY2UudXNlckZvcmNlUmVmcmVzaFNlc3Npb24oXHJcbiAgICAgICAgICAgIGN1cnJlbnRDb25maWcsXHJcbiAgICAgICAgICAgIGFsbENvbmZpZ3MsXHJcbiAgICAgICAgICAgIGN1c3RvbVBhcmFtc1xyXG4gICAgICAgICAgKVxyXG4gICAgICAgIClcclxuICAgICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldm9rZXMgdGhlIHJlZnJlc2ggdG9rZW4gKGlmIHByZXNlbnQpIGFuZCB0aGUgYWNjZXNzIHRva2VuIG9uIHRoZSBzZXJ2ZXIgYW5kIHRoZW4gcGVyZm9ybXMgdGhlIGxvZ29mZiBvcGVyYXRpb24uXHJcbiAgICogVGhlIHJlZnJlc2ggdG9rZW4gYW5kIGFuZCB0aGUgYWNjZXNzIHRva2VuIGFyZSByZXZva2VkIG9uIHRoZSBzZXJ2ZXIuIElmIHRoZSByZWZyZXNoIHRva2VuIGRvZXMgbm90IGV4aXN0XHJcbiAgICogb25seSB0aGUgYWNjZXNzIHRva2VuIGlzIHJldm9rZWQuIFRoZW4gdGhlIGxvZ291dCBydW4uXHJcbiAgICpcclxuICAgKiBAcGFyYW0gY29uZmlnSWQgVGhlIGNvbmZpZ0lkIHRvIHBlcmZvcm0gdGhlIGFjdGlvbiBpbiBiZWhhbGYgb2YuIElmIG5vdCBwYXNzZWQsIHRoZSBmaXJzdCBjb25maWdzIHdpbGwgYmUgdGFrZW5cclxuICAgKiBAcGFyYW0gbG9nb3V0QXV0aE9wdGlvbnMgVGhlIGN1c3RvbSBvcHRpb25zIGZvciB0aGUgcmVxdWVzdC5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIEFuIG9ic2VydmFibGUgd2hlbiB0aGUgYWN0aW9uIGlzIGZpbmlzaGVkXHJcbiAgICovXHJcbiAgbG9nb2ZmQW5kUmV2b2tlVG9rZW5zKFxyXG4gICAgY29uZmlnSWQ/OiBzdHJpbmcsXHJcbiAgICBsb2dvdXRBdXRoT3B0aW9ucz86IExvZ291dEF1dGhPcHRpb25zXHJcbiAgKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyYXRpb25TZXJ2aWNlXHJcbiAgICAgIC5nZXRPcGVuSURDb25maWd1cmF0aW9ucyhjb25maWdJZClcclxuICAgICAgLnBpcGUoXHJcbiAgICAgICAgY29uY2F0TWFwKCh7IGFsbENvbmZpZ3MsIGN1cnJlbnRDb25maWcgfSkgPT5cclxuICAgICAgICAgIHRoaXMubG9nb2ZmUmV2b2NhdGlvblNlcnZpY2UubG9nb2ZmQW5kUmV2b2tlVG9rZW5zKFxyXG4gICAgICAgICAgICBjdXJyZW50Q29uZmlnLFxyXG4gICAgICAgICAgICBhbGxDb25maWdzLFxyXG4gICAgICAgICAgICBsb2dvdXRBdXRoT3B0aW9uc1xyXG4gICAgICAgICAgKVxyXG4gICAgICAgIClcclxuICAgICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIExvZ3Mgb3V0IG9uIHRoZSBzZXJ2ZXIgYW5kIHRoZSBsb2NhbCBjbGllbnQuIElmIHRoZSBzZXJ2ZXIgc3RhdGUgaGFzIGNoYW5nZWQsIGNvbmZpcm1lZCB2aWEgY2hlY2sgc2Vzc2lvbixcclxuICAgKiB0aGVuIG9ubHkgYSBsb2NhbCBsb2dvdXQgaXMgcGVyZm9ybWVkLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGNvbmZpZ0lkIFRoZSBjb25maWdJZCB0byBwZXJmb3JtIHRoZSBhY3Rpb24gaW4gYmVoYWxmIG9mLiBJZiBub3QgcGFzc2VkLCB0aGUgZmlyc3QgY29uZmlncyB3aWxsIGJlIHRha2VuXHJcbiAgICogQHBhcmFtIGxvZ291dEF1dGhPcHRpb25zIHdpdGggY3VzdG9tIHBhcmFtZXRlcnMgYW5kL29yIGFuIGN1c3RvbSB1cmwgaGFuZGxlclxyXG4gICAqL1xyXG4gIGxvZ29mZihcclxuICAgIGNvbmZpZ0lkPzogc3RyaW5nLFxyXG4gICAgbG9nb3V0QXV0aE9wdGlvbnM/OiBMb2dvdXRBdXRoT3B0aW9uc1xyXG4gICk6IE9ic2VydmFibGU8dW5rbm93bj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlndXJhdGlvblNlcnZpY2VcclxuICAgICAgLmdldE9wZW5JRENvbmZpZ3VyYXRpb25zKGNvbmZpZ0lkKVxyXG4gICAgICAucGlwZShcclxuICAgICAgICBjb25jYXRNYXAoKHsgYWxsQ29uZmlncywgY3VycmVudENvbmZpZyB9KSA9PlxyXG4gICAgICAgICAgdGhpcy5sb2dvZmZSZXZvY2F0aW9uU2VydmljZS5sb2dvZmYoXHJcbiAgICAgICAgICAgIGN1cnJlbnRDb25maWcsXHJcbiAgICAgICAgICAgIGFsbENvbmZpZ3MsXHJcbiAgICAgICAgICAgIGxvZ291dEF1dGhPcHRpb25zXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgKVxyXG4gICAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTG9ncyB0aGUgdXNlciBvdXQgb2YgdGhlIGFwcGxpY2F0aW9uIHdpdGhvdXQgbG9nZ2luZyB0aGVtIG91dCBvZiB0aGUgc2VydmVyLlxyXG4gICAqIFVzZSB0aGlzIG1ldGhvZCBpZiB5b3UgaGF2ZSBfb25lXyBjb25maWcgZW5hYmxlZC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBjb25maWdJZCBUaGUgY29uZmlnSWQgdG8gcGVyZm9ybSB0aGUgYWN0aW9uIGluIGJlaGFsZiBvZi4gSWYgbm90IHBhc3NlZCwgdGhlIGZpcnN0IGNvbmZpZ3Mgd2lsbCBiZSB0YWtlblxyXG4gICAqL1xyXG4gIGxvZ29mZkxvY2FsKGNvbmZpZ0lkPzogc3RyaW5nKTogdm9pZCB7XHJcbiAgICB0aGlzLmNvbmZpZ3VyYXRpb25TZXJ2aWNlXHJcbiAgICAgIC5nZXRPcGVuSURDb25maWd1cmF0aW9ucyhjb25maWdJZClcclxuICAgICAgLnN1YnNjcmliZSgoeyBhbGxDb25maWdzLCBjdXJyZW50Q29uZmlnIH0pID0+XHJcbiAgICAgICAgdGhpcy5sb2dvZmZSZXZvY2F0aW9uU2VydmljZS5sb2dvZmZMb2NhbChjdXJyZW50Q29uZmlnLCBhbGxDb25maWdzKVxyXG4gICAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTG9ncyB0aGUgdXNlciBvdXQgb2YgdGhlIGFwcGxpY2F0aW9uIGZvciBhbGwgY29uZmlncyB3aXRob3V0IGxvZ2dpbmcgdGhlbSBvdXQgb2YgdGhlIHNlcnZlci5cclxuICAgKiBVc2UgdGhpcyBtZXRob2QgaWYgeW91IGhhdmUgX211bHRpcGxlXyBjb25maWdzIGVuYWJsZWQuXHJcbiAgICovXHJcbiAgbG9nb2ZmTG9jYWxNdWx0aXBsZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuY29uZmlndXJhdGlvblNlcnZpY2VcclxuICAgICAgLmdldE9wZW5JRENvbmZpZ3VyYXRpb25zKClcclxuICAgICAgLnN1YnNjcmliZSgoeyBhbGxDb25maWdzIH0pID0+XHJcbiAgICAgICAgdGhpcy5sb2dvZmZSZXZvY2F0aW9uU2VydmljZS5sb2dvZmZMb2NhbE11bHRpcGxlKGFsbENvbmZpZ3MpXHJcbiAgICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXZva2VzIGFuIGFjY2VzcyB0b2tlbiBvbiB0aGUgU2VjdXJpdHkgVG9rZW4gU2VydmljZS4gVGhpcyBpcyBvbmx5IHJlcXVpcmVkIGluIHRoZSBjb2RlIGZsb3cgd2l0aCByZWZyZXNoIHRva2Vucy4gSWYgbm8gdG9rZW4gaXNcclxuICAgKiBwcm92aWRlZCwgdGhlbiB0aGUgdG9rZW4gZnJvbSB0aGUgc3RvcmFnZSBpcyByZXZva2VkLiBZb3UgY2FuIHBhc3MgYW55IHRva2VuIHRvIHJldm9rZS5cclxuICAgKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzAwOVxyXG4gICAqXHJcbiAgICogQHBhcmFtIGFjY2Vzc1Rva2VuIFRoZSBhY2Nlc3MgdG9rZW4gdG8gcmV2b2tlLlxyXG4gICAqIEBwYXJhbSBjb25maWdJZCBUaGUgY29uZmlnSWQgdG8gcGVyZm9ybSB0aGUgYWN0aW9uIGluIGJlaGFsZiBvZi4gSWYgbm90IHBhc3NlZCwgdGhlIGZpcnN0IGNvbmZpZ3Mgd2lsbCBiZSB0YWtlblxyXG4gICAqXHJcbiAgICogQHJldHVybnMgQW4gb2JzZXJ2YWJsZSB3aGVuIHRoZSBhY3Rpb24gaXMgZmluaXNoZWRcclxuICAgKi9cclxuICByZXZva2VBY2Nlc3NUb2tlbihhY2Nlc3NUb2tlbj86IGFueSwgY29uZmlnSWQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlndXJhdGlvblNlcnZpY2VcclxuICAgICAgLmdldE9wZW5JRENvbmZpZ3VyYXRpb24oY29uZmlnSWQpXHJcbiAgICAgIC5waXBlKFxyXG4gICAgICAgIGNvbmNhdE1hcCgoY29uZmlnKSA9PlxyXG4gICAgICAgICAgdGhpcy5sb2dvZmZSZXZvY2F0aW9uU2VydmljZS5yZXZva2VBY2Nlc3NUb2tlbihjb25maWcsIGFjY2Vzc1Rva2VuKVxyXG4gICAgICAgIClcclxuICAgICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldm9rZXMgYSByZWZyZXNoIHRva2VuIG9uIHRoZSBTZWN1cml0eSBUb2tlbiBTZXJ2aWNlLiBUaGlzIGlzIG9ubHkgcmVxdWlyZWQgaW4gdGhlIGNvZGUgZmxvdyB3aXRoIHJlZnJlc2ggdG9rZW5zLiBJZiBubyB0b2tlbiBpc1xyXG4gICAqIHByb3ZpZGVkLCB0aGVuIHRoZSB0b2tlbiBmcm9tIHRoZSBzdG9yYWdlIGlzIHJldm9rZWQuIFlvdSBjYW4gcGFzcyBhbnkgdG9rZW4gdG8gcmV2b2tlLlxyXG4gICAqIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3MDA5XHJcbiAgICpcclxuICAgKiBAcGFyYW0gcmVmcmVzaFRva2VuIFRoZSBhY2Nlc3MgdG9rZW4gdG8gcmV2b2tlLlxyXG4gICAqIEBwYXJhbSBjb25maWdJZCBUaGUgY29uZmlnSWQgdG8gcGVyZm9ybSB0aGUgYWN0aW9uIGluIGJlaGFsZiBvZi4gSWYgbm90IHBhc3NlZCwgdGhlIGZpcnN0IGNvbmZpZ3Mgd2lsbCBiZSB0YWtlblxyXG4gICAqXHJcbiAgICogQHJldHVybnMgQW4gb2JzZXJ2YWJsZSB3aGVuIHRoZSBhY3Rpb24gaXMgZmluaXNoZWRcclxuICAgKi9cclxuICByZXZva2VSZWZyZXNoVG9rZW4ocmVmcmVzaFRva2VuPzogYW55LCBjb25maWdJZD86IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmF0aW9uU2VydmljZVxyXG4gICAgICAuZ2V0T3BlbklEQ29uZmlndXJhdGlvbihjb25maWdJZClcclxuICAgICAgLnBpcGUoXHJcbiAgICAgICAgY29uY2F0TWFwKChjb25maWcpID0+XHJcbiAgICAgICAgICB0aGlzLmxvZ29mZlJldm9jYXRpb25TZXJ2aWNlLnJldm9rZVJlZnJlc2hUb2tlbihjb25maWcsIHJlZnJlc2hUb2tlbilcclxuICAgICAgICApXHJcbiAgICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIHRoZSBlbmQgc2Vzc2lvbiBVUkwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gaW1wbGVtZW50IGFuIGFsdGVybmF0ZSBzZXJ2ZXIgbG9nb3V0LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIGN1c3RvbVBhcmFtc1xyXG4gICAqIEBwYXJhbSBjb25maWdJZCBUaGUgY29uZmlnSWQgdG8gcGVyZm9ybSB0aGUgYWN0aW9uIGluIGJlaGFsZiBvZi4gSWYgbm90IHBhc3NlZCwgdGhlIGZpcnN0IGNvbmZpZ3Mgd2lsbCBiZSB0YWtlblxyXG4gICAqXHJcbiAgICogQHJldHVybnMgQSBzdHJpbmcgd2l0aCB0aGUgZW5kIHNlc3Npb24gdXJsIG9yIG51bGxcclxuICAgKi9cclxuICBnZXRFbmRTZXNzaW9uVXJsKFxyXG4gICAgY3VzdG9tUGFyYW1zPzogeyBbcDogc3RyaW5nXTogc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiB9LFxyXG4gICAgY29uZmlnSWQ/OiBzdHJpbmdcclxuICApOiBPYnNlcnZhYmxlPHN0cmluZyB8IG51bGw+IHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyYXRpb25TZXJ2aWNlXHJcbiAgICAgIC5nZXRPcGVuSURDb25maWd1cmF0aW9uKGNvbmZpZ0lkKVxyXG4gICAgICAucGlwZShcclxuICAgICAgICBtYXAoKGNvbmZpZykgPT4gdGhpcy51cmxTZXJ2aWNlLmdldEVuZFNlc3Npb25VcmwoY29uZmlnLCBjdXN0b21QYXJhbXMpKVxyXG4gICAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyB0aGUgYXV0aG9yaXplIFVSTCBiYXNlZCBvbiB5b3VyIGZsb3dcclxuICAgKlxyXG4gICAqIEBwYXJhbSBjdXN0b21QYXJhbXNcclxuICAgKiBAcGFyYW0gY29uZmlnSWQgVGhlIGNvbmZpZ0lkIHRvIHBlcmZvcm0gdGhlIGFjdGlvbiBpbiBiZWhhbGYgb2YuIElmIG5vdCBwYXNzZWQsIHRoZSBmaXJzdCBjb25maWdzIHdpbGwgYmUgdGFrZW5cclxuICAgKlxyXG4gICAqIEByZXR1cm5zIEEgc3RyaW5nIHdpdGggdGhlIGF1dGhvcml6ZSBVUkwgb3IgbnVsbFxyXG4gICAqL1xyXG4gIGdldEF1dGhvcml6ZVVybChcclxuICAgIGN1c3RvbVBhcmFtcz86IHsgW3A6IHN0cmluZ106IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gfSxcclxuICAgIGNvbmZpZ0lkPzogc3RyaW5nXHJcbiAgKTogT2JzZXJ2YWJsZTxzdHJpbmcgfCBudWxsPiB7XHJcbiAgICByZXR1cm4gdGhpcy5jb25maWd1cmF0aW9uU2VydmljZVxyXG4gICAgICAuZ2V0T3BlbklEQ29uZmlndXJhdGlvbihjb25maWdJZClcclxuICAgICAgLnBpcGUoXHJcbiAgICAgICAgY29uY2F0TWFwKChjb25maWcpID0+XHJcbiAgICAgICAgICB0aGlzLnVybFNlcnZpY2UuZ2V0QXV0aG9yaXplVXJsKFxyXG4gICAgICAgICAgICBjb25maWcsXHJcbiAgICAgICAgICAgIGN1c3RvbVBhcmFtcyA/IHsgY3VzdG9tUGFyYW1zIH0gOiB1bmRlZmluZWRcclxuICAgICAgICAgIClcclxuICAgICAgICApXHJcbiAgICAgICk7XHJcbiAgfVxyXG59XHJcbiJdfQ==